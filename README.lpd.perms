 ***************************************************************************
 * LPRng - An Extended Print Spooler System
 *
 * Copyright 1988-1995 Patrick Powell, San Diego State University
 *     papowell@sdsu.edu
 * See LICENSE for conditions of use.
 *
 ***************************************************************************
 * MODULE: README.lpd.perms
 * PURPOSE: Overview of lpd.perms file
 * $Id: README.lpd.perms,v 3.1 1997/01/22 23:15:31 papowell Exp $
 **************************************************************************/

                 LPRng - An Enhanced Printer Spooler
                    lpd.perms file
                  Patrick Powell <papowell@sdsu.edu>
                Updated Mon Jan 13 07:08:27 PST 1997

Access control to the LPRng facilities is controlled by entries
in a set of lpd.perms files.  The common location for these files
are: /etc/lpd.perms,  /usr/etc/lpd.perms, and  /var/spool/lpd/lpd.perms.
The locations of these files are set by the printer_perms_path entry
in the lpd.conf file or by compile time defaults in the src/common/defaults.c
file.  In addition to the global permissions files,  each spool queue
can also have a permissions file.  This file is searched when information
or operations on a specific printer is requested.

Each time the lpd server is given a user request or carries out an unspooling
operation,  it searches to the perms files to determine if the action
is ACCEPT or REJECT.  The first ACCEPT or REJECT found terminates the search.
If none is found,  then the last DEFAULT action is used.

Permissions are checked by the use of 'keys' and matches.  For each of
the following LPR activities,  the following keys have a value. 

Key          Match Connect Job   Job    LPQ  LPRM  LPC
                           Spool Print
SERVICE      S     'X'     'R'   'P'    'Q'  'M'   'C,S'
USER         S     -       JUSR  JUSR   JUSR JUSR  JUSR
HOST         S     RH      JH    JH     JH   JH    JH
GROUP        S     -       JUSR  JUSR   JUSR JUSR  JUSR
IFIP         IP    IFIP    IFIP  -      IFIP IFIP  IFIP
IP           IP    RIP     JIP   JIP    RIP  JIP   JIP
PORT         N     PORT    PORT  -      PORT PORT  PORT
REMOTEUSER   S     -       JUSR  JUSR   JUSR CUSR  CUSR
REMOTEHOST   S     RH      RH    JH     RH   RH    RH
REMOTEGROUP  S     -       JUSR  JUSR   JUSR CUSR  CUSR
REMOTEIP     IP    RIP     RIP   JIP    RIP  RIP   RIP
CONTROLLINE  S     -       CL    CL     CL   CL    CL
PRINTER      S     -       PR    PR     PR   PR    PR
FORWARD      V     -       -     SA     -    SA    SA
SAMEHOST     V     -       SA    -      SA   SA    SA
SAMEUSER     V     -       -     -      SU   SU    SU
SERVER       V     -       SV    -      SV   SV    SV

KEY:
  JH = HOST          host in control file
  RH = REMOTEHOST    connecting host name
  JUSR = USER        user in control file
  CUSR = REMOTEUSER  user from control request
  JIP= IP            IP address of host in control file
  RIP= REMOTEIP      IP address of requesting host
  PORT=              connecting host origination port
  CONTROLLINE=       pattern match of control line in control file
  FW= IP of source of request = IP of host in control file
  SA= IP of source of request = IP of host in control file
  SU= user from request = user in control file
  SA= IP of source of request = IP of server host
  IFIP= Interface IP address of source

Match: S = string with wild card, IP = IPaddress[/netmask],
  N = low[-high] number range, V = exact value match.
SERVICE: 'X' - Connection request; 'R' - lpr request from remote host;
   'P' - print job in queue; 'Q' - lpq request, 'M' - lprm request;
   'C' - lpc spool control request; 'S' - lpc spool status request
NOTE: when printing (P action), the remote and job check values
  (i.e. - RUSR, JUSR) are identical.


The  special key letter=patterns searches the control file
line starting with the (upper case) letter, and is usually
used  with  printing  and  spooling  checks.  For example,
C=A*,B* would check that the class information (i.e.- line
in  the control file starting with C) had a value starting
with A or B.

A permission line consists of list of tests and an a result value
If all of the tests succeed,  then a match has been found and the
permission testing completes with the result value.  You use the
DEFAULT reserved word to set the default ACCEPT/DENY result.
The NOT keyword will reverse the sense of a test.

Each test can have one or more optional values separated by
commas. For example USER=john,paul,mark has 3 test values.

The Match type specifies how the matching is done.
S = string type match - string match with glob.
    Format:  string with wildcards (*)
             * matches 0 or more chars
    Character comparison is case insensitive.
    For example - USER=th*s matches uTHS, This, This, Theses

IP = IP address and submask.  IP address must be in dotted form.
     Format: x.x.x.x[/y.y.y.y]  x.x.x.x is IP address
             y.y.y.y is optional submask, default is 255.255.255.255
     Match is done by converting to 32 bit x, y, and IP value and using:
        success = ((x ^ IP ) & y) == 0   (C language notation)
    i.e.- only bits where mask is non-zero are used in comparison.
    For example - IP=130.191.0.0/255.255.0.0 matches all address 130.191.X.X
         
N = numerical range  -  low-high integer range.
     Format: low[-high]
     Example: PORT=0-1023 matches a port in range 0 - 1023 (privileged)

The SAMEUSER and SAMEHOST are options that form values from information
in control files or connections.  The GROUP entry searches the user group 
database for group names matching the pattern,  and then searches these
for the user name.  If the name is found,  the search is successful.
If the group name has the form @group, then it is treated as a netgroup
if the innetgrp() function is available on the local host.  Note that
wild card matches fail on netgroups.

The SERVER entry is successful if the request originated from the current
lpd server host.

Note carefully that the USER, HOST, and IP values are based on values found
in the control file currently being checked for permissions.  The
REMOTEUSER, REMOTEHOST, and REMOTEIP are based on values supplied as part
of a connection to the LPD server,  or on the actual TCP/IP connection.

There is a subtle problem with names and IP addresses which are
obtained for 'multi-homed hosts', i.e. - those with multiple
ethernet interfaces,  and for IPV6 (IP Version 6),  in which a host
can have multiple addresses,  and for the normal host which can have
both a short name and a fully qualified domain name.

The IFIP (interface IP) field can be used to check the IP address
of the origination of the request,  as reported by the information
returned by the accept() system call.  Note that this information may
be IPV4 or IPV6 information,  depending on the origination of the
system.  This information is used by gethostbyaddr() to obtain the
orginating host fully qualified domain name (FQDN) and set of IP addresses.
Note that this FQDN will be for the originating interface,  and may
not be the cannonical host name.  Some systems which use the Domain Name Server
(DNS) system may add the cannonical system name as an alias.

When performing an IP address match,  the entire list of IP addresses
for a system will now be checked.  If one of these matches, then success
is reported.  Similarly,  the entire list of host names and aliases will
be checked.  If one of these matches,  then success will be reported.

In addition,  when checking for printing, if the name lookup for the
host reported in the control file fails,  then we assume that the host
is unknown and all match checks for names or IP addresses will fail.
You can determine if a host has an entry by using the following check,
which will reject all requests from a remotehost which does not have
a DNS entry.
  REJECT NOT REMOTEHOST=*

Example Permissions

# All operations allowed except those specifically forbidden
DEFAULT ACCEPT

#Reject connections which do not originate from hosts with an
# address on 130.191.0.0 or from localhost,
# or name is not assigned to Engineering pc's

  REJECT SERVICE=X NOT IFIP=130.191.0.0/16,127.0.0.1/32
  REJECT SERVICE=X NOT REMOTEHOST=engpc*

#Do not allow anybody but root or papowell on
#dickory.sdsu.edu or the server to use control
#facilities.
  ACCEPT SERVICE=C SERVER USER=root
  ACCEPT SERVICE=C REMOTEHOST=dickory.sdsu.edu USER=papowell

#Allow root on talker.sdsu.edu to control printer hpjet
  ACCEPT SERVICE=C HOST=talker.sdsu.edu PRINTER=hpjet USER=root
#Reject all others
  REJECT SERVICE=C

#Do not allow forwarded jobs or requests
  REJECT SERVICE=R,C,M FORWARD

# allow same user on originating host to remove a job
ACCEPT SERVICE=M SAMEHOST SAMEUSER
# allow root on server to remove a job
ACCEPT SERVICE=M SERVER REMOTEUSER=root
