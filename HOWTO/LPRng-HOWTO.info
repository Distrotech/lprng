This is Info file LPRng-HOWTO.info, produced by Makeinfo-1.64 from the
input file /tmp/sgmltmp.LPRng-HOWTO27753.info.2.

   \input texinfo


File: LPRng-HOWTO.info,  Node: Top,  Next: Introduction,  Up: (dir)

LPRng-HOWTO
***********

     Patrick Powell `papowell@astart.com'
     21 Dec 1998 (For LPRng-3.5.4)

   The LPRng software is an enhanced, extended, and portable
implementation of the Berkeley LPR print spooler functionality. While
providing the same interface and meeting RFC1179 requirements, the
implementation is completely independant and provides support for the
following features: lightweight (no databases needed) lpr, lpc, and
lprm programs; dynamic redirection of print queues; automatic job
holding; highly verbose diagnostics; multiple printers serving a single
queue; client programs do not need to run SETUID root; greatly enhanced
security checks; load balancing across multiple printers; and a greatly
improved permission and authorization mechanism.  The source software
compiles and runs on a wide variety of UNIX systems, and is compatible
with other print spoolers and network printers that use the LPR
interface and meet RFC1179 requirements. The package comes with filters
for PostScript and HP printers, as well as the usual 'dumb' printers,
and the PostScript and HP filters support page counting and produce
accounting information accounting. In addition there are a wide variety
of filters for page formatting and to produce banner pages. For users
that require compatibility with the SVR4 lp and lpstat programs, the
LPRng package provides emulation of these programs.  In addition, a
publically available PCNFSD server is distributed with LPRng and
interfaces with the PC/DOS/Windows based NFS style print spoolers.  In
addition, LPRng can be easily integrated with the Samba SMB support
package.  For users that require secure and/or authenticated printing
support, LPRng supports Kerberos 5, MIT Kerberos 4 extensions to LPR,
and PGP authentication methods.  Additional authentication support is
extremely simple to add.

* Menu:

* Introduction::
* Print Spooling Overview::
* Attaching Your Printer::
* Installing the Software::
* Printcap Database::
* Index To All The Options::
* System Specific Notes::
* The Most Frequently Asked Questions::
* Filters::
* Spool Queues and Files::
* /etc/lpd-conf Configuration File::
* The /etc/lpd-perms Permissions File::
* Running the software::
* Accounting::
* Authentication and Encryption::
* Status Monitoring and Logging::
* RFC 1179 - Line Printer Daemon Protocol::
* Acknowledgements::


File: LPRng-HOWTO.info,  Node: Introduction,  Next: Print Spooling Overview,  Prev: Top,  Up: Top

Introduction
************

   Printing is one of the essential services provided by computer
systems.  Users want reliable and easy to use methods of printing that
require a minimum amount of effort to used and understand.  On single
user systems with a directly attached printer they perceive that the
printing process is simply a matter of `storing' or `spooling' a file,
and then transferring it to the printer in a timely manner.  In the
classical `multi-user' systems, each user expects to share a common
printer with one or more users; the print `spooling' system provides
arbitration and sharing of the printer among the various users.  In a
`network' based multi-user system, there may be one or more printers
shared by multiple users on many different systems.  The print
`spoolers' will need to cooperate to provide print services to the
users in a simple an predictible manner.

   The LPRng print spooler software was developed to a flexible and
scalable approach to each of these printing problems.  It has been used
since 1988 in extremely demanding academic printing enviroments such as
University of Minnesota, MIT, and Rutgers, commerial companies such as
Dow Jones and Abbot Pharmaceuticals, as well as being distributed with
Linux, FreeBSD, and other systems.  Each of these environments has a
unique set of problems, demanding various configuration and
administrative capabilities.  For example, the simple single user
system with a single or limited number of printers requires easy
configuration and simple diagnostic procedures, while the network based
printing system requires highly robutest error logging, authentication,
and failover support.

   This document is structured to first provide an overview of the
LPRng printing system, and then a `quickstart' guide for single user
systems with a simple printer.  This includes printer hardware and
Operating System  specific setup descriptions.  Next, more complex
configurations are described, and their management and configuration
are outlined.  Next, an extremely detailed description of the LPRng
print spooling components and their functionallity is provided.
Finally, an index to the various features and functions of LPRng is
provided.

* Menu:

* What is LPRng?::
* More Information::
* Copyright::
* Disclaimer::
* Commercial Support::
* Web Site::
* FTP Sites::
* Mailing List::
* PGP Public Key::


File: LPRng-HOWTO.info,  Node: What is LPRng?,  Next: More Information,  Up: Introduction

What is LPRng?
==============

   LPRng is a print spooling system. It was designed to mimic the
Berkeley (University of California - Berkeley) Line Printers (LPR)
package, first found on Berkeley derivatives of the Unix operating
system.  LPRng will print a document with little or no knowledge of the
content or special processing required to print the document on a
stand-alone machine or in a distributed printing environment.  New (as
compared to Berkeley LPR) features include: lightweight `lpr', `lpc'
and `lprm' programs, dynamic redirection of print queues, automatic job
holding, highly verbose diagnostics, load balancing queues; enhanced
security (SUID not required in most environments), and easy
configuration.

   LPRng started life at the University of Waterloo in 1986 as PLP
(Public Line Printer), a replacement for the original BSD LPD code.
This was a one-shot effort by the author, Patrick Powell, to develop
code that could be freely redistributed without the restrictions of the
BSD/AT[amp   ]T license and would allow non-license sites to fix and
patch problems that they were having with print spooling.  From 1988 to
1992, various individuals and groups added features, hacked, slashed,
and modified the PLP code, coordinated largely by Justin Mason (`[lt
]jmason@iona.ie[gt    ]'), who started the LPRng mailing list (see
*Note More Information:: ).

   In 1992 while at San Diego State University Prof. Powell redesigned
and reimplemented the PLP code and named the result LPRng.  The goals
of the LPRng project were to build a server system that was as close to
user abuse proof as possible, that would provide services limited only
by the inherent capacities of the support system, RFC1179 compliant,
and with extensive debugging capabilities to allow quick and easy
diagnostics of problems.  Over the period from 1994-1999, LPRng users
have suggested extensions, provided patches, and added facilities.

   In early 1999 the code base for LPRng was reorganized in order to
provide a common method for running on non-UNIX platforms such as
Microsoft Windows NT, Apple Rhapsody, and embedded systems.

   As a side effect of this work, many security problems that could
develop were identified and steps taken to ensure that they were not
present in LPRng.  For example, LPRng clients such as lpr, lprm, lpc,
and lpq run as ordinary users programs, and even the lpd server can run
as a user once a network port has been opened.  Bounds checking is
performed on all input and formatting (for example, snprintf() rather
than sprintf() is used), as well as other preventive measures where
appropriate.


File: LPRng-HOWTO.info,  Node: More Information,  Next: Copyright,  Prev: What is LPRng?,  Up: Introduction

More Information
================

   The main LPRng documentation is the LPRng-HOWTO, which is available
in text, HTML, info, and PostScript format.  Information about LPRng
and the latest release can be found on the LPRng web page:

   http://www.astart.com/LPRng.html

   There is also a mailing list at `lprng@iona.com'. To subscribe, send
an email to `lprng-request@iona.com'. The body should contain only the
word `subscribe'. To get off the list later on, repeat the same
procedure, but use the word `unsubscribe'.

   Several presentations of LPRng and print spooling software have been
made at the Large Scale Installation Administrator (LISA) conferences
and are in the LPRng distribution and available on web sites.  LPRng -
An Enhanced Printer Spooler System was presented at the LISA95
conference, and is in the LPRng distribution as
LPRng[lowbar]DOC/LPRng-LISA95.ps.  The slides for the LISA97 and LISA98
tutorials on `Network Printing and Print Spooling'.


File: LPRng-HOWTO.info,  Node: Copyright,  Next: Disclaimer,  Prev: More Information,  Up: Introduction

Copyright
=========

   Material included in this document from the LPRng distribution
Copyright Patrick Powell 1988-1997, where applicable.

   The rights to distribute this document complete or in part are hereby
granted for non-commercial purposes. Partial reproductions must
acknowledge the source.

   Permission to distribute this file together with LPRng and `derived
works' (as defined in the LPRng license) is explicitly granted. This is
allowed independent of the license under which the software is
distributed.

   Citing the document is allowed as long as the source is acknowledged.


File: LPRng-HOWTO.info,  Node: Disclaimer,  Next: Commercial Support,  Prev: Copyright,  Up: Introduction

Disclaimer
==========

   `THE MATERIAL IN THIS SOFTWARE PACKAGE IS PROVIDED WITHOUT FEE AND
AS-IS WITH NO WARRANTY REGARDING FITNESS OF USE FOR ANY PURPOSE. THE
AUTHOR AND ALL CONTRIBUTORS ARE NOT LIABLE FOR ANY DAMAGES, DIRECT OR
INDIRECT, RESULTING FROM THE USE OF INFORMATION PROVIDED IN THIS
DOCUMENT.'


File: LPRng-HOWTO.info,  Node: Commercial Support,  Next: Web Site,  Prev: Disclaimer,  Up: Introduction

Commercial Support
==================

   AStArt Technologies provides commercial support and enhancements for
the LPRng and other network software.  AStArt provides network and
system consulting services for UNIX and NT systems, as well as real
time and network software.


File: LPRng-HOWTO.info,  Node: Web Site,  Next: FTP Sites,  Prev: Commercial Support,  Up: Introduction

Web Site
========

   Web Page:

   http://www.astart.com/lprng.html


File: LPRng-HOWTO.info,  Node: FTP Sites,  Next: Mailing List,  Prev: Web Site,  Up: Introduction

FTP Sites
=========

   The software may be obtained from
ftp://ftp.astart.com/pub/LPRng(Main site)
Mirrors:
ftp://ftp.sage-au.org.au/pub/printing/spooler/lprng (AU)
ftp://sunsite.ualberta.ca/pub/Mirror/LPRng/ (CA)
ftp://ftp.informatik.uni-hamburg.de/pub/os/unix/utils/LPRng (DE)
ftp://ftp.uni-paderborn.de/pub/unix/printer/plp/LPRng (DE)
ftp://ftp.iona.ie/pub/plp/LPRng (IE)
ftp://ftp.chembio.ntnu.no/pub/mirrors/LPRng (NO)
ftp://ftp.mono.org/pub/LPRng (UK)
ftp://ftp.cs.columbia.edu/pub/archives/pkg/LPRng (US)
ftp://ftp.cs.umn.edu/pub/LPRng (US)
ftp://ftp.iona.com/pub/plp/LPRng (US)
ftp://uiarchive.uiuc.edu/pub/packages/LPRng (US)

File: LPRng-HOWTO.info,  Node: Mailing List,  Next: PGP Public Key,  Prev: FTP Sites,  Up: Introduction

Mailing List
============

To join the LPRng mailing list, please send mail to
lprng-request@lprng.org with the word 'subscribe' in the BODY.

   The LPRng mailing list is archived on
http://www.findmail.com/list/lprng


File: LPRng-HOWTO.info,  Node: PGP Public Key,  Prev: Mailing List,  Up: Introduction

PGP Public Key
==============

   The LPRng distributions have an MD5 checksum calculated, which is
then signed with a PGP public key.  Here is the key for validating the
checksums:
     Type Bits/KeyID    Date       User ID
     pub  1024/00D95C9D 1997/01/31 Patrick A. Powell <papowell@astart.com>
     
     -----BEGIN PGP PUBLIC KEY BLOCK-----
     Version: 2.6.3i
     
     mQCNAzLygTQAAAEEANBW5fPYjN3wSAnP9xWOUc3CvsMUxjip0cN2sY5qrdoJyIhn
     qbAspBopR+tGQfyp5T7C21yfWRRnfXmoJ3FVtgToAsJUYmzoSFY08eDx+rmSqCLe
     rdJjX8aG8jVXpGipEo9U4QsUK+OKzx3/y/OaK4cizoWqKvy1l4lEzDsA2VydAAUT
     tCdQYXRyaWNrIEEuIFBvd2VsbCA8cGFwb3dlbGxAYXN0YXJ0LmNvbT6JAJUDBRA0
     XonoiUTMOwDZXJ0BAQ2cBAC7zU9Fn3sC3x0USJ+3vjhg/qA+Gjb5Fi1dJd4solc4
     vJvtf0UL/1/rGipbR+A0XHpHzJUMP9ZfJzKZjaK/d0ZBNlS3i+JnypypeQiAqo9t
     FV0OyUCwDfWybgAORuAa2V6UJnAhvj/7TpxMmCApolaIb4yFyKunHa8aBxN+17Ro
     rrQlUGF0cmljayBBLiBQb3dlbGwgPHBhcG93ZWxsQHNkc3UuZWR1PokAlQMFEDLy
     gTSJRMw7ANlcnQEBYBYD/0zTeoiDNnI+NjaIei6+6z6oakqO70qFVx0FG3aP3kRH
     WlDhdtFaAuaMRh+RItHfFfcHhw5K7jiJdgKiTgGfj5Vt3OdHYkeeh/sddqgf9YnS
     tpj0u5NfrotPTUw39n6YTgS5/aW0PQfO9dx7jVUcGeod1TGXTe9mIhDMwDJI4J14
     =3Zbp
     -----END PGP PUBLIC KEY BLOCK-----


File: LPRng-HOWTO.info,  Node: Print Spooling Overview,  Next: Attaching Your Printer,  Prev: Introduction,  Up: Top

Print Spooling Overview
***********************

   A print spooler is a program that accepts `print jobs' (which are
usually one or more files) from a program or network interface, stores
them in a `spool queue', and then sends them to a printer or another
print spooler.  Usually there are facilities to submit jobs, check on
the current job status, remove jobs from spool queues, and perform
administrative functions such as starting or stopping printing.

   A print spooler is a client/server application.  The client programs
are used to submit jobs to the print spooler program which performs the
actual printing operations.  In order to carry out these operations,
the server may need to use other programs to convert print job files
into a format acceptible to a printer, or perform various accounting or
administrative functions.

* Menu:

* Overview::
* Printcap Database::
* Print Server Configuration::


File: LPRng-HOWTO.info,  Node: Overview,  Next: Printcap Database,  Up: Print Spooling Overview

Overview
========

     +---------+    +-----+    +-----+     +--------+    +---------+
     | program | -> | lpr | -> | lpd |  -> | filter | -> | printer |
     +---------+    +-----+  * +-----+     +--------+    +---------+
                       *    *     |
                    printcap      V
                               +-----+     +--------+    +---------+
                               | lpd |  -> | filter | -> | printer |
                               +-----+     +--------+    +---------+
     
                                Figure 1

   Figure 1 shows the flow of data between the individual components of
the LPRng print spooling system.  A progam (or user) will use the `lpr'
program to send a file to the `lpd' server over a TCP/IP connection.
The `lpd'server will store the file temporarily in a spool queue
directory.  The information needed by the `lpr' and `lpd' programs to
carry out this activity is stored in the `printcap'  (usually called
the `/etc/printcap') database file.

   The `lpd' server sorts the queue entries and determines the print
order.  It will select a job to be printed, open a connection to the
printer, and then use a `filter' program to convert the file contents
into a format suiteable for the printer.  If the file does not need
conversion, then the `lpd' server will send the file directly to the
printer.

   The `lpd' server can also `forward' jobs to another print server
over a network connection, optionally sending them through a filter as
well.  The destination server can in turn forward the job or send it to
a printer.

   The protocol or commands used to do this job forward and transfer are
specified by *Note RFC 1179 - Line Printer Daemon Protocol:: .  This
protocol specifies how the `lpr' client program sends a job to the
`lpd' server, as well as how the `lpd' server forwards jobs to another
server.  In addition to job submission, RFC1179 specifies commands to
obtain queue status, to remove jobs from the queue, and to start and
stop print queues.


File: LPRng-HOWTO.info,  Node: Printcap Database,  Next: Print Server Configuration,  Prev: Overview,  Up: Print Spooling Overview

Printcap Database
=================

   As described in the *Note Print Spooling Overview:: , the
information in the `printcap' database is used control printing
operations.  While there is no RFC specifying its format or content,
there is a strong `de facto' standard for its format.  Here is a sample
printcap:
     lp:lp=psqueue@printserver.astart.com

   This printcap information tells the `client' programs that when a
client wants to print a job on the `lp' printer, that these jobs should
be sent to the `psqueue' on host `printerserver.astart.com'.  On the
printserver, the following printcap entry is used by the `lpd' server
to do the printing.
     psqueue:server
       :lp=/dev/lp0
       :sd=/var/spool/lpd/psqueue
       :if=/usr/local/bin/psfilter

   The `sd' (spool queue directory) entry specifies the directory where
print jobs will be placed.  The `lp' line specifies an actual output
device, so the `lpd' server will open this device for printing.  The
`if' (input file filter) entry specifies the program to be used to
translate the input file into a format compatible with the actual
printer.  Many of the times there is not need for conversion, and this
entry is left out.


File: LPRng-HOWTO.info,  Node: Print Server Configuration,  Prev: Printcap Database,  Up: Print Spooling Overview

Print Server Configuration
==========================

   The previous sections have given a very high level view of printing
operations.  In order to do printing the following programs and
information must be established:
  1. The printer itself, and the interface to the printer.

  2. Client programs for use by users or other programs to send jobs to
     the print server and perform administrative functions.

  3. A server program that runs on a host that accepts jobs for
     printing.

  4. Printcap information to control the printing operations.

  5. Filters that convert print jobs into formats compatible with
     printers.

  6. System facilities such as spool queues or storage areas for jobs.

   The following sections will cover each of these topics in turn.  The
initial sections assume that most users are setting up printers on
small systems and require an extremely simple print capability.  Later
sections explore the various configurations that can be used to support
large networks of print spoolers as would be found in large academic
institutions or businesses.


File: LPRng-HOWTO.info,  Node: Attaching Your Printer,  Next: Installing the Software,  Prev: Print Spooling Overview,  Up: Top

Attaching Your Printer
**********************

   When installing a printer, the first step should be to make sure
that the printer is actually working independently of the software.
The following section outlines some simple diagnostics that you can use
to check printer connectivity.

* Menu:

* Network Printers::
* Parallel Printers::
* Serial Printers::


File: LPRng-HOWTO.info,  Node: Network Printers,  Next: Parallel Printers,  Up: Attaching Your Printer

Network Printers
================

   The most flexible and highest throughput printer interface is via a
network (TCP/IP) connection.  Most high performance printers have a
built in network interface, or you can attach them to a `printer server'
box which provides a network interface.  Network print boxes can be
obtained from Hewlett Packard (http://www.hp.com), Lantronixs
(http://www.lantronix.com), and Rose Electronics (http://www.rosel.com).

   The network interface usually supports multiple network printing
protocols.  The most common are the LPD (RFC1179), Socket API,
APPsocket, SMB, and Novell Netware interfaces.  LPRng directly supports
the LPD (RFC1179) and Socket API interfaces, and you can use the
`smbclient' program from the *Note SAMBA Support::  for the SMB
interface.  There are no plans to support the Novell Netware interace,
given the wide range of alternatives.

* Menu:

* Socket API::
* LPD (RFC 1179) Protcol::
* APPsocket::


File: LPRng-HOWTO.info,  Node: Socket API,  Next: LPD (RFC 1179) Protcol,  Up: Network Printers

Socket API
----------

   The most powerful network connection is via the the Socket API.  The
most common Socket API, and a `de facto' standard, is the one used by
Hewlett Packard on their JetDirect cards, which allows a TCP/IP
connection to port 9100.  This is a TCP/IP port on the printer that
provides a direct connection to the print engine, similar to a serial
or parallel port.  This connection is usually full duplex and provides
error messages and status information during printing.

   The Socket API is extremely simple.
  1. The user establishes a connection to port 9100.  This connection
     may be refused if the printer is busy printing a job.

  2. Once the connection has been established, the print job is sent
     over the connection.  During this transfer, error messages may be
     returned over the data link.

  3. After sending all the data, the sender should do a `half-close' of
     the connection.  This tells the printer that no more data will be
     sent.

  4. After finishing printing the job, the printer will close the
     connection.

   You can use the netcat utility by Hobbit `[lt
]Hobbit@avian.org[gt    ]' to test that this interface is available and
working.  If `ellipse.ps' is a test file, then: The simplest and
easiest way to print a file to a network printer appears
       nc printer.ip.addr 9100 [lt    ] file
     Example:
       nc 10.0.0.25 9100 [lt    ] ellipse.ps


File: LPRng-HOWTO.info,  Node: LPD (RFC 1179) Protcol,  Next: APPsocket,  Prev: Socket API,  Up: Network Printers

LPD (RFC 1179) Protcol
----------------------

   The second most common network print protocol is the RFC1179 TCP/IP
protcol.  This is described in detail in later sections of this
document, but basically consists of a simple set of command and
responses.
  1. A connection is made to TCP/IP port 515 on the printer.  As for
     the Socket API, this connection may fail if the printer is busy
     printing another job or has another network connection open.

  2. Once the connection has been established, a print request command
     is sent to the printer, and if printing is allowed, and
     acknowlegement will be received.

  3. The files comprising the print job are sent to the printer.

  4. The connection to the printer is closed.

   During the job transfer no error information is returned, or other
status information.  This must be obtained by reconnecting to the
printer and sending a print status request.  This is a major weakness
of the RFC1179 protocol.

   When the LPRng software package has been installed, it is easy to
check printing by using a command of the form:
       lpr -Plp@ipaddr -Dnetwork file
     Example:
       lpr -Plp@10.0.0.25 -Dnetwork ellipse.ps

   The `-Plp@ipaddr' option will cause the `lpr' program to make a
direct connection to port 515  and send the print file using the RFC1179
protocol.  The `-Dnetwork' debugging option will cause detailed network
status to be displayed during this process.

   In addition to the `lpr' program, the Perl `cheap[lowbar]lpr'
program can be used.  This and other test programs are in the LPRng
Distribution `UTILS' directory.


File: LPRng-HOWTO.info,  Node: APPsocket,  Prev: LPD (RFC 1179) Protcol,  Up: Network Printers

APPsocket
---------

   The APPsocket interface is supported by Tektronix and some other
printer vendors.  It is similar to the Socket API, with a couple of
minor differences.
  1. The printer has two ports for network connections: TCP port 9100
     for TCP/IP stream connections and UDP port 9101 for UDP packet
     connections.

  2. When a 0 length UDP packet or a UDP packet containing only `CR/LF'
     is sent to UDP port 9101, the printer will return a packet to the
     sender containing print status information.  This information
     indicates the printers current status (busy, idle, printing) and
     any error conditions.

  3. To send a job to the printer, a connection to port 9100 is made.
     This connection will be refused while the printer is busy or has a
     connection to another host.

  4. When the TCP connection is established, the job can be sent over
     the TCP stream.  When all of the job has been transferred, the
     connection should be `shutdown' for sending data by the sender,
     but remain open to received error messages or other information.

  5. An end or job indication in the data stream will also act to
     terminate the connection.  This means that if the PostScript
     CTRL-D (end of job) character is sent in a job,  then the
     connection will be terminated.

  6. Once all the data has been received and the job has finished
     printing, the connection will be terminated by the printer.

   The LPRng IFHP filter program has support for the APPsocket
interface.  Also, there are Perl or other programs which can
communicate with the printer.  See *Note Tektronix Phaser Printers::
for details.


File: LPRng-HOWTO.info,  Node: Parallel Printers,  Next: Serial Printers,  Prev: Network Printers,  Up: Attaching Your Printer

Parallel Printers
=================

   In most UNIX systems the printer port has the name `/dev/lpt',
`/dev/prn', or something similar.  On most systems the `dmesg' utility
will print a list of IO devices found during system configuration.  Use
the following commands to get the information and scan for the device.
You should also make sure that the printer device is available.
     dmesg >/tmp/a
     grep lp /tmp/a
     ls /dev/lp*

   Gordon Haverland `[lt    ]haverlan@agric.gov.ab.ca'[gt    ] supplied
this little script, that will assist with this:
     #!/bin/sh
     #set -v -x              # uncomment for debugging
     PATH=/bin:/usr/bin
     printer=
     for $printer in /dev/lp* ;
     do
         echo PRINTER TEST to $printer 1[gt    ]&2
         for i in 1 2 3 4 5 6 7 8 9;
         do
             echo PRINTER $printer $i [gt    ] $printer;
         done
         echo -e \\r\\f [gt    ] $printer
     done
     exit 0;

   If your printer is connected to the device name you provided, then
you should get a page of something out.  If the output suffers from the
"staircase" effect, you will see the numbers "marching" across the
page, otherwise the numbers will all be in a single column.


File: LPRng-HOWTO.info,  Node: Serial Printers,  Prev: Parallel Printers,  Up: Attaching Your Printer

Serial Printers
===============

   If your printer is attached by a serial line, then you may need to
set the serial line characteristictics before sending the job to the
printer.  Here are a set of guidelines to following when attaching a
serial port printer to a serial line.

   1. Check to make sure that the line is not enabled for login.
Logins are usually managed by the `getty' (BSD) or `ttymon' (Solaris,
SystemV).  Check your system documentation and make sure that these
daemons are not managing the serial line.

   2. Check the permissions and ownership of the serial line.  For the
most easy testing, set the permissions to 0666 (everybody can open for
reading and writing).  After you have made sure that you can send jobs
to the printer, you might want to change the ownership of the serial
line to the LPD server and change the permissions to 0600.

   3. Make sure that you can print a test file on the printer via the
serial port.  This may require setting the line characteristictics and
then sending a file to the printer.  You should try to use 8 bit, no
parity, with hardware flow control and no special character
interpretation, and definitely no LF to CR/LF translation.  The problem
is that different versions of UNIX systems have different sets of
stty(1) commands to do this.  The following simple test script can help
in this.
     #!/bin/sh
     # 9600, no echo, no CR
     FLAGS= 9600 -raw -parenb cs8 crtscts
     DEV= /dev/tty01
     (stty $FLAGS; stty 1>&2; cat $1 ) <$DEV >$DEV

   This shows using stty to set the flags, then to print the current
settings, and then using cat a file to the output.  If you attach a
dumb terminal to the serial port, you can even use this script to
ensure that input from the device is echoed to the output with the
correct speed, parity, etc.

   Experience has shown that serially connected printers are the least
reliable and lowest speed.  Where possible, it is stongly recommended
that they be attached to a `network print box' which will provide a
Socket API interace and handle the low level network to serial port
protocol conversions.


File: LPRng-HOWTO.info,  Node: Installing the Software,  Next: Printcap Database,  Prev: Attaching Your Printer,  Up: Top

Installing the Software
***********************

   The basic components of the LPRng system are the executables and the
database files.  This section deals with generating and installing the
executable files.

* Menu:

* Files and Setup::
* Source Code and Support Programs::
* Configuration and Installation::
* Configuration Options and Problems with Compilation::
* Advanced Configuration Options::
* Printcap and lpd-conf files::
* Security Permissions and CHECKPC::
* Stopping Existing Spooler Software::
* Initial System Testing::
* Startup Scripts::
* Replacing UNIX SystemV lp lpstat Printing Services::


File: LPRng-HOWTO.info,  Node: Files and Setup,  Next: Source Code and Support Programs,  Up: Installing the Software

Files and Setup
===============

   The LPRng package consists of:
   *  "lpd" - the LPD print server program

   * "lpr", "lpq", "lprm", and "lpc" - client programs for printing,
     status queries, job removal, and server configuration respectively.

   * "/etc/printcap" print queue database file.

   * "/etc/lpd.conf" program configuration options.

   It is recommended that the LPRng client programs be installed in
`/usr/local/bin' and the `lpd' server in `/usr/local/sbin'.  Many UNIX
systems install them in widely varied locations such as `/usr/lib',
`/usr/bin', `/usr/libexec', `/usr/ucb', `/opt', `/usr/sbin', and
`/usr/etc/'.  For details, please see the *Note System Specific Notes::
.

   The ` *Note Printcap Database:: ' file contains the printer database
information.  Information in this file can override the `/etc/lpd.conf'
and default configuration information.  The ` *Note /etc/lpd-conf
Configuration File:: ' file contains configuration information for the
server and client programs.  The compiled in defaults should be
suitable for most small user installations.


File: LPRng-HOWTO.info,  Node: Source Code and Support Programs,  Next: Configuration and Installation,  Prev: Files and Setup,  Up: Installing the Software

Source Code and Support Programs
================================

  1. Obtain the latest version of the LPRng source code from a *Note
     FTP Sites:: .

  2. Obtain the GNU Zip (compression) program from one of the many GNU
     Software Mirror Sites and install it.  See the directions in the
     GNU Zip distribution for details.

  3. Obtain the GNU Make program from one of the many GNU Software
     Mirror Sites.  and install it.  See the directions in the GNU Zip
     distribution for details.  This program will be referred to as
     `gmake' in the installation instructions.

  4. Obtain an ANSI C compiler.  The GCC compiler (from the GNU
     Software Mirror Sites) is strongly recommended.

  5. Solaris Sparc and X86 Binaries for GCC and Make  can be obtained
     from http://smc.vnet.net/.


File: LPRng-HOWTO.info,  Node: Configuration and Installation,  Next: Configuration Options and Problems with Compilation,  Prev: Source Code and Support Programs,  Up: Installing the Software

Configuration and Installation
==============================

   In the following discussion, the LPRng distribution will have the
name `LPRng-[lt    ]version[gt    ].tgz'.

   Unpack,  configure, compile, and install, and initialize the
distribution using:
     gunzip -c LPRng-<version>.tgz | tar xvf -
     cd LPRng-<version>
     # see discussion below for configuration options
     ./configure
     gmake clean all
     su   # you must do the following commands as root
     gmake install
     # if  you have not installed LPRng before,
     # install default lpd.perms and lpd.conf file in /etc
     if [ ! -f /etc/lpd.perms ]; then
         make default;
     fi;
     # update permissions,  create files needed for LPRng, check
     # /etc/printcap file for problems.  Do as root:
     ./src/checkpc -f


File: LPRng-HOWTO.info,  Node: Configuration Options and Problems with Compilation,  Next: Advanced Configuration Options,  Prev: Configuration and Installation,  Up: Installing the Software

Configuration Options and Problems with Compilation
===================================================

   The `configure' script will determine the type of system and
establish a set of defaults for compilation and installation.  The
`LPRng/INSTALL' file contains detailed descriptions of the various
configuration options and capabilities.

   If you have problems compiling the package, you can try these things:
  1. Compiler complains about missing files or has a large number of
     errors.
     Try `gcc' instead of your vendor's C compiler.  This can be done
     either by setting the `CC' environment variable or using the
     `-with-cc' configure option.
          CC=gcc ./configure
             OR
          configure --with-cc=gcc

  2. Missing libraries or include files.
     Usually this is caused when include files are in
     `/usr/local/include' and libraries are in `/usr/local/include' and
     these paths are not searched or used by the compiler.  This can be
     fixed by setting the `CPPFLAGS' and `LDFLAGS' environment
     variables, or using the `-with-cppopts=' and `-with-ldopts='
     configure options.
          CPPFLAGS="-I/usr/local/include -I/usr/include/kerberosIV" \
            LDFLAGS="-L/usr/local/lib -L/usr/lib/kerberosIV" \
            ./configure
             OR
          configure --with-cppopts="-I/usr/local/include -I/usr/include/kerberosIV" \
            --with-ldopts="-L/usr/local/lib -L/usr/lib/kerberosIV"

  3. The default installation locations are not the desired ones.
     See the detailed discussions in the INSTALL file, especially the
     section dealing with the `-with-lpddir', `-exec-prefix=',
     `-bindir=', `-sbindir=', and other basic `configure' options.

   The `configure' and `make' steps must be run on the target host,
especially if the target host has a different version of the operating
system.  This is extremely important for SunOS or Solaris, where there
tend to be changes in the system's include files between versions as
well as support libraries.

   Also read the notes for your OS in section *Note System Specific
Notes::

   for specific installation help (if any).


File: LPRng-HOWTO.info,  Node: Advanced Configuration Options,  Next: Printcap and lpd-conf files,  Prev: Configuration Options and Problems with Compilation,  Up: Installing the Software

Advanced Configuration Options
==============================

   While the default LPRng configuration will be suitable for most
individual users, administrators of large sites or which need to support
`lightweight print clients' will need to use the following configure
options.
  1. `-disable-force[lowbar]localhost'
     The default LPRng configuration assumes that all printing will be
     done via a `lpd' print spooler running on the local host system.
     However, many larger sites prefer that all users do their printing
     via a few central servers, and do not run `lpd' servers on user
     systems.  The `-disable-force[lowbar]localhost' configuration will
     simply this type of operation by eliminating the need for a
     `/etc/lpd.conf' file to override the `force[lowbar]localhost'
     option.  Example:
          ./configure --disable-force_localhost

  2. `-disable-lpd[lowbar]bounce' The default LPRng configuration
     assumes that each `lpd' server will process and modify print jobs
     as they are forwarded from server to server.  While this is
     usually the desired operation on small sites or on individual
     systems, this is usually not the desired operation on sites
     running central servers, as will requires distributing filter
     software to all the user workstations.  Example:
          ./configure --disable-lpd_bounce


File: LPRng-HOWTO.info,  Node: Printcap and lpd-conf files,  Next: Security Permissions and CHECKPC,  Prev: Advanced Configuration Options,  Up: Installing the Software

Printcap and lpd-conf files
===========================

   The `/etc/printcap' file contains the definitions of print queues
and other information used by LPRng.  If your system does not have an
`/etc/printcap' file, then the following is suitable for initial
testing and configuration:
     # test printcap file
     lp:cm=Test Printcap Entry:
      :lp=/dev/null
      :sd=/usr/spool/lpd/lp

   The `/etc/ifhp.conf' file contains settings that override the
defaults provided at compile time.  You will find a prototype or
template `ifhp.conf' file in the LPRng distribution.  You can install
this by using:
     astart > cd LPRng
     astart > su
     ASTART # make init
                or
     ASTART # cp /etc/ifhp.conf /etc
     ASTART # chmod 644 /etc/ifhp.conf


File: LPRng-HOWTO.info,  Node: Security Permissions and CHECKPC,  Next: Stopping Existing Spooler Software,  Prev: Printcap and lpd-conf files,  Up: Installing the Software

Security Permissions and CHECKPC
================================

   By default, the `lpd' server is run as a ROOT (user 0) process.
(This is true not only for LPRng,  but also for all other system
processes which are started at boot time.) However, normally LPRng will
do operations as a non-privileged user and group which is defined by
the value of the `user' (default `daemon') and `group' (default
`daemon') option in the `/etc/lpd.conf' configuration file or the
compile time defaults in the `LPRng/src/vars.c' file.

   The following steps must be taken in order to preserve system
security:
  1. Create a user and group `daemon' on the system.  This user does
     not need login privileges, but will need a home directory if
     secure authentication such as Kerberos or PGP will be done.

  2. The `/etc/lpd.conf' file should be owned by root (user 0), and
     should have read-only (0444) permissions.

  3. The `/etc/printcap' file should be owned by root (user 0), and
     should have read-only (0444) permissions.

  4. The spool and working directories used by LPRng should be owned by
     user `daemon',  group `daemon', and have 0700 permissions
     (accessible only by user `daemon').

* Menu:

* Using CHECKPC::
* Advanced Security Concerns::


File: LPRng-HOWTO.info,  Node: Using CHECKPC,  Next: Advanced Security Concerns,  Up: Security Permissions and CHECKPC

Using CHECKPC
-------------

   The `checkpc' program is used to make sure that the spool
directories and files used by LPRng have the correct permissions and
are in place.  By default, `checkpc' will check permissions and report
if there are any problems.  You should run this as `root'.  For example:
     % astart > su
     #>cd LPRng/src
     #>./checkpc
     Warning - No configuration file found in '/etc/lpd.conf:/usr/etc/lpd.conf'
     Warning - No lpd only printcap file found in '/etc/lpd_printcap,/usr/etc/lpd_printcap'
     Warning -  ** cannot open '/var/run/lpd.printer' - 'Permission denied'
     Warning -  bad directory - /var/spool/lpd/lp
     Warning -   Printer_DYN 'lp' spool dir '/var/spool/lpd/lp' needs fixing

   In the above example, `checkpc' has discovered that the
`/etc/lpd.conf' file is missing.  This is not a serious problem if the
system defaults are to be used, but you might want to put the default
`LPRng/lpd.conf' file from the distribution in place.

   The `lpd only printcap' message is usually of concern to
administrators who wish to use some of LPRng's more exotic
configuration options.  It is possible to have separarte printcap
databases for client and server programs.  This is useful when printcap
files get extremely large and cuts down substantially on system
management problems.

   The permission denied message for `/var/run/lpd.printer' is more
serious, as the `lpd' server uses this as a lock file.

   The `bad directory' message about the spool directory is usually
caused by bad permissions or when the directory is missing.

   The `checkpc -f' option causes `checkpc' to take action to rectify
errors.  You can see what is happening if you run it with the `-V'
(vervose) option:
     % astart > su
     #>cd LPRng/src
     # ./checkpc -f -V
     LPRng version LPRng-3.6.1
      DaemonUID 1, DaemonGID 12
     Using Config file '/etc/lpd.conf:/usr/etc/lpd.conf'
     Checking for configuration files '/etc/lpd.conf:/usr/etc/lpd.conf'
     Warning - No configuration file found in '/etc/lpd.conf:/usr/etc/lpd.conf'
     Checking for printcap files '/etc/printcap,/usr/etc/printcap'
       found '/etc/printcap', mod 0100644
     Checking for lpd only printcap files
          '/etc/lpd_printcap,/usr/etc/lpd_printcap'
     Warning - No lpd only printcap file found in
          '/etc/lpd_printcap,/usr/etc/lpd_printcap'
     LPD lockfile '/var/run/lpd.printer'
       checking '/var/run/lpd.printer' file
     Names
      :lp=lp
     All
      :lp
     Printcap Information
     lp
      :force_localhost
      :lp=lw4@astart4.astart.com
      :sd=/var/spool/lpd/lp
     Checking printcap info
     Checking printer 'lp'
      Checking directory: '/var/spool/lpd/lp'
       file 'control.lp', size 0 K, unchanged in 2 hours
       file 'status.lp', size 0 K, unchanged in 2 hours
       file 'status', size 0 K, unchanged in 2 hours
       file 'log', size 0 K, unchanged in 2 hours
       checking 'control.lp' file
       checking 'status.lp' file
       checking 'status' file
       cleaning 'status' file, 0 bytes long: no truncation
       checking 'log' file
       cleaning 'log' file, 0 bytes long: no truncation
     
     # ./checkpc
     Warning - No configuration file found in '/etc/lpd.conf:/usr/etc/lpd.conf'
     Warning - No lpd only printcap file found in '/etc/lpd_printcap,/usr/etc/lpd_printcap'

   As you can see, `checkpc' can not only print detailed information
about your printing system,  but it also fixes up the various problems.


File: LPRng-HOWTO.info,  Node: Advanced Security Concerns,  Prev: Using CHECKPC,  Up: Security Permissions and CHECKPC

Advanced Security Concerns
--------------------------

   While `checkpc' will set permissions, there is always the problem
with undetected errors in the LPRng software that, when exploited,
could cause severe system problems.  The most serious concern is that
of gaining root (user 0) permissions.

   One way to avoid this is to run `client' programs without root
permission.  This is the default operation for LPRng, in contrast to
other print spooling software.

   A remaining problem is the fact that on most UNIX platforms, `lpd'
requires root permissions to open port 515.  One option is to have the
`lpd' server drop root permissions soon after binding to this port and
before accepting any user commands.  However, in order to be compatible
with RFC1179, `lpd' must originate connections from a `reserved' port
in the range 721-731, although in practice port 1-1023 seems to be
acceptible.

   If interoperability with existing print spoolers is not desired,
then it is `trivial' to configure LPRng using the `lpd.conf' file or by
modifying the compile time `lpd[lowbar]port' value in the file or the
`LPRng/src/vars.c' so that all the software will run as client programs.
For example, in the `/etc/lpd.conf' file, you only need to change the
indicated lines:
     # Purpose: lpd port
     #   default lpd_port=printer
     lpd_port=2000

   Now all the LPRng software will use port 2000 to transfer jobs and
commands.  You can also use this facility to establish a `private' set
of print spoolers which can be used for testing.


File: LPRng-HOWTO.info,  Node: Stopping Existing Spooler Software,  Next: Initial System Testing,  Prev: Security Permissions and CHECKPC,  Up: Installing the Software

Stopping Existing Spooler Software
==================================

   The next step is to shut down and remove the existing print spooler,
and test the functionality of the LPRng `lpd' programs.  Unfortunately,
this process is fairly system dependent, and requires a small amount of
system expertise.  In addition to these general directions, you should
see the *Note System Specific Notes::  for your system.

* Menu:

* SunOS and BSD Derived::
* Solaris HP AIX and SysVR4 Derived Systems::


File: LPRng-HOWTO.info,  Node: SunOS and BSD Derived,  Next: Solaris HP AIX and SysVR4 Derived Systems,  Up: Stopping Existing Spooler Software

SunOS and BSD Derived
---------------------

   This section provides instructions for  systems that use the `lpd'
print services, such as SunOS, BSD derived systems, and Linux based
systems.  These systems use an `lpd' print server, as does LPRng.

   We first kill the currently running `lpd' process.  While there may
be a system shutdown script in the `/etc/rc.d/' directory or other
location for this, do not bother using it.
     # most BSD Systems
     ps -auxw |grep lpd
     # Kill it twice
     kill (pid of lpd server)
     #  This should report an error - if not then lpd did not terminate
     kill (pid of lpd server)
     #
     
     Example:
     astart % ps -axuw |grep lpd
     papowell 23932  0.0  0.3  224  184  p3  S+  10:40AM  0:00.01 grep lpd
     daemon  17763  0.0  0.2  448  120  ??  IWs  29Mar99  0:01.35 (lpd)
     astart % kill 135
     astart % kill 135
     135: No such process

   Next, you should remove or rename the existing print system
executables.  The following example shows how to use the `find' utility
to track down candidates.
     astart# find /usr -type f -name lp\*  -print >/tmp/candidates
     astart# find /sbin -type f -name lp\*  -print >>/tmp/candidates
     astart# cat /tmp/candidates
     /usr/bin/lpunlock
     /usr/bin/lpqall.faces
     /usr/bin/lpq             <---- old
     /usr/bin/lpr             <---- old
     /usr/bin/lprm            <---- old
     /usr/bin/lptest
     /usr/doc/samba-1.9.18p10/examples/printer-accounting/lp-acct
     /usr/man/man1/lpq.1
     /usr/man/man1/lpr.1
     /usr/man/man1/lprm.1
     /usr/man/man1/lptest.1
     /usr/man/man4/lp.4
     /usr/man/man8/lpc.8
     /usr/man/man8/lpd.8
     /usr/sbin/lpc            <--- old
     /usr/sbin/lpd            <--- old
     /usr/sbin/lpf            <--- old
     /usr/local/bin/lpc    <-- LPRng
     /usr/local/bin/lpq    <-- LPRng
     /usr/local/bin/lpr    <-- LPRng
     /usr/local/bin/lprm   <-- LPRng
     /usr/local/sbin/lpd   <-- LPRng
     astart # mv /usr/bin/lpq  /usr/bin/lpq.old
     astart # mv /usr/bin/lpr  /usr/bin/lpr.old
     astart # mv /usr/bin/lprm /usr/bin/lprm.old
     astart # mv /usr/sbin/lpc /usr/sbin/lpc.old
     astart # mv /usr/sbin/lpd /usr/sbin/lpd.old
     astart # mv /usr/sbin/lpf /usr/sbin/lpf.old
     ...


File: LPRng-HOWTO.info,  Node: Solaris HP AIX and SysVR4 Derived Systems,  Prev: SunOS and BSD Derived,  Up: Stopping Existing Spooler Software

Solaris HP AIX and SysVR4 Derived Systems
-----------------------------------------

   The original SysVR4 and other related systems did not have any
support for RFC1179 network printing (Berkeley LPD).  Support for this
was added by various manufacture specific methods.  Unfortunately,
there are a wide range of possibilities.

   The `lpsched' process (`/usr/lib/lp/lpsched/') process performs many
of the functions of the LPRng and BSD `lpd' server.  On Solaris systems,
it also stats the `lpNet' server that provides network print services.
Unfortunately, no `simple' and reliable method of shutting down a
running `lpsched' process and the associated network services has been
found.  However, it turns out to be very simple to `prevent' the
services from being started.

   First, you will need to locate the `/etc/rc' startup files that
start system services.  During system startup, a set of shell scripts
stored in the `/etc/rc.d' diretories are executed.  The individual
startupfile files are usually links to a common one in the
`/etc/init.d' directory.  You first need to find the files containing
the startup commands.  This is done as shown below:
     SUN # cd /
     SUN # grep -l lpsched /etc/rc* /etc/rc*/* init.d/* init.d/*/* >/tmp/files
     SUN # cat /tmp/files
     /etc/rc0.d/K20lp
     /etc/rc2.d/K20lp
     /etc/rc2.d/S80lp
     /etc/init.d/lp
     ># ls -l ` cat /tmp/files `
     lrwxrwxr-x 1 root bin 1 Dec 29 23:39 /etc/rc0.d/K20lp -> ../../init.d/lp
     lrwxrwxr-x 1 root bin 1 Dec 29 23:39 /etc/rc2.d/K20lp -> ../../init.d/lp
     lrwxrwxr-x 1 root bin 1 Dec 29 23:39 /etc/rc2.d/S80lp -> ../../init.d/lp
     -rwxr--r-- 5 root sys 460 Sep 1 1998 /etc/rcS.d/K39lp

   Here is the contents of the typical script file,  with the indicated
modifications that should be made for testing
     #!/sbin/sh
     
     #### ADD THE FOLLOWING LINE TO EXIT EARLY
     exit 0
     #### THE REST IS THE USUAL SCRIPT
     case "$1" in
     'start')
         [ -f /usr/lib/lpsched ] && /usr/lib/lpsched ;;
     'stop' )
         [ -f /usr/lib/lpshut ] && /usr/lib/lpshut ;;
     *)
         echo "Usage: $0 [lcub  ] start | stop [rcub  ]"
         exit 1
     esac
     exit 0

   Next, as for the BSD installation, we will find all of the printing
related commands and rename them.  You can either rename them one by
one, or use the script method shown below.  The minimum of the
indicated files should be renamed.
     SUN # find /usr -type f -name lp\* -print >/etc/printingfiles
     SUN # cat /tmp/printingfiles
     /usr/bin/lp          <---
     /usr/bin/lpstat      <---
     /usr/lib/lp/bin/lp.cat
     /usr/lib/lp/bin/lp.set
     /usr/lib/lp/bin/lp.tell
     /usr/lib/lp/lpNet    <---
     /usr/lib/lp/lpsched  <---
     /usr/lib/lp/lpdata   <---
     /usr/sbin/lpadmin    <---
     /usr/sbin/lpfilter   <---
     /usr/sbin/lpforms    <---
     /usr/sbin/lpmove     <---
     /usr/sbin/lpshut     <---
     /usr/sbin/lpsystem   <---
     /usr/sbin/lpusers    <---
     /usr/ucb/lpc         <---
     /usr/ucb/lpq         <---
     /usr/ucb/lpr         <---
     /usr/ucb/lprm        <---
     /usr/ucb/lptest
     SUN # for i in ` cat /tmp/printingfiles ` ; do
     >  mv $i $i.old
     >  done

   Next, you find if there is a `cron' job scheduled by the file
`/var/spool/cron/crontabs/lp' to periodically update and roll over
error logs.  If there is, you should (after having saved the file)
remove it.
     cp /var/spool/cron/crontabs/lp /etc/cron.crontabs.lp

   Check the `/etc/inetd.conf' file for a line like:
     printer stream tcp nowait root /usr/lib/print/in.lpd in.lpd

   Comment out this line.  This line is not present on all systems.

   Now we must `reboot'  the machine.  You can use `reboot' if you are
in a rush, and `shutdown' if you are not.
     SUN # reboot
     or
     SUN # shutdown -y "Whooga! Whooga! Dive! Dive! System going down."

   When the system reboots, check to make sure that the `lpd' server is
not listening on port 515.
     SUN # telnet localhost 515
     Trying 127.0.0.1...
     telnet: Unable to connect to remote host: Connection refused

   If you do get a connection established then you must use `nlsadmin'
to force the `tcpip listener' to release the port, as illustrated below.
     SUN # nlsadmin -v tcp
     lpd  \x00020203000000000000000000000000  ENABLED  \
       NORPC  root  NOMODULES  /var/spool/lp/fifos/listenBSD  #
     0  \x00020ACE000000000000000000000000  ENABLED    \
       NORPC  root  NOMODULES  /usr/lib/saf/nlps_server  #
     lp  NOADDR  ENABLED  NORPC  root  NOMODULES \
       /var/spool/lp/fifos/listenS5  #
     SUN # nlsadmin -r lpd tcp
     SUN # nlsadmin -r lp tcp


File: LPRng-HOWTO.info,  Node: Initial System Testing,  Next: Startup Scripts,  Prev: Stopping Existing Spooler Software,  Up: Installing the Software

Initial System Testing
======================

   We will now run the `lpd' executable in the `foreground' and `test'
mode, and make sure that our system configuration is correct.  It is
best to do this with two screens or windows, as you will want to
observe the output.
     # > /usr/local/bin/lpd -F
     Fatal error - Another print spooler is using TCP printer port
     # > /usr/local/bin/lpd -F -D1
     ...
     1999-04-05-10:02:37.755 astart10 [28903] lpd  Read_file_and_split: \
       cannot open file '/etc/lpd.perms' - No such file or directory
     1999-04-05-10:02:37.758 astart10 [28903] lpd  Read_file_and_split: \
       cannot open file '/usr/etc/lpd.perms' - No such file or directory
     1999-04-05-10:02:37.759 astart10 [28903] lpd  Build_printcap_info: \
       list->count 0, raw->count 3
     1999-04-05-10:02:37.777 astart10 [28903] lpd  lpd: listening socket fd -6
     Fatal error - Another print spooler is using TCP printer port
     1999-04-05-10:02:37.782 astart10 [28903] lpd  Get_max_fd: getrlimit returns 64
     1999-04-05-10:02:37.783 astart10 [28903] lpd  Get_max_fd: returning 64
     1999-04-05-10:02:37.786 astart10 [28903] lpd  cleanup: done, doing killpg \
        then exit(0)

   If you get the above error message, then you have either not killed
off other the running `lpd' server or you are not starting the `lpd'
server as ROOT.  This is the most common error during setup.  Correct
the problem and then restart the server if neccessary.  You should see
the output indicated below:
     # > /usr/local/bin/lpd -F -D1
     1999-04-05-14:35:14.023 astart27 [2667] Waiting  lpd: LOOP START
     1999-04-05-14:35:14.024 astart27 [2667] Waiting  Get_max_servers: getrlimit returns 256
     1999-04-05-14:35:14.024 astart27 [2667] Waiting  Get_max_servers: returning 128
     1999-04-05-14:35:14.025 astart27 [2667] Waiting  lpd: max_servers 128, active 0
     1999-04-05-14:35:14.025 astart27 [2667] Waiting  lpd: starting select timeout 'yes', 600 sec

   Now from another window do the following commands:
     # > lpq -Plp@localhost
     Printer: lp@astart
      Queue: no printable jobs in queue
     # > lpq
     Printer: lp@astart
      Queue: no printable jobs in queue

   At this point your LPRng software has been installed and tested.
You still need to set up `Startup Scripts' to automatically start it at
boot time, and `/etc/printcap' entries for your printers.


File: LPRng-HOWTO.info,  Node: Startup Scripts,  Next: Replacing UNIX SystemV lp lpstat Printing Services,  Prev: Initial System Testing,  Up: Installing the Software

Startup Scripts
===============

   The purpose of startup scripts is to automatically start the `lpd'
print server at boot time.  Again, the location and contents of these
depend strongly on the version of the Operating System, and system
vendor.

* Menu:

* SunOS and BSD Derived::
* Solaris Linux and SysVR4::


File: LPRng-HOWTO.info,  Node: SunOS and BSD Derived,  Next: Solaris Linux and SysVR4,  Up: Startup Scripts

SunOS and BSD Derived
---------------------

   In most of these systems the startup script for `lpd' is already
present in the `/etc/rc' files and only has to be modified.  It can be
found by using:
     ASTART # grep -l lp /etc/rc* /etc/rc*/* /etc/rc*/*/*
     /etc/rc
     ASTART # more /etc/rc
     ...
     if [ -f /etc/printcap ]; then
         echo -n ' printer';     /usr/sbin/lpd
     fi

   Modify this file so that path is to the LPRng `lpd' file.


File: LPRng-HOWTO.info,  Node: Solaris Linux and SysVR4,  Prev: SunOS and BSD Derived,  Up: Startup Scripts

Solaris Linux and SysVR4
------------------------

   These systems have individual startup files for each printing
service.  We need to update the startup files to reference the LPRng
executables.
     SUN # grep -l lp /etc/rc* /etc/rc*/* init.d/* init.d/*/* >/tmp/files
     SUN # cat /tmp/files
     /etc/rc0.d/K20lp
     /etc/rc2.d/K20lp
     /etc/rc2.d/S80lp
     /etc/init.d/lp
     ># ls -l ` cat /tmp/files `
     lrwxrwxr-x  1 root  bin  1 Dec 29 23:39 /etc/rc0.d/K20lp -> ../../init.d/lp
     lrwxrwxr-x  1 root  bin  1 Dec 29 23:39 /etc/rc2.d/K20lp -> ../../init.d/lp
     lrwxrwxr-x  1 root  bin  1 Dec 29 23:39 /etc/rc2.d/S80lp -> ../../init.d/lp
     -rwxr--r--  5 root  sys  460 Sep 1 1998 /etc/rcS.d/K39lp

   Modify the startup files so that they use the LPRng `lpd' executable:
     #!/sbin/sh
     case "$1" in
     'start')
             [ -f /usr/local/bin/lpd ] && /usr/local/bin/lpd
             ;;
     'stop')
         echo "Shutting down lpd: \c"
         kill -2 `cat /var/run/lpd*` >/dev/null 2>1;
             ;;
     
     *)
             echo "Usage: $0 [lcub  ] start | stop [rcub  ]"
             exit 1
     esac
     exit 0


File: LPRng-HOWTO.info,  Node: Replacing UNIX SystemV lp lpstat Printing Services,  Prev: Startup Scripts,  Up: Installing the Software

Replacing UNIX SystemV lp lpstat Printing Services
==================================================

   Many UNIX utilities in the Solaris and HP UNIX environment use the
UNIX System V `lp' and `lpstat' programs.  It is almost impossible to
modify the programs themselves, as many are `vintage' software that is
unsupported or which would be too costly to update.

   In order to support these applications, LPRng provides simulation
for the `lp', `lpstat', and `clean' commands.

   The LPRng `lpstat' command is a modified version of the `lpq'
command, and accepts the `lpstat' command line options and tries to
return status in an `lpstat' format.

   If the `lpr' program is invoked with the name `lp', it will simulate
the `lp'options.  Finally, if the `lprm' program is invoked with the
name `cancel', it will simulate the `lp'options.  This can be done by
using symbolic links or copying the programs.

   Note that many of the `vintage' applications have fully qualified
paths to the `lp' and `lpstat' executables, so it will be nessary to
copy them to the original program locations.
     # original - /usr/bin/lp
     # original - /usr/bin/lpstat
     cd /usr/local/bin
     cp lpr /usr/bin/lp
     cp lpstat /usr/bin/lpstat
     cp lprm /usr/bin/cancel

   See the man pages for lp, lpstat, and cancel in the LPRng/man
directory.  Not all the functions of the original programs are
supported and these man pages should be installed to replace the
original lp, etc, man pages.


File: LPRng-HOWTO.info,  Node: Printcap Database,  Next: Index To All The Options,  Prev: Installing the Software,  Up: Top

Printcap Database
*****************

   As described in the *Note Print Spooling Overview:: , the heart of
the LPRng system is information in the `/etc/printcap' file.  The
printcap information specifies:
  1. The print queues available to users.

  2. How client programs communicate with the `lpc' print server.

  3. The configuration, location, and other information for each print
     queue on the print server.

  4. How the `lpd' server processes jobs in each print queue.

   In order to explain a complex subject, we will start with a set of
simple printer configurations, and explain the purpose and effect of
each entry in the printcap.

   For details about individual printcap options, see the `printcap(5)'
man page from the LPRng distribution, or use the *Note Index To All The
Options::  to find a specific printcap option and its effects.

* Menu:

* Client To Server Connection Information::
* Server Always On Localhost::
* Simple Client Printcap Entry::
* Simple Server Printcap Example::
* Mixed Server and Client Printcap::
* A serial printer queue::
* A remote printer queue::
* Spooling To Local Server::
* Shared printcap files::
* Master Printcap Files::
* Printcap options for lpr lpq lprm and lpc::
* Bounce queues::
* LPR Filtering::
* Dynamic Routing::
* Support for Network Print Servers::
* Printer load balancing::
* The Missing Details::
* Management Strategy for Large Sites::
* Using Programs To Get Printcap Information::
* The Record Queue Name qq and force[lowbar]queuename flags::
* Using the check[lowbar]for[lowbar]nonprintable Flag::
* The fd Forwarding Off Option::
* The rg Restrict Use to Group Members Option::
* The fx Allowed Formats Option::
* Fixing Bad Control Files and Metacharacters::
* Maximum Copies::
* The minfree Minimum Spool Queue Space Option::
* Debugging::
* LPD Specific::
* Legacy Compatibility::
* Compatibility with BSD printcap::


File: LPRng-HOWTO.info,  Node: Client To Server Connection Information,  Next: Server Always On Localhost,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Client To Server Connection Information
=======================================

   Options used:
   *  `PRINTER'`[nbsp  ][nbsp  ]Environment variable '

   *  `force[lowbar]localhost'`[nbsp  ][nbsp  ]force clients to send
     requests to localhost '

   When an LPRng client such as `lpr', `lpq', `lprm', or `lprc' needs
to communicate with a print server, the only information they normally
need is:
  1. The spool queue or `remote printer' to be used in requests to the
     `lpd' print server.  This is sometimes referred to as the
     `printer' or `print queue' name.

  2. The IP address or hostname of the `print server' or `remote
     server'.  This is sometimes called the `remote host' or simply
     `server'.

  3. Options that control `how' jobs or commands are transferred to the
     server host.  These options might include encryption and client
     side job filtering.  We will discuss these capabilities later.

   LPRng has several ways to specify the `printer queue' and `server'
information.

* Menu:

* Command Line -Pprinter:
* Command Line -Pprinter::
* PRINTER Environment Variable::
* Default Printer From Printcap::
* Default Printer When No Printcap::


File: LPRng-HOWTO.info,  Node: Command Line -Pprinter,  Next: Command Line -Pprinter,  Up: Client To Server Connection Information

Command Line -Pprinter
----------------------

   The `-P printer@host' option specifies both the print queue and
server.
     lpr -Plaser@10.0.0.1
     lpq -Plp@myserver

   When used as a command line option, the printcap database will not
be consulted for other options or information.  This allows LPRng
clients to function without a printcap database, and without a `lpd'
print server running on their local host.  However, options set in the
`/etc/lpd.conf/' and the compile time defaults will still be used.


File: LPRng-HOWTO.info,  Node: Command Line -Pprinter,  Next: PRINTER Environment Variable,  Prev: Command Line -Pprinter,  Up: Client To Server Connection Information

Command Line -Pprinter
----------------------

   This form will cause the LPRng clients to look in the `/etc/printcap'
for a printcap entry with the name or alias `printer' and use the
information in that printcap entry.  We will discuss the format of the
printcap entry in a moment.  Example:
     lpr -Plp


File: LPRng-HOWTO.info,  Node: PRINTER Environment Variable,  Next: Default Printer From Printcap,  Prev: Command Line -Pprinter,  Up: Client To Server Connection Information

PRINTER Environment Variable
----------------------------

   If no command line option is specified, the LPRng clients will check
for a `PRINTER' environment variable value and will use it as though
specified as a `-P$PRINTER' command line option.

   If the $PRINTER value has the form `printer@host' the print queue
will be `printer' on server `host'.  and not consult the printcap
database If the $PRINTER value has the form `printer' then the printcap
will be searched for a `printer' printcap entry.  For example:
     export PRINTER=laser@10.0.0.1; lpr
     export PRINTER=pr; lpr


File: LPRng-HOWTO.info,  Node: Default Printer From Printcap,  Next: Default Printer When No Printcap,  Prev: PRINTER Environment Variable,  Up: Client To Server Connection Information

Default Printer From Printcap
-----------------------------

   If you do not specify a printer on the command line or in the
`PRINTER' environment variable, then LPRng will search the printcap and
use the first valid printcap entry as the printer.


File: LPRng-HOWTO.info,  Node: Default Printer When No Printcap,  Prev: Default Printer From Printcap,  Up: Client To Server Connection Information

Default Printer When No Printcap
--------------------------------

   If you do not have a `/etc/printcap' file, then LPRng will use the
`default[lowbar]printer' and `default[lowbar]remote[lowbar]host'
`fallback' values set in the `/etc/lpd.conf' file or by the compile
time defaults.

   Using the fallback values is usually not a desirable event and may
indicate that you have a misconfigured host, so the fallback values are
usually set by administrators to `missingprinter@localhost' to provoke
an annonying message for users.


File: LPRng-HOWTO.info,  Node: Server Always On Localhost,  Next: Simple Client Printcap Entry,  Prev: Client To Server Connection Information,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Server Always On Localhost
==========================

   Users who are setting up workstations for personal use or who want
an extremely simple configuration will run the `lpd' server on their
localhost.

   The LPRng default installation will configure the LPRng clients such
as `lpr' `lpq' `lprm' and `lpc' to always use the `localhost' (IP
address 127.0.0.1) server unless explicitly overridden by the command
line `-Pprinter@host' option.

   This is done by setting the `force[lowbar]localhost' configuration
parameter `TRUE' or to 1 in compile time defaults.

   For larger sites or organizations which want to use a central print
server to handle multiple printers or printer sharing, running a server
on each workstation may not be desirable.  In this case the system
administrator should see the *Note ::

   discussion for ways to change this.


File: LPRng-HOWTO.info,  Node: Simple Client Printcap Entry,  Next: Simple Server Printcap Example,  Prev: Server Always On Localhost,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Simple Client Printcap Entry
============================

   Options used:
   *  `rm='`remote host (machine)'

   *  `rp='`remote printer'

   *  `lp='`destination printer information'

   *  `client'`printer'

   This section discusses how to set up printcap information for use by
clients to connect to a server.  I'll use this simple example to
explain the basics of the LPRng printcap format and introduce some of
the LPRng connection options.  Here is a simple printcap file that
could be used by clients to get the `remote printer' and `server'
information.
     # printer lp1
     lp1|printer1
       :rm=localhost
     # printer lp2 with continuation
     lp2:\
       :lp=pr@10.0.0.1:client
     # printcap lp3, to printer pr, with overrides
     lp3:rp=pr:rm=hpprinter.astart.com
       :force_localhost@
     # Simplest possible printcap entry - defaults for everything
     lp4:

   Lines starting with a `[num   ]' sign are comments, and all leading
and trailing `whitespace', i.e. - spaces, tabs, etc, are ignored.
Empty lines are ignored as well.

   A printcap entry starts with the printcap entry `name', followed by
one or more `aliases', followed by one or more options.  In the above
example we have three printcap entries: `lp1' with an alias `printer1'
and `lp2', `lp3', and `lp4' with no aliases.

   Aliases start with the `[verbar]' character and options with the `:'
character; tabs and spaces before and after the `[verbar]' or `:'
characters and at the start and end of lines are ignored.  You can use
backslash (tt/\/) at the end of a line to create a multi-line value for
an option.  The backslash will cause the next line to be appended to the
current line; watch out for comments and ends of printcap entries if
you use this facility.  As you can see from the example, there is no
`Name' printcap entry - this is part of the `cm' option on the previous
line.

   If an option value contains a colon, then use the C (or Perl or
Tck/Tk) string escape `\072' to represent the value.

   Options take the form of a keyword/value pair, i.e.- :option=value
:option#value :option :option@ Option names are case insensitive.  For
example `Ts' and `ts' refer to the same options.  A string or integer
value is specified by `option=value' or `option[num   ]value'.  (The
use of the legacy `option[num   ]value' form is `NOT' recommended as
some preprocessors and database systems will treat it as a start of
comment, leading to endless problems for sysadmins who wonder why their
printcap has been mysteriously truncated.)

   Boolean options are set TRUE (1) if no value follows the keyword and
FALSE (0) by appending a `@'.  For example `sh' will set the `sh' flag
to TRUE and `sh@' to FALSE.

   If you want to set a string option to a `empty' or `null' value, you
need to use `option='; if you specify `option' then you will get a
warning about an inconsistent option setting.

   There may be several options on the same line, separated by colons.
However, this does make the file less readable. The next tip was
supplied by James H. Young [lt    ]`jhy@gsu.edu'[gt    ]:

     My personal preference for readability is to always put each
     option on its own line.  Putting each option on its own line is
     worth the trouble even though it detracts from the usability of
     certain grepping techniques when trying to maintain these types of
     files.

   Now let's examine the first printcap entry in detail.  It is
reproduced here for convenience:
     # printer lp1
     lp1|printer1
       :rm=localhost

   We start with a comment, followed by the printcap entry name and its
alias.  The `rm' (remote machine or host) option value is the name of
the `lpd' remote or server host.  In this example the remote host is
`localhost' or the machine that the client is running on, and assumes
that the `lpd' server is running on the localhost.

   The `printer1' alias allows us to have multiple names for a single
printcap entry.  As will be discussed later, this can be useful in
advanced printcap and print queue setups.  By default, the remote
printer name is the name of the printcap.  Thus, we would communicate
with printer `lp1@localhost'.

   Now let's look at the next printcap entry:
     # printer lp2 with continuation
     lp2:\
       :lp=pr@10.0.0.1:client

   The `lp2' printcap entry illustrates the use (and abuse) of the `\'
continuation.  If you think about this, we have really defined a
printcap entry of the form:
     lp2: :lp=pr@10.0.0.1:client

   Luckily, LPRng ignores empty options like `:[nbsp  ]:'.  While it is
strongly recommended that `\' not be used, it may be necessary to be
compatible with other system utilities.

   The `lp=pr@10.0.0.1' option is an alternate way to specify a remote
queue and server, and is similar to the command line.  If the
`force[lowbar]localhost' option is still in effect, then the LPRng
clients will ignore the explit address, and still connect to
`pr@localhost'.  (There is further discussion about this in the next
section.)

   The `client' option is a way to explicitly label that this printcap
information is for a client, and not to be used by the LPD server.
When you are constructing more complex printcaps, this option is very
useful to keep various parts of the printcap information consistent.
     lp3:rp=pr:rm=hpprinter.astart.com
       :force_localhost@
     # Simplest possible printcap entry - defaults for everything
     lp4:

   The `rp='  (remote printer) allow you to specify the name of the
remote print queue.  This will be used instead of the printcap name
when connecting to the print server.

   The `force[lowbar]localhost@' option is an example of a `flag'
option.  The `@' sets the option value to 0 (false).  In this example,
we are setting `force[lowbar]localhost' to false, which now allows the
LPRng clients to connect directly to the specified remote printer.  In
this example, the `hpprinter.astart.com' is actually a HP LaserJet
Printer with a JetDirect interface, and supports the RFC1179 protocol.
We can send jobs directly to the printer without spooling them, if we
wish.

   One side effect of sending a job directly to a printers is that
`lpr' program will not terminate or exit until all of the files have
been transferred to the printer, and this may take a long time, as the
printer usually processes the files as they are received.  However,
this can be extremely effective in testing whether a printer is
available or working without needing to use the `lpd' server.

   If LPRng client programs must connect to a remote server, then the
`force[lowbar]localhost@' must be put in each printcap entry.  This can
be avoided by putting it into the global `/etc/lpd.conf' configuration
file; see the section on the *Note /etc/lpd-conf Configuration File::
file for details.  You can also disable `force[lowbar]localhost' at
configuration and compilation time using the *Note Advanced
Configuration Options::

   configure option.

   Now let's look at the last printcap entry:
     # Simplest possible printcap entry - defaults for everything
     lp4:

   The last example is the simplest possible printcap entry.  This will
cause LPRng clients to use the default values for everything.  The
printer will be `lp4', i.e. - the name of the printcap, and the server
will be `localhost' if `force[lowbar]localhost' is set, or the value of
the `default[lowbar]remote[lowbar]host' configuration option if it is
not.


File: LPRng-HOWTO.info,  Node: Simple Server Printcap Example,  Next: Mixed Server and Client Printcap,  Prev: Simple Client Printcap Entry,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Simple Server Printcap Example
==============================

   Options used:
   *  `cm='`comment for status'

   *  `if='`default job file filter '

   *  `lf='`log file '

   *  `mx[num   ]'`maximum job size'

   *  `lp='`output device'

   *  `sd='`spool directory file '

   *  `sh'`[nbsp  ][nbsp  ]suppress headers (banners) '

   *  `sf'`[nbsp  ][nbsp  ]suppress form feeds between files'

   The previous sections covered printcap entries for use by clients.
Now we will discuss printcap entries for use by the `lpd' server.  As
will be discussed later, in simple configurations or when we have the
`force[lowbar]localhost' option enabled, we can use the same printcap
for both LPRng clients and the `lpd' server.

     # Local ASCII printer
     lp1|printer
       :server
       :cm=Dumb printer
       :lp=/dev/lp1
       :sd=/var/spool/lpd/lp1
       :lf=log:af=acct
       :if=/usr/local/sbin/lpf
       :mx#0:sh:sf

   Let's go over the options used in this example.  We will assume that
this entry is being used by the `lpd' server.

  1. The printcap entry name is `lp1'.  This information will be
     displayed when requesting status information using the `lpq'
     program.

  2. The `printer' alias

  3.  First of all, there's the `lp' option. It specifies the
     destination file or location to which data is sent.  Here, it is
     the device `/dev/lp1'.  The pathname indicates the destination is
     a local printer device or file on the host.  By default, IO
     devices are openned `write-only'.  Many parallel ports cannot be
     opened for writing.

  4. The `server' flag specifies that this printcap entry is for the
     `lpd' server, and information in the printcap entry will be
     ignored by clients.

  5. The `cm' field supplies a information field for `lpq' (printer
     status) output.

  6. `sd' specifies the spool directory where print job files are
     stored until they are printed.

  7.  The `lf' and `af' options specify the names for the log and
     accounting files, respectively.  These have the default values
     `log' and `acct' respectively, and if not an absolute pathname are
     created relative to the spool queue directory.  A log file is
     highly recommended.  If these files don't exist, they will not be
     created, and no logging or accounting will be done. You will need
     to create them manually (e.g., by using `touch') or by using the `
     *Note LPRng's little helper: checkpc:: ' program.

  8. The if entry specifies a filter program to be used for jobs with
     the `f' or default job format format.  Filters and print formats
     are discussed in section *Note Filters:: .  The `lpf' filter will
     simply translate `LF' (line feed) to `CR/LF' (carriage return/line
     feed) sequences, eliminating `staircase' output.

  9. `mx' indicates the maximum file size for a print job.  Specifying
     0 means that there is no limit.

 10. The `sh' (suppress headers) flag will suppress printing banner
     pages.

 11. The `sf' (suppress form feeds) flag will suppress form feeds
     between the files of a multi-file print job.


File: LPRng-HOWTO.info,  Node: Mixed Server and Client Printcap,  Next: A serial printer queue,  Prev: Simple Server Printcap Example,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Mixed Server and Client Printcap
================================

   You can combine both client and server printcap information in a
single file.  Here is an example:
     # seen by both client and server
     lp1:lp=lp@pr1:mx#100
     lp1:sd=mx#0
     # seen only by client
     lp2:lp=lp@pr2:client
     # seen only by server
     lp2:lp=/dev/lp:server

   The first printcap entry, `lp1', the information is seen by both
client and server.  The next printcap entry,  with the same name `lp1',
will be combined with the second one.  The order of options is
important - the entries are scanned in order and an option will have
the last value set.  Note that the `mx' option is not used by the LPRng
clients, and so has no effect.

   The next two printcaps are explicitly specified for server or client.
This is recommended when complex printcaps on multiple hosts and servers
are used.


File: LPRng-HOWTO.info,  Node: A serial printer queue,  Next: A remote printer queue,  Prev: Mixed Server and Client Printcap,  Up: Replacing UNIX SystemV lp lpstat Printing Services

A serial printer queue
======================

   Options used:
   *  `rw'`[nbsp  ][nbsp  ]device opened RW flag'

   *  `br[num   ]'`serial port bit rate'

   *  `stty='`stty options for serial port configuration'

   The following is a typical printcap for a serial printer:
     # Local Serial ASCII printer
     lp2
       :lp=/dev/ttya
       :rw
       :cm=Serial printer
       :sd=/var/spool/lpd/lp2
       :stty=9600 -echo -crmod -raw -oddp -evenp pass8 cbreak ixon
       :if=/usr/local/sbin/lpf
       :mx#0:sh

   Let's examine the new options:
  1. A serial port is usually `bidirectional', and printers will report
     errors back to the host computer.  The `rw' flag will cause the
     printer port to be openned `read-write', and the `lpd' server will
     report status information.

  2. The `sy' option specifies the `stty(1)' flags and line speed
     needed to configure the serial line (See *Note Serial Printers::

     for details).

  3. The legacy `br' (bit rate) option can be used to specify the line
     speed as well.


File: LPRng-HOWTO.info,  Node: A remote printer queue,  Next: Spooling To Local Server,  Prev: A serial printer queue,  Up: Replacing UNIX SystemV lp lpstat Printing Services

A remote printer queue
======================

   Options used:
   *  `lp='`destination'

   *  `rm='`remote host (machine)'

   *  `rp='`remote printer (machine)'

   You can have the `lpd' server forward jobs to another server or
print which supports the RFC1179 procol by using the following printcap:
     # Simplest
     remote|Remote Printer
        :lp=raw@server
     # historical
     remote:
       rp=raw:rm=server
     # Sometimes you have to connect to a non-standard port
     special:lp=lp@server%2000


File: LPRng-HOWTO.info,  Node: Spooling To Local Server,  Next: Shared printcap files,  Prev: A remote printer queue,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Spooling To Local Server
========================

   Options used:
   *  `force[lowbar]localhost'`[nbsp  ][nbsp  ]force clients to send
     requests to localhost '

   Some users may not want to send a print job directly to a remote
printer.  The printer may need the more powerful management functions
of a print spooler to handle problems such as paper feed errors,
multiple users, etc, or needs to run special *Note Filters::

   to process the print job.  In this case,  they want the print job
sent to a `lpd' server on the local host, which in turn will spool the
job and send it to the remote printer.  This can be done in several
ways.
     # Method 1: force client transfer to localhost
     #    have server send to real printer
     #    both client and server will see the following information
     remote|Spool to localhost
        :lp=lp@localhost
     # Note that only the server will see the following information
     lp:server:lp=lp@remote:sd=/usr/spool/lp
     # Method 2: force client transfer to localhost
     #    both client and server will see the following information
     remote|Spool to localhost
        :force_localhost
        :lp=lp@remote:sd=/usr/spool/lp
     # Method 3: force a bounce queue with no effect
     remote|Spool to localhost
        :lp=lp@localhost
        :bq=lp@remote:sd=/usr/spool/lp

   In the first method, we have the clients send jobs to the lp printer
on the localhost; localhost is the 'canonical' network name for the
host on which the program is running.  The lpd server on the localhost
will get the print job, store it in the spool directory `/usr/spool/lp'
and then forward the job to the lp printer on the remote host.  The
`server' tag indicates that a printcap entry is to be used only by the
`lpd' daemon (server) process, and the information is ignored by the
client.  The `server' tag is discussed in detail in the *Note Shared
printcap files::  section.

   One of the problems is finding the name of the local host.  On some
implementations which are not using a Domain Name Server, it is
necessary to specify the local host name by using the `localhost'
configuration variable.

   The second method is slightly different.  The
`force[lowbar]localhost' flag has meaning only for the client
application programs, and forces them to send the job to the localhost.
The server will then send the job to the remote host.

   The third method is useful when you want the print job to be modified
`en passant' as it passes through the spool queue.  See the *Note
Filters::

   discussion for details.


File: LPRng-HOWTO.info,  Node: Shared printcap files,  Next: Master Printcap Files,  Prev: Spooling To Local Server,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Shared printcap files
=====================

   When both the client host and server host are the same machine, then
the same /etc/printcap file will be used by both the lpr and lpd daemon
programs.  When LPRng programs read the /etc/printcap file,  they
accumulate information in the printcap file on individual printer
entries.  For example, the following printcap entries would result in
the indicated information:
     #/etc/printcap file
     pr:lp=pr@host
     pr:lp=/dev/lp:sh
     #resulting printcap information:
     pr:lp=/dev/lp:sh

   This allows us to split up the printcap information into different
blocks, and has been used to manage complex printcap entries on large
sites with many printers.

   We can use the `server' tag to specify that specific printcap
information is only for use by the lpd daemon.  For example:
     #/etc/printcap file
     pr:lp=pr@host
     pr:server:lp=/dev/lp:sh
     #resulting printcap information for client
     pr:lp=pr@host
     #resulting printcap information for lpd daemon
     pr:lp=/dev/lp:sh

   Many administrators at large sites will split up their printcap files
so that the information needed to tell clients where the servers are
for a printer is located at the start of the /etc/printcap file, and
the actual information needed by the lpd daemon is at the end.  Here is
a sample:
     #/etc/printcap file
     pr1:lp=pr1@serverhost
     pr2:lp=pr2@serverhost
     pr1:server:lp=/dev/lp:tc=.common
     pr2:server:lp=/dev/lp:tc=.common
     .common:sd=/usr/local/lpd/%P
       :cm=Dumb printer %P
       :lf=log:af=acct
       :if=/usr/local/sbin/lpf
       :mx#0:sh

   This printcap entry also shows the use of the `tc' option, which
corresponds to the C Compiler Preprocessor (cpp) `[num   ]include'
directive.  Printcap entries starting with periods, underscores
(`[lowbar]'), or `@' signs are treated as dummy printcap information
and can only be referenced by the `tc'.

   When the printcap information is read, the LPRng code will
substitute the cannonical printer name for any `[percnt]P' tokens that
it finds in the printcap.  After processing the information in the
printcap entry, the clients and `lpd' daemon will see the following:
     # clients
     pr1:lp=pr1@serverhost
     pr2:lp=pr2@serverhost
     # server
     pr1:lp=/dev/lp
       :sd=/usr/local/lpd/pr1
       :cm=Dumb printer pr1
       :lf=log:af=acct
       :if=/usr/local/sbin/lpf
       :mx#0:sh
     pr2:server:lp=/dev/lp:
       :sd=/usr/local/lpd/pr2
       :cm=Dumb printer pr2
       :lf=log:af=acct
       :if=/usr/local/sbin/lpf
       :mx#0:sh


File: LPRng-HOWTO.info,  Node: Master Printcap Files,  Next: Printcap options for lpr lpq lprm and lpc,  Prev: Shared printcap files,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Master Printcap Files
=====================

   One of the major problems faced by administrators of large sites is
how to distribute printcap information.  They would like to have a
single printcap file either distributed by a file server (NFS) or by
some other method such as rdist.

   By using the `server' tag, information for the lpd daemons can be
separated out from the information needed by the lpr print client.  The
`oh=pattern' specifies that this information is only to be used by a
specified host.  For example:
     #/etc/printcap file
     pr1:lp=pr1@serverhost1:oh=*.eng.site.com,130.191.12.0/24
     pr2:lp=pr1@serverhost1:oh=*.eng.site.com,130.191.12.0/24
     pr1:lp=pr2@serverhost2:oh=*.admin.site.com
     pr2:lp=pr2@serverhost2:oh=*.admin.site.com
     pr1:server:oh=serverhost1.eng.com:lp=/dev/lp:tc=.common
     pr2:server:oh=serverhost2.admin.com:lp=/dev/lp:tc=.common
     .common:sd=/usr/local/lpd/%P

   The above example is a total abuse of the use of `oh' tag, but has
some interesting effects.  The `pattern' is used as a `glob' pattern
and is applied to the fully qualified domain name (FQDN) of the host
reading the printcap file.  For example, `*.eng.site.com' would match
host `h1.eng.site.com' but would not match `h1.admin.site.com'.  Thus,
the effects of the first couple of entries would be to specify that the
`pr1' and `pr2' printers on the `eng' hosts would be `pr1@serverhost1',
and on the `admin' hosts would be `pr2@serverhost2',

   Also, the lpd daemons on `serverhost1' and `serverhost2' would only
extract the additional information for `pr1' and `pr2' respectively.

   You can also specify network addresses and subnet masks as well.  In
this case, if the host matches the network address then it will use the
information.


File: LPRng-HOWTO.info,  Node: Printcap options for lpr lpq lprm and lpc,  Next: Bounce queues,  Prev: Master Printcap Files,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Printcap options for lpr lpq lprm and lpc
=========================================

   These programs are used by users to connect to the `lpd' server and
send print jobs or a request.  For details about the way that this is
done, see *Note RFC 1179 - Line Printer Daemon Protocol::  for details.

   The following options and configuration variables are used by the
various programs to control how they will generate jobs and send them
to the server.

* Menu:

* lp rm and rp::


File: LPRng-HOWTO.info,  Node: lp rm and rp,  Up: Printcap options for lpr lpq lprm and lpc

lp rm and rp
------------

   The `rm' (remote machine or host) and `rp' or `lp' printer printcap
options are used to specify the remote host and printer to be used.
These values can be extracted from a printcap entry, or supplied in the
following manner.
  1. If the user program is invoked with `-Pxxx' argument, then the
     `lp' option is assigned the value `xxx'.

  2. If no explicit value is specified and the PRINTER environment
     variable has value `xxx', then the `lp' option is assigned value
     `xxx'.

  3. If `lp' has a value of the form `rp@rm' or `rp@rm[percnt]port',
     then the `rp', `rm', and `lpd[lowbar]port' options are assigned
     the indicated values.

  4. If `rm' or `rp' does not have a value, then they are assigned the
     `default[lowbar]host' (usually localhost) and
     `default[lowbar]printer' (usually lp) option values.

  5. A connection is made to `lpd[lowbar]port' on host `rm' and the
     file transfer or command is sent as specified in *Note RFC 1179 -
     Line Printer Daemon Protocol:: .

   See the *Note Opening the Output Device::

   section for additional details.


File: LPRng-HOWTO.info,  Node: Bounce queues,  Next: LPR Filtering,  Prev: Printcap options for lpr lpq lprm and lpc,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Bounce queues
=============

   Options used:
   *  `lpd[lowbar]bounce='`lpd does filtering and then forwards'

   *  `bq='`destination for processed job'

   *  `bq[lowbar]format='`format of processed job'

   Normally, when using a remote queue, the print job is transmitted to
the server computer without any modifications.  There are circumstances
when modifications must be made to a job before forwarding, such as the
desire to convert a job to the format acceptable by the remote printer
or to add banner pages.

   LPRng supports this capability by specifing that a print queue is
actually a `bounce queue' rather than a simple forwarding queue.  The
term `bounce queue' came from the notion that jobs will `bounce' through
this print queue, getting processed by the specified filters, and the
filter output will then be forwarded.

   LPRng will perform all of the usually job processing steps, such as
banner generation, filtering files, etc, saving the output text in a
file.  This file is then sent to the destination print queue for further
processing.

   Again, you will modify the client printcap entry.  In the next
example, `bouncehost' is the name of the host which will do the
processing, and `remote' is the target host with the printer.

     # Simple example of a bounce queue
     bounce:lp=bounce@bouncehost
     bounce:server
         :bq=lp@remote
         :sd=/usr/spool/lpd/bounce
         :if=/usr/local/bin/lpf
         :vf=/usr/local/bin/lpf
         :bq_format=l
         # uncomment ab if you want banner
         #ab
     # Even Simpler example of a bounce queue
     bounce:lp=bounce@bouncehost
     bounce:server
         :lpd_bounce
         :lp=lp@remote
         :sd=/usr/spool/lpd/bounce
         :if=/usr/local/bin/lpf
         :vf=/usr/local/bin/lpf
         :bq_format=l
         # uncomment ab if you want banner
         #ab

   Some comments:

  1. For clients, `lp=bounce@bouncehost' entry specifies the queue and
     hostname where the filtering will be done.  This information is
     used by the lpr program to determine where to send the print job.

  2. If the `lpd[lowbar]bounce' option is used, the filtered output is
     then transmitted to the queue and hostname specified by the `lp'
     option (or the `rm' and `rp' options).  This is the preferred
     method.

  3. If the `bq' option is used, the filtered output is then
     transmitted to the queue and hostname specified by the `bq' option.
     It is recommended that this option not be used.

  4. We need a spool directory (`sd') on the lpd server host to hold
     the files and temporary output while they are processed.

  5. Next, we need to indicate the filters to be used for different
     printer formats.  `Oops, I still didn't tell you anything about
     filters. Just a moment, it's on its way. See section *Note
     Filters:: .'

  6. The print job will be processed by the filters, banner pages
     generated, etc., and the entire output will be sent to the
     destination as a single file.

  7. The `bq[lowbar]format' specifies the format for the output file.
     If not specified, it default to `l' (literal or binary).

  8. You do not need to use a bounce queue and all of the associated
     filters to simply change the format names.  The simple
     `translate[lowbar]format=vlxf' option will rename format `x' files
     to `f' and there is no filter for format `x'.  See *Note Changing
     Filter Formats::

     for more details.

  9. The `ab' (always print a banner) flag will force a banner to be
     added to the job.  The banner generation is done as discussed in
     *Note Printing Banner At Beginning:: .

   In this example, anything sent to the printer called `bounce' (on
this host) will be filtered on the client host. After that, it will be
transmitted to the queue `lp' on the server called `remote'.


File: LPRng-HOWTO.info,  Node: LPR Filtering,  Next: Dynamic Routing,  Prev: Bounce queues,  Up: Replacing UNIX SystemV lp lpstat Printing Services

LPR Filtering
=============

   Options used:
   *  `lpr[lowbar]bounce'`[nbsp  ][nbsp  ]lpr does filtering'

   Some users would like to have all of the advantages of having the
filtering and processing capabilities of a lpd daemon without needing
to deal with actually running a lpd daemon on their system.  By having
the `lpr' program process the job by passing it through the various
filters and then send the output of the filters as the print job you can
get the desired effect.
     # Simple example of an lpr_bounce entry
     bounce
       :lpr_bounce
       :lp=lp@remote
       :if=/usr/local/bin/lpf

   The `lpr[lowbar]bounce' flag, if present in the printcap entry, will
force ` lpr ' to process the job using the specified filters and send
the outputs of the filters to the remote printer for further processing.

   In order to do filtering,  it may need to create some temporary files
and run some programs.  By default,  the temporary files are created in
the `/tmp' directory and the programs are run as user.  Since no spool
directory is used, the `sd' information is not needed.


File: LPRng-HOWTO.info,  Node: Dynamic Routing,  Next: Support for Network Print Servers,  Prev: LPR Filtering,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Dynamic Routing
===============

   Options used:
   *  `destinations='`destinations for jobs'

   *  `router='`router program'

   The LPD bounce queue functionality has been extended to allow a job
to not only be passed through filters before sending to a remote
destination,  but also to reroute the job to one or more destinations
in a dynamic manner.  This is accomplished by having a `router' filter
return a set of destinations.  Here is a sample printcap to accomplish
this:
     t2|Test Printer 2:sd=/var/spool/LPD/t2
         :lf=log
         :lp=t2@printserver
         :bq=t1@localhost
         :destinations=t1@localhost,t2@localhost
         :router=/usr/local/LPD/router

   The lp entry is used to force all jobs to be sent to the bounce queue
on host 'printserver'.  Once they arrive,  the 'router' filter is
invoked with the standard filter options which include the user, host,
and other information obtained from the control file.  STDIN is
connected to a temporary copy of the control file, and the CONTROL
environment variable is set to the value of the actual control file
itself.

   The routing filter exit status is used as follows:
   * 0  (JSUCC) - normal processing

   * 37 (JHOLD) - job is held

   * any other value - job is deleted from queue

   The router filter returns one or more routing entries with the
following format.  Note that entry order is not important, but each
entry must end with the 'end' tag.
     dest (destination queue)
     copies (number of copies to be made)
     priority (priority letter)
     X(controlfile modifications)
     end

   Example of router output:
     dest t1@localhost
     copies 2
     CA
     priority B
     end
     dest t2@localhost
     CZ
     priority Z
     end

   The above routing information will have copies of the job sent to
the t1 and t2 spool queue servers.  If no valid routing information is
returned by the router filter the job will be sent to the default
bounce queue destination.

   LPQ will display job information in a slightly different format for
multiple destination jobs.  For example:
     Printer: t2@astart2 'Test Printer 2' (routed/bounce queue to 't1@astart2.astart.com')
       Queue: 1 printable jobs in queue
      Rank  Owner/ID        Class Job Files                           Size Time
     active  papowell@astart2+707 A 707  /tmp/hi                         3 10:04:49
      - actv papowell@astart2+707.1 A 707 ->t1@localhost <cpy 1/2>       3 10:04:49
      -      papowell@astart2+707.2 A 707 ->t2@localhost                 3 10:04:49

   The routing information is displayed below the main job information.
Each destination will have its transfer status displayed as it is
transferred.  By convention,  the job identifier of the routed jobs
will have a suffix of the form .N added;  copies will have CN added as
well.  For example, papowell@astart2+707.1C2 will be the job sent to
the first destination, copy two.

   Routed jobs can be held, removed, etc., just as normal jobs.  In
addition, the individual destination jobs can be manipulated as well.
The LPC functionality has been extended to recognize destination jobids
as well as the main job id for control and/or selection operations.

   The optional `destinations' entry specifies the possible set of
destinations that the job can be sent to, and is for informational
purposes only.  In order for LPQ/LPRM to find the job once it has
passed through LPD, LPQ/LPRM uses the list of printers in the
`destinations', and loop over all the names in the list looking for the
"job" that you are interested in.  If there is no `destinations'
information, the `bq' information will be usued.

   One of the more interesting use of the router filter is to actually
modify the control file before it is put into the spool queue.  The
routing filter has STDIN attached to the control file READ/WRITE,
allowing the following interesting bit of Perl code to be used:
      # you need to get PERL to do a 'dup' call on FD 0
      open(CF, '+[lt    ]0');
      # read the control file
      @cf_lines = [lt    ]CF>;
      # TRUNCATE the control file
      truncate(CF,0);
      # mess about with the control file
      foreach $line (@cf_lines) [lcub  ]
         # or whatever you want
         print CF $line;
      [rcub  ]

   This will read the control file, truncate it, and then write it out
again.


File: LPRng-HOWTO.info,  Node: Support for Network Print Servers,  Next: Printer load balancing,  Prev: Dynamic Routing,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Support for Network Print Servers
=================================

   This section was supplied by Horst Fickenscher [lt
]`horst.fickenscher@it.erlm.siemens.de'[gt    ] and updated by Patrick
Powell [lt    ]`papowell@astart.com'[gt    ].

   A "network print server" is usually a box (external model) or card
in a printer (internal model) which has a network connection to a TCP
network and software to implement a LPD print server.  If it is an
external model, The parallel or serial port of the printer is connected
to the box, and the print server may support multiple printers.  If it
is an internal model, the server is usually nothing more than a Network
Interface Controller and a ROM containing software that the
microprocessor in the printer uses.

   The print server may support multiple printing protocols, such as
*Note What is RFC 1179 the Line Printer Daemon Protocol?::

   (TCP/IP printing using the LPD print protocol), Novell Printer
Protocols, SMB print protocols, and Appletalk protocols.  One of the
observed problems with Network Print servers is that while they can
usually support one protocol and one user at a time quite well, when
you try to use multiple protocols and/or multiple users try to transfer
print jobs to the printer,  the printer may behave in a very odd manner.
Usually this results in a printer failing to finish a job currently
being printed, and unable to accept new jobs.

   Several of the newer models of print servers have Simple Network
Management Protocol (SNMP) agents built into them, and can provide
detailed information about their internal functions.  By using a SNMP
manager such as SunNetmanage or HP-Openview, you can monitor your
network printers activities.

   Although it's possible to connect to network printers as if they were
remote printers, Patrick Powell advises differently:

     I recommend that you use only a single protocol to send jobs to
     the printer.  If you can,  I also recommend that you use a print
     spooler and have only a single host system send a job to the
     printer.

     My best advice on connecting to network printers is not to use the
     the built-in LPD server, but to use the direct TCP/IP connection
     to the print engine.  Usually this is done to particular TCP/IP
     port on the printer.  For the HP JetDirect and other HP products,
     this is usually[nbsp  ]9100.

     Once you have the direct connection, you can now use various
     filters to preprocess the print job, insert PJL and PCL commands,
     or convert text to PostScript or PCL for better print quality.


   Here is a sample printcap for an HP LaserJet 4 or above, attached
via an HP JetDirect print server.  It uses the ifhp filter:
          # printcap file for pr4
          # PostScript via JetDirect card, IP address pr4, port 9100.
          # Note: some PC's LPR packages use the v format for their jobs
          #
          pr4|network
              :rw:sh:lp=pr4%9100:sd=/usr/spool/lpd/pr4
              :af=acct: :lf=log: :ps=status
              # only allow the following formats
              :fx=flpv
              #filters
              :if=/usr/local/lib/ifhp
              :of=/usr/local/lib/ofhp
              :vf=/usr/local/lib/ifhp -c

   The `lp=pr4[percnt]9100' means that LPRng is to make a TCP/IP
connection to host `pr4' on its port[nbsp  ]9100.  The `ifhp' filter
referenced in `if', `of', and `vf', send PJL (and PCL) commands along
with the print files to the printer.  The `ifhp' filter is available
from the LPRng distribution sites.

   Filters are discussed in section *Note Filters:: .

   According to Richard S.[nbsp  ]Shuford [lt    ]`s4r@ornl.gov'[gt
], some DEC printers (e.g., the DEClaser[nbsp  ]3500) use TCP port[nbsp
]10001.


File: LPRng-HOWTO.info,  Node: Printer load balancing,  Next: The Missing Details,  Prev: Support for Network Print Servers,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Printer load balancing
======================

   In a large site, you could have several equivalent printers, which
will be used by many people. The reason for this is, of course, to
increase the printer output by enabling several jobs to be printed at
once.

   LPRng supplies mechanisms to define a `virtual' printer for such a
set of real printers. If properly set up, print jobs will be distributed
evenly over all printers.

   I'll give two examples for this situation.

* Menu:

* Multi-server print queue::
* Checking Busy Status of Server Queues::
* Using a router filter::


File: LPRng-HOWTO.info,  Node: Multi-server print queue,  Next: Checking Busy Status of Server Queues,  Up: Printer load balancing

Multi-server print queue
------------------------

   Options used:
   *  `ss='`queue served by printer '

   *  `sv='`printers where jobs are sent (servers)'

   A multi-server print queue is one that feeds jobs to other queues.
The main queue `sv=q1,q2,...' printcap entry specifies the names of the
printers that will be sent jobs.  These printers must have their spool
queues on this LPD server.

   Servers that are fed jobs have a `ss='`mainqueue' printcap entry.
This informs the `lpd' server that the queue operates under the control
of the `mainqueue' print queue, and is fed jobs from it.

   During normal operation, when the `lpd' server has a job to print in
the `mainqueue', it will check to see if there is an idle `service'
queue.  If there is, it will transfer the job to the service queue
spooling directory and start the service queue printing activities.

   Users can send jobs directly to the individual printers serving a
queue.

   The next example (and the comments underneath) was supplied by John
Perkins [lt    ]`john@cs.wisc.edu'[gt    ] (slightly edited).

   Here's how I've set up a bounce queue that feeds 6 LaserWriters:

     laser|pi|Room 1359 LaserWriters
         :lp=laser@server.com
     laser|pi|Room 1359 LaserWriters
         :server
         :lf=/usr/adm/laser-log
         :sv=laser1,laser2,laser3,laser4,laser5,laser6
         :sd=/usr/spool/laser
     @commonlaser
         :sd=/usr/spool/%P
         :rw:mx#0:sh
         :lf=/usr/adm/laser1-log
         :if=/s/lprng/lib/filters/cappsif
         :of=/s/lprng/depend/cap/bin/papof
         :ss=laser
         :fx=fdginpt
     laser1|pi1|Room 1359 LaserWriter #1
         :lp=laser1@server.com
     laser1|pi1|Room 1359 LaserWriter #1
         :server
         :lp=/dev/laser1
         :tc=@commonlaser
     laser2|pi2|Room 1359 LaserWriter #1
         :lp=laser2@server.com
     laser2|pi2|Room 1359 LaserWriter #2
         :server
         :lp=/dev/laser2
         :tc=@commonlaser

   and so on for the other 4 `laser'`N' queues.

   This will forward a job from `laser' to `laser'`N', once one of
those queues is available. It will hold jobs in the "`laser"' queue
until one of the other queues is empty.

   Even though the queues are not meant for direct use, people can
print directly to individual queues.  This allows a specific load
sharing printer to be used.  If you wanted to `hide' the load sharing
printers, i.e. - not allow direct spooling to them, then you would
simply remove the non-server entries from the printcap.


File: LPRng-HOWTO.info,  Node: Checking Busy Status of Server Queues,  Next: Using a router filter,  Prev: Multi-server print queue,  Up: Printer load balancing

Checking Busy Status of Server Queues
-------------------------------------

   Options used:
   *  `check[lowbar]idle='`check for idle printer program '

   The previous section outlined how LPRng uses the `sv' and `ss' flags
to indicate that the server spool queue has multiple destination queues.
However, there is a problem when the actual printer being served by the
destination queue is a remote device, and can be busy or offline.

   The `check[lowbar]idle' option specifies a program that is invoked
by the `lpd' server to determine if the spool queue device is available.

   The program is invoked with the standard filter options, STDIN and
STDOUT connected to `/dev/null', and STDERR to the error log.

   The program should make a connection to the remote device or system
and should determine that the remote device is available for use, and
then exit with the following status.
     Key      Value   Meaning
     JSUCC    0       Successful - printer is idle
     JABORT   non-zero Printer is not accepting jobs

   If the printer is accepting jobs but is temporarily busy, the
program should poll the printer until it becomes free, only exiting
when it is available for use.  If the printer is not accepting jobs,
the program should exit with a non-zero exit code.

   The following is a sample printcap entry, showing how the
`check[lowbar]idle' facility can be used.
     pr:
       :lp=laserjet%9100
       :check_idle=/usr/local/filters/remote_check lp@laserjet
       :if=/usr/local/filters/ifhp

   The following perl program shows how to generate a query to the
remote printer by simulating an `lpq' query and checking for returned
status.
     #!/usr/local/bin/perl
     # Usage:
     #  remote_check printer@host[%port] [-options]
     #   -Tflag[,flags]*
     #  flag
     #    debug  - turns debugging on
     #    long   - use long status format
     #
     # query the remote printer whose name is passed on the command line
     #
     # Note that -Txxx options are passed AFTER the printer
     use English;
     use IO::Socket;
     
     my $JSUCC = 0;
     my $JABORT = 33;
     my $JNOSPOOL = 38;
     my $JNOPRINT = 39;
     
     my $debug = 0;
     my $optind;
     
     # pull out the options
     my($key,$value,$opt,$long,$opt_c);
     
     $printer = $ARGV[0];
     
     for( $i = 1; $i < @ARGV; ++$i )[lcub  ]
         $opt = $ARGV[$i];
         print STDERR "XX opt= $opt\n" if $debug;
         if( $opt eq '-c' )[lcub  ]
             $opt_c = 1;
         [rcub  ] elsif( ($key, $value) = ($opt =~ /^-(.)(.*)/) )[lcub  ]
             if( $value eq "" )[lcub  ]
                 $value = $ARGV[++$i];
             [rcub  ]
             $[lcub  ]"opt_$key"[rcub  ] = $value;
             print STDERR "XX opt_$key = " . $[lcub  ]"opt_$key"[rcub  ] . "\n" if $debug;
         [rcub  ] else [lcub  ]
             $optind = $i;
             last;
         [rcub  ]
         print STDERR "XX opt_P = $opt_P\n" if $debug;
     [rcub  ]
     
     $long = 0;  # short
     
     if( defined($opt_T) )[lcub  ]
         print STDERR "XX CHECK_REMOTE opt_T=$opt_T\n" if $debug;
         if( $opt_T =~ /debug/ )[lcub  ]
             $debug = 1;
         [rcub  ]
         if( $opt_T =~ /short/ )[lcub  ]
             $long = 1;
         [rcub  ]
         if( $opt_T =~ /long/ )[lcub  ]
             $long = 0;
         [rcub  ]
     [rcub  ]
     
     print STDERR "XX CHECK_REMOTE " . join(" ",@ARGV) . "\n" if $debug;
     
     if( !defined($printer) or $printer =~ /^-/ )[lcub  ]
         print STDERR "$0: no printer value\n";
         exit( $JABORT );
     [rcub  ]
     
     while( checkstatus( $printer, $long ) )[lcub  ]
         print STDERR "XX CHECK_REMOTE sleeping\n" if $debug;
         sleep(10);
     [rcub  ]
     
     exit $JSUCC;
     
     sub checkstatus [lcub  ]
         my ($printer,$long) = @_;
         my ($remote,$port);
         my ($count, $socket, $line);
     
         if( $long )[lcub  ]
             $long = 4;
         [rcub  ] else [lcub  ]
             $long = 3;
         [rcub  ]
         if( $printer =~ /@/ )[lcub  ]
             ($printer,$remote) = $printer =~ m/(.*)@(.*)/;
         [rcub  ]
         $remote="localhost" unless $remote;
     
         if( $remote =~ /%/ )[lcub  ]
             ($remote,$port) = $remote =~ m/(.*)%(.*)/;
         [rcub  ]
         $port = 515 unless $port;
         print STDERR "XX CHECK_REMOTE remote='$remote',"
             . " port='$port', pr='$printer', op='$long'\n" if $debug;
     
         $socket = getconnection( $remote, $port );
     
         $count = -1;
         # send the command
         printf $socket "%c%s\n", $long, $printer;
     
         while ( defined( $line = <$socket>) && $count < 0 )[lcub  ]
             chomp $line;
             print STDERR "XX CHECKREMOTE '$line'\n" if $debug;
             if( $line =~ /printing disa/ )[lcub  ]
                 print STDERR "XX CHECKREMOTE printing disable\n" if $debug;
                 exit $JNOPRINT;
             [rcub  ] elsif( $line =~ /spooling disa/ )[lcub  ]
                 print STDERR "XX CHECKREMOTE printing disable\n" if $debug;
                 exit $JNOSPOOL;
             [rcub  ] elsif( $line =~ /([0-9]*)\s+job.?$/ )[lcub  ]
                 $count = $1;
                 print STDERR "XX CHECKREMOTE $count jobs\n" if $debug;
             [rcub  ]
         [rcub  ]
         close $socket;
         if( $count < 0 )[lcub  ]
             print STDERR "CHECKREMOTE cannot decode status\n";
             exit $JABORT;
         [rcub  ]
         return $count;
     [rcub  ]
     
     sub getconnection [lcub  ]
         my ($remote,$port) = @_;
         my ($socket);
         print STDERR "XX CHECK_REMOTE remote='$remote', port=$port\n" if $debug;
         $socket = IO::Socket::INET->new(
             Proto => "tcp",
             PeerAddr => $remote,
             PeerPort => $port,
             );
         if( !$socket )[lcub  ]
             print STDERR "CHECK_REMOTE IO::Socket::INET failed - $!\n";
             exit $JABORT;
         [rcub  ]
         $socket->autoflush(1);
         $socket;
     [rcub  ]

   The example of the previous section can be modified now so that it
uses the `check[lowbar]idle' facility.  The master queue will send jobs
only to the server queue queues which report idle status.
     laser1|pi1|Room 1359 LaserWriter #1
         :server:check_idle=/usr/local/lib/filters/remote_check pr@laser1
         :lp=laser1%9100
         :tc=@commonlaser
     laser2|pi2|Room 1359 LaserWriter #2
         :server:check_idle=/usr/local/lib/filters/remote_check pr@laser1
         :lp=laser2%9100
         :tc=@commonlaser


File: LPRng-HOWTO.info,  Node: Using a router filter,  Prev: Checking Busy Status of Server Queues,  Up: Printer load balancing

Using a router filter
---------------------

   A router filter allows you to re-route jobs in a dynamic way. For
details, see ` *Note Dynamic Routing:: .'

   Lars Anderson [lt    ]`lsa@business.auc.dk'[gt    ] supplied this
example (slightly edited):

   This script will attempt to distribute print jobs evenly on 2
printers hpl5a and hpl5b when sending to hpl5bounce.

     hpl5bounce|for PLP/LPRng software - network based HP Jetdirect card:
             :lf=log.hpl5
             :lpr_bounce
             :lp=hpl5b@localhost
             :router=/usr/local/admscripts/bouncer.pl
     hpl5a|for PLP/LPRng software - network based HP Jetdirect card:
             :af=acc.hpl5a:
             :lp=hpl5a%9100:sd=/var/spool/lpd/hpl5a:
             :lf=log.hpl5a:
             :tc=@hplcommon
     hpl5b|for PLP/LPRng software - network based HP Jetdirect card:
             :af=acc.hpl5b:
             :lp=hpl5b%9100:sd=/var/spool/lpd/hpl5b:
             :lf=log.hpl5b:
             :tc=@hplcommon
     # Common settings
     @hplcommon:
             :rw:sh:ps=status:
             :fx=flp:
             :if=/usr/local/lib/filters/ifhp -Tbanner=on
             :of=/usr/local/lib/filters/ofhp -Tbanner=on

   The perl script `bouncer.pl' looks like this:

     #!/usr/bin/perl
     #
     # Script for printjob loadsharing
     #
     #                                 29/5-97 Lars Anderson
     #
     # Printqueues to check
     $printer1=[quot  ]hpl5a\@localhost[quot  ];
     $printer2=[quot  ]hpl5b\@localhost[quot  ];
     # obtain number of jobs in each printqueue
     $lpq1=`/usr/local/bin/lpq -s -P$printer1`;
     $lpq2=`/usr/local/bin/lpq -s -P$printer2`;
     $lpq1=~ (/(\d+) jobs?/); $numjobs1=$1;
     $lpq2=~ (/(\d+) jobs?/); $numjobs2=$1;
     if ($numjobs1 == 0) [lcub  ]
         print [quot  ]dest $printer1\nCA\nend\n[quot  ];
         exit;
     [rcub  ]
     if ($numjobs1 [gt    ] $numjobs2) [lcub  ]
         print [quot  ]dest $printer2\nCA\nend\n[quot  ];
         exit;
     [rcub  ]
     print [quot  ]dest $printer1\nCA\nend\n[quot  ];


File: LPRng-HOWTO.info,  Node: The Missing Details,  Next: Management Strategy for Large Sites,  Prev: Printer load balancing,  Up: Replacing UNIX SystemV lp lpstat Printing Services

The Missing Details
===================

   Options used:
   *  `printcap[lowbar]path='`printcap file locations'

   *  `lpd[lowbar]printcap[lowbar]path='`additional server printcap
     file locations'

   The LPRng software uses a greatly simplified set of printcap
conventions.  This section discusses the details of the printcap
database. LPRng can use vintage (i.e.- Berkeley LPR) format printcap
files; use the checkpc program to make sure they are totally compatible
with LPRng (see checkpc man page, README.install, LPRng-HOWTO).

   The client programs (LPR, LPRM, LPQ, LPC) do not need access to a
printcap database, but will use it if available. The -Pprinter@host
option or PRINTER environment variable specifies the printer and LPD
host; the LPD server does all of the various spool queue activities.
The client programs send requests and/or jobs to the LDP server which
carries out all activity.  If no printcap is available and the host is
not specified, a default host value is provided.

   If a printcap database is desired, then it is obtained as follows.
First, the `printcap[lowbar]path ' and `
lpd[lowbar]printcap[lowbar]path ' configuration information (see *Note
/etc/lpd-conf Configuration File:: ) specifies where client and server
programs find printcap information.  The client programs use
`printcap[lowbar]path'; `lpd' uses both `printcap[lowbar]path' and
`lpd[lowbar]printcap[lowbar]path'. All files are read and the printcap
entries are extracted in order from the files. Later printcap
information overrides previous information in the files.

   The common defaults for the printcap locations are:
     printcap_path          /etc/printcap:/usr/etc/printcap:\
                                 /var/spool/lpd/printcap.HOSTNAME
     lpd_printcap_path      /etc/lpd_printcap:/usr/etc/lpd_printcap

   The most common method of printcap information distribution is to
have a master printcap file shared or distributed to all system. This
usually has only the printer name and lpd host specified in the
printcap entries, as shown below.
         ----- /etc/printcap on clients and server -------
         #parallel attached DUMB printer
         pr1|dumb
             :lp=pr1@taco.astart.com
         # server information
         pr2|postscript
             :lp=pr2@taco.astart.com
         pr3|laserjet
             :lp=pr3@taco.astart.com
         @common|common code for printers
             :if=/bin/filter
             :of=/bin/filter
         @morecommon|show the configuration expansion
             :sd=/var/spool/lpd/%P
     
         realpr:tc=@common:tc=@morecommon

   A careful study of the above example will discover the following
features of the LPRng printcap structure.
  1. Lines ending with a \ indicate continuation to the next line.  In
     practice,  the \ is replaced with space(s) when line joining is
     done.

  2. Blank lines and lines whose first nonwhitespace character is a
     `[num   ]' are ignored, except if it follows a continuation line.
     (Which makes sense.)

  3. All leading and trailing whitespace on a line are removed.

  4. A printcap entry consists of a name, 0 or more aliases, and data
     entries.
     - name starts with an alphabetic character; dummy entries can
     start `[lowbar]', `@' or `.'
     - alias starts with a `[verbar]' followed by the alias
     - fields or data entry starts with `:' followed by the entry

  5. Field or data entry
     `name' - main or cannonical name for printcap entry
     `[verbar]'`name' - alias `name' for printcap entry
     `:'`key'   - set the `key' to ON  (1)
     `:'`key'`@'  - set the `key' to OFF (0)
     `:'`key'`[num   ]'`nnn' - set the `key' to `nnn', where `nnn'
     follows C language conventions
     `:'`key'`='`string' - set the `key' to the string value to end of
     line

  6. Printcap entries whose cannonical name starts with `[lowbar]', `@',
     or `.' (period) (eg.- `@'`name') are treated like dummy entries.
     They can be referenced with `:tc='`entry'`:', but will be ignored
     otherwise.

  7. The `tc=f1:tc=f2:...' acts similar to a file inclusion operator,
     but substitutes printcap entries.  The specified tc entries are
     logically append to the end of the current printcap entry, and the
     appended information will override the previous information.  Note
     that you can have multiple `:tc:' entries.

  8. `key'`='`value.'`[percnt]'`X'
     a selected set of `[percnt]'`X' values are expanded when the
     printcap entry is used by the client or server program.  The
     following values are expanded:
     P - printcap cannonical or main name
     H - Fully Qualified Domain Name for host
     h - short name for host
     R - Fully Qualified Domain Name for remote host host
     r - short name for remote host host

  9. The `oh' entry specifies that a particular printcap entry can only
     be used by a host with a matching host name or IP address.  See
     *Note Master Printcap Files::  for details.

 10. The `server' entry specifies that a particular printcap entry can
     only be used by the lpd server, and is ignored by other programs.
     See *Note Shared printcap files::  for details.

   Printcap information is extracted in order from the printcap files,
and later information for printcap entries overrides earlier ones.

   The `[percnt]'`X' substitution is especially useful when most of the
information for a set of printers is common or identical.  This can be
placed in a printcap entry and referenced with the `tc' operator.  As
shown in the example, by making the spool directory name depend on the
cannonical printcap name, it simplifies management of the printer.

* Menu:

* Spool (Control) Directory Printcap File::
* Separate Printcap Files for LPD::
* Printcap Entry all::
* More Example Printcap Entries::
* PC-NFS Print Spooler::


File: LPRng-HOWTO.info,  Node: Spool (Control) Directory Printcap File,  Next: Separate Printcap Files for LPD,  Up: The Missing Details

Spool (Control) Directory Printcap File
---------------------------------------

   You can put a printcap file in a spool queue directory. This file is
only consulted by the LPD server when performing operations on a spool
queue. It allows you to put information particular to a spool queue in
well controlled location.

   The `server' tag and `oh' options have rendered this facility
obsolete, and it may be removed in later releases.


File: LPRng-HOWTO.info,  Node: Separate Printcap Files for LPD,  Next: Printcap Entry all,  Prev: Spool (Control) Directory Printcap File,  Up: The Missing Details

Separate Printcap Files for LPD
-------------------------------

   Since only the LPD server uses the `/etc/lpd[lowbar]printcap' or
`/usr/etc/lpd[lowbar]printcap' file, you can place server specific
information there.  This allows you to have a common printcap file for
clients and an additional one for the lpd servers.  You may have to
modify the lpd.conf file `lpd[lowbar]printcap[lowbar]path' entry to
specify the desired file.

   The `server' and `oh' options have rendered this facility obsolete
and it may be removed in future releases of LPRng.


File: LPRng-HOWTO.info,  Node: Printcap Entry all,  Next: More Example Printcap Entries,  Prev: Separate Printcap Files for LPD,  Up: The Missing Details

Printcap Entry all
------------------

   The 'all' printcap entry is reserved to provide a list of all
printers available for use by the spooling software. This was intended
to be used with systems that did not have ways to provide a wildcard
search of the printcap database. The 'all' printcap entry has the form:
     all:all=pr1,pr2,...

   The LPRng software will use the individual entries of the printer
list and request additional printcap information if necessary.


File: LPRng-HOWTO.info,  Node: More Example Printcap Entries,  Next: PC-NFS Print Spooler,  Prev: Printcap Entry all,  Up: The Missing Details

More Example Printcap Entries
-----------------------------

   The following printcap entries show the formats,  and have some
additional comments about fields in the printcap file.
     #
     #  NOTE:
     #  Use the lpf filter (supplied with LPRng) or the of and if filter.
     #  Banners will be printed using the lpbanner
     #  program, supplied with LPRng.  You can also create your own banner
     #  program and specify it as the banner printer (printcap :bp: entry.)
     #  Put -$ at the start of a filter or program specification to suppress
     #  additional command line options. (see lpd.conf).
     #  Note: some PC's LPR packages use the v format instead of the l or f format
     #
     # This is the VINTAGE form of printcap,  with trailing \ to extend information
     # to next line.  Note the -$ to suppress adding options to command line
     # typical dump printer, no banner, parallel port
     pr1|dumb- no banner:\
         :sh:lp=/dev/lpr1:sd=/usr/spool/lpd/pr1:\
         :fx=flpv:\
         :af=acct:lf=log:\
         :if=/usr/local/bin/lpf:\
         :vf=-$ /bin/cat
     # dumb with banner - note that lprng will use the default banner program
     #  /usr/local/bin/lpbanner to generate full banner
     # Note: we use the standard LPRng printcap format
     pr1b|dumb- banner
         :lp=/dev/lpr1:sd=/usr/spool/lpd/pr1        #[lt    ]- sh deleted
         :fx=flpv
         :af=acct:lf=log
         :of=/usr/local/bin/lpf
         :if=/usr/local/bin/lpf
         :vf=/usr/local/bin/lpf -c
     # common printer information:
     # we define a @common entry
     @filter|printcap filter information
         :of=/usr/local/bin/lpf
         :if=/usr/local/bin/lpf
         :vf=/usr/local/bin/lpf -c
     # dumb with user banner - bp specifies banner printer
     #  If we wanted the banner at the END of the job, we would use
     #  :hl: (header last) flag.
     #  We can also have headers at start and end, using the
     #  be=[lcub  ]banner printer[rcub  ] and bs=[lcub  ]banner printer[rcub  ] overrides
     #  Note: -$ suppresses adding command line options
     pr1b|dumb- user supplied banner
         :lp=/dev/lpr1:sd=/usr/spool/lpd/pr1
         :fx=flpv
         :af=acct:lf=log
         :bp=/usr/local/lib/my_banner_printer
         :tc=@filter
     #serial attached PostScript printer
     # Note that fields can have terminating colons (:)
     # You can put comments into this printcap with this form
     # Note that the of filter does accounting
     pr2|postscript - no banner
         :rw:sh:lp=/dev/ttya:sd=/usr/spool/lpd/pr2
         :stty=9600 -raw -parenb cs8 crtscts
         :af=acct:lf=log:ps=status
         # only allow the following formats
         :fx=flpv
         # filters
         :tc=@filter
     #serial attached PostScript printer with psof created banner
     pr2|postscript - psof will expand short banner
         # Note: sb is short banner format
         # psof filter recognizes this and produces a fancy banner
         # from the input
         :rw:sb:lp=/dev/ttya:sd=/usr/spool/lpd/pr2
         :stty=9600 -echo -crmod -raw -oddp -evenp pass8 cbreak ixon
         :af=acct:lf=log:ps=status
         # only allow the following formats
         :fx=flpv
         # filters
         :tc=@filter
     #serial attached PostScript printer with user created banner
     pr2|postscript - psof will expand short banner
         # Note: sb is short banner format
         # psof filter recognizes this and produces a fancy banner
         # from the input
         :rw:sb:lp=/dev/ttya:sd=/usr/spool/lpd/pr2
         :stty=9600 -echo -crmod -raw -oddp -evenp pass8 cbreak ixon
         :af=acct:lf=log:ps=status
         # only allow the following formats
         :fx=flpv
         # filters
         :tc=@filter
     # parallel attached Laser Jet
     # Note that fields do not need terminating colons
     #
     pr3|laserjet
         :rw:sh:lp=/dev/lp:sd=/usr/spool/lpd/pr3
         :af=acct:lf=log:ps=status
         # only allow the following formats
         :fx=flpv
         #filters
         :if=/usr/local/lib/ifhp -Tstatus=off
         :of=/usr/local/lib/ofhp -Tstatus=off
         :vf=/usr/local/lib/ifhp -c -Tstatus=off
     # printcap file for pr4
     # PostScript via JetDirect card, IP address pr4, port 9100.
     # Note: some PC's LPR packages use the v format for their jobs
     #
     pr4|network
         :rw:sh:lp=pr3%9100:sd=/usr/spool/lpd/pr4
         :af=acct: :lf=log: :ps=status
         # only allow the following formats
         :fx=flpv
         #filters
         :if=/usr/local/lib/ifhp
         :of=/usr/local/lib/ofhp
         :vf=/usr/local/lib/bin/ifhp -c


File: LPRng-HOWTO.info,  Node: PC-NFS Print Spooler,  Prev: More Example Printcap Entries,  Up: The Missing Details

PC-NFS Print Spooler
--------------------

   If you are using PC-NFS to do print spooling you have several
security loopholes exposed.  You must modify the permissions on the
spool directory to allow other users to access it and place jobs into
the directory.  Printcap and other control information by default is
placed in the spool directory, and can be easily modified by malicious
users.  To reduce this risk, the `:cd:' (control directory) entry is
used to specify a directory to hold sensitive control information. For
example
     #/etc/lpd_printcap
     # PCNFS Spooler
     #
     pr7
         :lp=pr7@printserver
         :bq=pr1@printserver
         :sd=/usr/spool/pcnfs/pr7
         :cd=/usr/spool/lpd/pr7

   This printcap entry will implement a simple 'bounce queue',  in which
jobs are stored temporarily and then transferred to another spool queue,
and is the recommended way to support PC-NFS printing.


File: LPRng-HOWTO.info,  Node: Management Strategy for Large Sites,  Next: Using Programs To Get Printcap Information,  Prev: The Missing Details,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Management Strategy for Large Sites
===================================

   One very effective way to organize print spooling is to have a small
number of print servers running a `lpd' daemon, and to have all the
other systems send their jobs directly to them.  By using the above
methods of specifying the printer and server host you eliminate the
need for more complex management strategies.

   However, you still need to inform users of the names and existence
of these printers, and how to contact them.  One method is to use a
common `/etc/printcap' file which is periodically updated and
transfered to all sites.  Another method is to distribute the
information using the NIS or some other database.  LPRng has provided a
very flexible method of obtaining and distributing database
information:  see *Note Using Programs To Get Printcap Information::

   for details.


File: LPRng-HOWTO.info,  Node: Using Programs To Get Printcap Information,  Next: The Record Queue Name qq and force[lowbar]queuename flags,  Prev: Management Strategy for Large Sites,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Using Programs To Get Printcap Information
==========================================

   In the `lpd.conf' file you can specify:
     printcap_path=|program

   This will cause the LPRng software to execute the specified program,
which should then provide the printcap information.  The program is
invoked with the standard filter options, and has the name of the
printcap entry provided on `STDIN'.  The filter should supply the
printcap information on `stdout' and exit with a 0 (success) error
code.  By convention,  the printcap name 'all' requests a printcap
entry that lists all printers.

   This technique has been used to interface to the Sun Microsystem NIS
and NIS+ databases with great success.  By having the invoked program a
simple shell script or front end to the `nismatch' or `ypmatch'
programs, the complexity of incorporating vendor specific code is
avoided.

* Menu:

* How to use NIS and LPRng::
* How to use NIS and LPRng - Sven Rudolph::


File: LPRng-HOWTO.info,  Node: How to use NIS and LPRng,  Next: How to use NIS and LPRng - Sven Rudolph,  Up: Using Programs To Get Printcap Information

How to use NIS and LPRng
------------------------

   This note is based on material sent to the `lprng@lprng.org' mailing
list by Paul Haldane `[lt    ]paul@ucs.ed.ac.uk>'.

      # From: Paul Haldane <paul@ucs.ed.ac.uk>
      # To: lprng@lprng.org
      # Subject: Re: Problem using plp with NIS
      #

   We generally don't use NIS for printcap files (we've moved to
hesiod) but I can show you what we've done in the past.

   The input to NIS is a normal printcap file:
     # Classical printcap entry
     lp23a|lp23|lp|main printhost printer - KB, EUCS front Door:\
             :lp=lp23a@printhost:\
             :sd=/usr/spool/lpr/lp23a:
     
     #lprng printcap entry
     lplabel|lpl|TEST - Labels printer:
             :lp=:rm=printhost:rp=lplabel:
             :sd=/usr/spool/lpr/lplabel:
             :rg=lpadm:mx#1:

   To build the NIS printcap.byname map we add the following to the NIS
makefile (along the other bits and pieces that the makefile needs to
know about a new map).
     PRINTCAP=$(DIR)/printcap
     #PRINTCAP=/etc/printcap
     # warning : [  ] is actually [<space><tab>] in the script
     printcap.time: $(PRINTCAP) Makefile
       if [ -f $(PRINTCAP) ]; then \
         sed < $(PRINTCAP) \
           -e 's/[   ][  ]*$$//' -e '/\\$$/s/\\$$/ /' \
         | awk '$$1 ~ /^#/[lcub  ]next;[rcub  ] $$1 ~ /^[:|]/ [lcub  ]printf "%s", $$0; next;[rcub  ] \
             [lcub  ]printf "\n%s", $$0 [rcub  ]' \
         | sed -e 's/[   ]*:[  ]*:/:/g' -e 's/[  ]*|[  ]*/|/g' \
           -e '/^[   ]*$$/d' > .printcap.$$$$; \
         cat .printcap.$$$$; \
         if [ $$? = 0 -a -s .printcap.$$$$ ]; then \
           awk <.printcap.$$$$ '[lcub  ] FS=":"; OFS="\t"; [rcub  ] [lcub  ] \
               n = split($$1, names, "|"); \
               for (i=1; i<=n; i++) \
                   if (length(names[i]) > 0 \
                   && names[i] !~ /[ \t]/) \
                       print names[i], $$0; \
           [rcub  ]' | $(MAKEDBM) - $(YPDBDIR)/$(DOM)/printcap.byname; \
           awk <.printcap.$$$$ '[lcub  ] FS=":"; OFS="\t"; [rcub  ] [lcub  ] \
               n = split($$1, names, "|"); \
               if (n && length(names[1]) > 0 && names[1] !~ /[ \t]/) \
                   print names[1], $$0; \
           [rcub  ]' | $(MAKEDBM) - $(YPDBDIR)/$(DOM)/printcap.bykey; \
           rm -f .printcap.$$$$; \
           touch printcap.time; echo "updated printcap"; \
         fi \
       fi
       @if [ ! $(NOPUSH) -a -f $(PRINTCAP) ]; then \
           $(YPPUSH) printcap.byname; \
           $(YPPUSH) printcap.bykey; \
           touch printcap.time; echo "pushed printcap"; \
       fi

   To specify that you want YP database rather than file access, use
the following entry in your `/etc/lpd.conf' file:
     printcap_path |/usr/local/lib/pcfilter

   Put the following shell script in /usr/local/lib/pcfilter
     #!/bin/sh
     #/usr/local/lib/pcfilter
     read key
     ypmatch "$key" printcap.byname


File: LPRng-HOWTO.info,  Node: How to use NIS and LPRng - Sven Rudolph,  Prev: How to use NIS and LPRng,  Up: Using Programs To Get Printcap Information

How to use NIS and LPRng - Sven Rudolph
---------------------------------------

      Date: Wed, 11 Sep 1996 00:11:02 +0200
      From: Sven Rudolph <sr1@os.inf.tu-dresden.de>
      To: lprng@lprng.org
      Subject: Using :oh=server: with NIS

   When I use a cluster-wide printcap, two entries for each printer
will appear, e. g.:
     ---------- start of /etc/printcap snippet
     lp1
      :lp=lp1@server
     lp2
      :lp=lp2@server
     lp1
      :server:oh=servername
      :sd=/var/spool/lpd/lp1
      :lp=/dev/lp1
      :sh:mx#0
     ---------- end of /etc/printcap snippet

   When I create a NIS map out of this, the printer name is used as a
key and must be unique. So NIS' makedbm decides to drop all but the last
entry for each printer. This makes the printer on the clients
unavailable.  I solved this by a hack where the second entry is called
lp1.server and the NIS client script has to request the right entry.
  1. Assumptions Perl is available at the YP server in /usr/bin/perl .
     A Bourne Shell is available at all clients in /bin/sh The printcap
     that is to be exported is in /etc/printcap .  The printcap is
     written in the new format.

     In the examples the printer is called lp1 .

  2. Add the following to your YP Makefile (/var/yp/Makefile) on the YP
     server :
          ---------- start of /var/yp/Makefile snippet
          PRINTCAP  = /etc/printcap
          printcap: $(PRINTCAP)
              @echo "Updating $@..."
              $(CAT) $(PRINTCAP) | \
                  /usr/lib/yp/normalize_printcap | $(DBLOAD) -i $(PRINTCAP) \
                  -o $(YPMAPDIR)/$@ - $@
              @if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOMAIN) $@; fi
              @if [ ! $(NOPUSH) ]; then echo "Pushed $@ map." ; fi
          ---------- end of /var/yp/Makefile snippet

     (These lines are for Debian GNU/Linux, other systems might require
     other modifications)

  3. Install the programs `match[lowbar]printcap' and
     `normalize[lowbar]printcap' to `/usr/lib/yp'.
     normalize[lowbar]printcap is only required on the YP server.  The
     `normalize[lowbar]printcap' processes only the LPRng printcap
     format.
          ---------- start of /usr/lib/yp/normalize_printcap
          #! /usr/bin/perl
          $debug = 0;
          $line = "";
          $new = "";
          while (<>) [lcub  ]
              chomp;
              next if ( /^\s*\#.*/ );
              s/^\s*$//;
              next if ( $_ eq '' );
              print "new: " . $_ . "\n" if $debug;;
              if (/^\s/) [lcub  ] # continuation line
                  $line = $line.$_;
                  print "continued: $line\n" if $debug;
                  next;
              [rcub  ] else [lcub  ]
                  $line =~ s/\s+\:/:/g;
                  $line =~ s/\:\s+/:/g;
                  $line =~ s/\:\s*\:/:/g;
                  print "line: $line\n" if $debug;
                  push(@lines, $line) if $line;
                  $line = $_;
              [rcub  ]
          [rcub  ]
          $line =~ s/\s+\:/:/g;
          $line =~ s/\:\s+/:/g;
          $line =~ s/\:\s*\:/:/g;
          push(@lines,$line) if $line;
          @lines = sort(@lines);
          foreach $line (@lines) [lcub  ]
              ($printers) = split(/\:/,$line);
              @printers = split(/\|/,$printers);
              foreach $printer (@printers) [lcub  ]
                $num[lcub  ]$printer[rcub  ]++;
                push(@allprinters,$printer);
                print "allprinters: @allprinters\n" if $debug;
                print $printer."_".$num[lcub  ]$printer[rcub  ]."\t$line\n";
              [rcub  ]
          [rcub  ]
          @pr = keys %num;
          print "printers @pr\n" if $debug;
          if ($#allprinters >=0) [lcub  ]
              print "all_1\tall:all=".join(",",@pr)."\n";
          [rcub  ]
          ---------- end of /usr/lib/yp/normalize_printcap

     The result of processing the sample printcap file is:
          lp1_1 lp1:lp=lp1@server
          lp1_2 lp1:server:oh=servername:sd=/var/spool/lpd/lp1:lp=/dev/lp1:sh:mx#0
          lp2_1 lp2:lp=lp2@server
          all_1 all:all=lp1,lp2

     Observe that each of the real printer entries has a key consisting
     of the printer name with a numerical suffix.  This leads to the
     following method of extracting the printcap information using
     `ypmatch':
          ---------- start of /usr/lib/yp/match_printcap
          #!/bin/sh
          read p
          n=1
          while ypmatch "$[lcub  ]p[rcub  ]_$[lcub  ]n[rcub  ]" printcap 2>/dev/null; do
              n=`expr $n + 1`
          done
          ---------- end of /usr/lib/yp/match_printcap

  4. Now test the YP arrangement:
          $ cd /var/yp; make # this should create the printcap map
          $ ypcat printcap # should provide the whole normalized printcap
          $ echo lp1 |/usr/lib/yp/match_printcap # yields lp1 printcap

  5. Add the printcap[lowbar]path entry to `/etc/lpd.conf':
          printcap_path=|/usr/lib/yp/match_printcap

  6. Test the use of the printcap path entry:
          $ lpq -Plp1 # shows the status of lp1

  7. Restart the lpd server and check to see that it accesses the right
     printcap information.  Use the same `lpq' command, and then try
     `lpc printcap lp1'.


File: LPRng-HOWTO.info,  Node: The Record Queue Name qq and force[lowbar]queuename flags,  Next: Using the check[lowbar]for[lowbar]nonprintable Flag,  Prev: Using Programs To Get Printcap Information,  Up: Replacing UNIX SystemV lp lpstat Printing Services

The Record Queue Name qq and force[lowbar]queuename flags
=========================================================

   Options used:
   *  `qq'`[nbsp  ][nbsp  ]Insert queue name into control file'

   *  `use[lowbar]queuename'`[nbsp  ][nbsp  ](alias for qq)'

   *  `force[lowbar]queuename='`[nbsp  ]Queuename to be used'

   The printcap information consists of the printer name and aliases;
when a job is spooled to a printer alias, it is actually spooled to the
main printer entry.

   The `qq' use queuename option or its alias `use[lowbar]queuename'
tells LPRng to record the queue name that a job was queued to, and make
it available to other software for processing.  The
`force[lowbar]queuename=...' entry forces this name to be used.  This
capability has some interesting possibilities, as shown below.
     pr1_landscape|pr1_portrait|pr_raw:lp=pr@host:qq

   If a job is printed using `lpr -Ppr1[lowbar]landscape', then
`pr1[lowbar]landscape'  will be recorded as the spool queue name by the
LPRng software.

   Later, when the job is processed by a filter, the filter will be
invoked with a `-Qpr1[lowbar]landscape' command line option.  The
filter can use the name of the queue to enable say, landscape, portrait,
or raw orientations.
     john|tom|frank:lp=pr@host:force_queuename=office

   This printcap entry forces the queuename to be `office'; this
information could be used by a central routing facility to process the
information is a suitable manner.


File: LPRng-HOWTO.info,  Node: Using the check[lowbar]for[lowbar]nonprintable Flag,  Next: The fd Forwarding Off Option,  Prev: The Record Queue Name qq and force[lowbar]queuename flags,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Using the check[lowbar]for[lowbar]nonprintable Flag
===================================================

   Options used:
   *  `check[lowbar]for[lowbar]nonprintable'`[nbsp  ][nbsp  ]LPR checks
     for non-printable file '

   *  `ml[num   ]'`[nbsp  ][nbsp  ]minimum number of printable
     characters '

   *  `xt'`[nbsp  ][nbsp  ](alias for
     check[lowbar]for[lowbar]nonprintable)'

   Normally, `lpr' checks an `f' format file for non-printable
characters (i.e., escape characters) at the start of the print file.
Disabling this check allows you to print executable files, etc., which
can cause extreme abuse of your printer.

   Disabling can be done on a single printcap basis, or you can do this
on a global basis by modifying the configuration information (see *Note
/etc/lpd-conf Configuration File:: ).

   The `ml' value specifies the number of characters that are to be
checked.  Clearly,  if it is 0, none will be checked.


File: LPRng-HOWTO.info,  Node: The fd Forwarding Off Option,  Next: The rg Restrict Use to Group Members Option,  Prev: Using the check[lowbar]for[lowbar]nonprintable Flag,  Up: Replacing UNIX SystemV lp lpstat Printing Services

The fd Forwarding Off Option
============================

   Options used:
   *  `fd'`[nbsp  ][nbsp  ]Forwarding off'

   When the `fd' option is on (default is OFF), the `lpd' server will
not accept jobs whose host name in the control file is not the same as
one of the hostnames for the host which originates the connection.

   This was a wimpy attempt to prevent job spoofing.


File: LPRng-HOWTO.info,  Node: The rg Restrict Use to Group Members Option,  Next: The fx Allowed Formats Option,  Prev: The fd Forwarding Off Option,  Up: Replacing UNIX SystemV lp lpstat Printing Services

The rg Restrict Use to Group Members Option
===========================================

   Options used:
   *  `rg='`Restricted group list'

   The `rg' value specifies a list of groups.  If this value is present
use of a printer or operation is restricted to only users in a
particular group.

   This was a wimpy attempt to do restrictions on print facilities.
The -Ppr@host option overrides this check, unless the `rg' value is put
in the LPRng defaults.

   However, it does provide a simple tool to have clients do some form
of permissions checking that only the `lpd' server could normally do.


File: LPRng-HOWTO.info,  Node: The fx Allowed Formats Option,  Next: Fixing Bad Control Files and Metacharacters,  Prev: The rg Restrict Use to Group Members Option,  Up: Replacing UNIX SystemV lp lpstat Printing Services

The fx Allowed Formats Option
=============================

   Options used:
   *  `fx='`supported formats for printing'

   The `fx' option restricts the formats supported by a spool queue.
The `lpr' program uses these to check if a requested format is
supported.  By default, all formats are supported.


File: LPRng-HOWTO.info,  Node: Fixing Bad Control Files and Metacharacters,  Next: Maximum Copies,  Prev: The fx Allowed Formats Option,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Fixing Bad Control Files and Metacharacters
===========================================

   RFC1179 defines a simple protocol and standard for print jobs to be
interchanged between print spooling systems.  Unfortunately, there were
some major mistakes in not specifying the exact form that text would
take when placed in the control file.

   In addition, there are some simple coding errors that have been made,
but due to their wide distribution in major vendors software, need to
be accommodated.  See *Note The reverse[lowbar]lpq[lowbar]format
Option::

   for an example.

* Menu:

* Defective RFC1179 Implementations::
* OS/2::
* Serious Security Loophole::
* Fixing Bad Jobs::
* Using the bk Option and Control File Filters::


File: LPRng-HOWTO.info,  Node: Defective RFC1179 Implementations,  Next: OS/2,  Up: Fixing Bad Control Files and Metacharacters

Defective RFC1179 Implementations
---------------------------------

   Options used:
   *  `safe[lowbar]chars='`additional safe characters for control file '

   Most printer (or print server box) manufacturers totally ignore the
details of the RFC1179 protocol and simply accept the data files for
printing, disregarding the control file `until they need to print a
banner or provide status information'.

   At this point,  you suddenly discover that all sorts of little
details will cause horrible problems.  For example, the use of
non-ASCII characters (i.e. - values are 128-255) in the J (job) line of
a control file has been known to crash one network interface card in
such a manner that a power-up is needed to restart the printer.

   Also, as an exercise for the reader, here is another little gem.  If
you send one particular RFC1179 compatible print spooler a control file
with a character whose value is 255 (i.e. 0xFF), the job will never get
printed, and there is a mysterious diagnostic on the console:
     unexpected end of input

   This is due to the fact that the 0xFF eight bit value is getting sign
extended to a 16 bit value 0xFFFF, which just turns out to be -1, or
the error indication from a read.


File: LPRng-HOWTO.info,  Node: OS/2,  Next: Serious Security Loophole,  Prev: Defective RFC1179 Implementations,  Up: Fixing Bad Control Files and Metacharacters

OS/2
----

   For various reasons,  some versions of the OS/2 `lpd' print spooler
have decided to make the control file and data file names have
different formats.  This can cause `LPRng' to suspect that somebody is
trying to clobber other users jobs, and it will normally reject such
jobs.

   In addition, the OS/2 spooler does not follow RFC1179 correctly,
and truncates the data and job file protocol exchange.


File: LPRng-HOWTO.info,  Node: Serious Security Loophole,  Next: Fixing Bad Jobs,  Prev: OS/2,  Up: Fixing Bad Control Files and Metacharacters

Serious Security Loophole
-------------------------

   Finally, there is the subtle and nasty problem with some print
filters that are not `meta-char-escape' proof.  For example, suppose
that a user decided to spool a job as follows:
     lpr '-J; rm -rf /*;' /tmp/a

   This would create a job file with the line:
     J `rm /etc/passwd; echo Job;`

   The job would get printed on a printer with the following printcap:
     pr:sd=/...
       :if=/usr/local/hack

   And of course we have `/usr/local/hack' (yes, this is a BAD example,
so we won't start pointing out all the things):
     #!/bin/sh
     while [ -n "$1" ] ; do
             case "$1" in
             -J  )  shift; args="$args -M$1";;
             esac;
             shift;
     done;
     # reformat the command line
     eval /usr/local/realfilter $args

   The observant reader will notice that the above line gets expanded
to:
     eval /usr/local/realfilter -M`rm /etc/passwd; echo Job;`

   The interesting thing to observe is that the `realfilter' will
probably execute correctly, while the password file will magically
vanish.


File: LPRng-HOWTO.info,  Node: Fixing Bad Jobs,  Next: Using the bk Option and Control File Filters,  Prev: Serious Security Loophole,  Up: Fixing Bad Control Files and Metacharacters

Fixing Bad Jobs
---------------

   In addition to simple implementation RFC1179 implementation errors,
many PC based systems send messages or control files with non-ASCII
characters or meta characters in them.

   In order to prevent problems with LPRng ruthlessly purges all
characters but upper and lower case letters, spaces, tabs, and
`-[lowbar].@/:()=,+-[percnt]' from the control file, replacing
suspicious characters with '[lowbar]'.

   For some installations, the default set of safe characters may be
overly restrictive.  For example, `vintage' software may generate files
with `[num   ]' characters in the `J' line of the control file.  The
replacement of this character may cause other things to stop working.

   The `safe[lowbar]chars' option allows the user to specify an
additional set of safe characters in the `lpd.conf' configuration
file(s).  For example, `safe[lowbar]chars=[num   ]"' would allow the
`[num   ]' and `"' characters to appear in the control file.

   In addition, LPRng will ruthlessly regenerate control file entries
and data file names so that they are compliant.


File: LPRng-HOWTO.info,  Node: Using the bk Option and Control File Filters,  Prev: Fixing Bad Jobs,  Up: Fixing Bad Control Files and Metacharacters

Using the bk Option and Control File Filters
--------------------------------------------

   Options:
   *  `bk'`[nbsp  ][nbsp  ]Berkeley compatible control file'

   *  `control[lowbar]filter='`Control file filter'

   One of the more serious problems is when a print spooler (LPR)
program does not generate print jobs in a manner compatible with a
remote system.

   While LPRng performs checks for improper implementations of RFC1179,
it will try to accept a job, even under the most severe abuse of the
protocol.  However, other spoolers are not so forgiving.

   Some spoolers require that the contents of the control file be in
`exactly' the order that the original 1988 BSD LPR software generated
them.  While some entries can be missing, all the entries present in
the file must be in an explicit order.

   The `bk' (Berkeley LPD compatible control file) option causes LPR
and LPD to reformat the control file, removing objectionable entries.
The control file of a job being sent to a remote printer will have its
control file entries restricted to letters in (and the same order) as
HPJCLIMWT1234.

   However, there are some very odd commercial implementations that
require `more' information than is present.  To assist with this, the
`control[lowbar]filter' option can be used.  This specifies a program
that will process the control file before it is sent to a remote
destination.  See *Note Filters::  for details on filter operation, and
*Note Opening the Output Device::  for more information.

   The `control[lowbar]filter' program is run with the standard set of
filter options.  STDIN is attached (read/write) to the control file and
the filter STDOUT will be used as the control file value sent to the
remote host.

   The `control[lowbar]filter' can rewrite the control file, modify the
names and formats of the data files, or perform other changes.  Here is
a small snip of PERL code that shows how to rewrite the control file:
     # you need to get PERL to do a 'dup' call on FD 0
     $status = 0;
     @cf_lines = [lt    ]STDIN>;
     # mess about with the control file
     foreach $line (@cf_lines) [lcub  ]
        # or whatever you want
        print STDOUT $line;
     [rcub  ]
     exit $status;

   The exit code of the `control[lowbar]filter' is used to determine
whether to proceed in processing.  See *Note Printing Job Files::  for
details.

   Also, see *Note Opening the Output Device::  for more information.


File: LPRng-HOWTO.info,  Node: Maximum Copies,  Next: The minfree Minimum Spool Queue Space Option,  Prev: Fixing Bad Control Files and Metacharacters,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Maximum Copies
==============

   Options used:
   *  `mc[num   ]'`maximum copies '

   The ` mc' value specifies the maximum number of copies of a job that
can be printed on a printer using the `lpr -Knn ' or `lpr -[num   ]nn '
option.


File: LPRng-HOWTO.info,  Node: The minfree Minimum Spool Queue Space Option,  Next: Debugging,  Prev: Maximum Copies,  Up: Replacing UNIX SystemV lp lpstat Printing Services

The minfree Minimum Spool Queue Space Option
============================================

   Options used:
   *  `minfree[num   ]'`alias for mi'

   If this value is non-zero, then the `lpd' server checks to see that
there is the specified number of bytes of file space available before
transferring a job.


File: LPRng-HOWTO.info,  Node: Debugging,  Next: LPD Specific,  Prev: The minfree Minimum Spool Queue Space Option,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Debugging
=========

   Options used:
   *  `debugging='`debugging options'

   *  `full[lowbar]time'`[nbsp  ][nbsp  ]full or extended time format'

   *  `ms[lowbar]time[lowbar]resolution'`[nbsp  ][nbsp  ]millisecond
     time resolution'

   *  `syslog[lowbar]device='`syslog alternative device'

   *  `use[lowbar]date'`[nbsp  ][nbsp  ]put date information in control
     file'

   *  `use[lowbar]info[lowbar]cache'`[nbsp  ][nbsp  ]cache printcap and
     other information'

   The LPRng software has a very powerful debugging capability.  Since
most printing problems occur on remote systems where it is impossible
to run debuggers,  and since most systems do not do core dumps of
SETUID ROOT programs, the LPRng software provides a very verbose set of
log file trace messages.

   First, serious errors or other information are logged using the
`syslog()' facilities.  If these are not present on a system, then the
messages are logged to the device specified by `syslog[lowbar]device'.

   For client programs, the debugging options are specified on the
command line and output is directed to STDERR.  For the `lpd' server,
debugging commands can be specified on the command line OR as the
`db=options' printcap value.  Output is directed to the log file (`lf'
option value, default log).

   A typical debug entry has the format `2,network+1,database'.  This
sets the general debugging level to 2, network debugging to 1 and the
database debugging level to the default.  The following debugging
options and levels are supported.
   * nnn - general purpose debugging level

   * network - network debugging

   * database - database debugging

   * receive - job or command reception debugging

   * print - detailed job printing debugging

   The `full[lowbar]time' flag forces the logging and other information
which has timestamps to have a full (year, month, day, etc.) timestamp.
The `ms[lowbar]time[lowbar]resolution' flag forces millisecond time
resolution in the time stamp.  The `use[lowbar]date' flag forces a date
value to be placed in a control file if there is none.

   The `use[lowbar]info[lowbar]cache' (default ON) causes `lpd' to
cache printcap and configuration information.  This is desirable except
when trying to change values in printcap files and test the results.
By using `use[lowbar]info[lowbar]cache@' in the configuration
information, you can get immediate responses.  Also, see *Note LPC
Requests::

   for another method.


File: LPRng-HOWTO.info,  Node: LPD Specific,  Next: Legacy Compatibility,  Prev: Debugging,  Up: Replacing UNIX SystemV lp lpstat Printing Services

LPD Specific
============

   Options used:
   *  `ipv6'`[nbsp  ][nbsp  ]use IPV6 Network facilities '

   *  `lockfile='`lpd server lock file'

   *  `report[lowbar]server[lowbar]as='`server name for status reports'

   *  `spool[lowbar]dir[lowbar]perms[num   ]'`spool directory
     permissions '

   *  `spool[lowbar]file[lowbar]perms[num   ]'`spool file permissions '

   *  `spread[lowbar]jobs[num   ]'`job number spread'

   These options are usually LPD specific.  For example, the `ipv6'
specifies that the IPV6 protocol, rather than IPV4 will be used.  In
future versions,  this may not be necessary.

   The `lockfile' specifies the location of the lock file used by the
`lpd' server.

   The `spool[lowbar]dir[lowbar]perms' and
`spool[lowbar]file[lowbar]perms' (default 0700 and 0600 respectively)
values are the (numeric) permissions for the spool directory and spool
files.

   The `spread[lowbar]jobs' option is obsolete.  The `
spread[lowbar]jobs' option was a desperation fix to handle difficulties
with the arrival of a large number of jobs with the same or close job
number.  The LPD server would fork children, each of whom tried to lock
the job files.  The spread value randomly chose a new number in the
range about the original job number.  However, it is still preserved
for legacy systems which still have problems with file locking.

   The `report[lowbar]server[lowbar]as' option allows an administrator
to masquerade a server with another name.  This could be useful if
various load sharing activities are being carried out,  or if there are
problems reconfiguring DNS to cause the correct server name to be
reported.


File: LPRng-HOWTO.info,  Node: Legacy Compatibility,  Next: Compatibility with BSD printcap,  Prev: LPD Specific,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Legacy Compatibility
====================

   The following arguments have been provided for compatibility with
legacy systems.

* Menu:

* The allow[lowbar]duplicate[lowbar]args Option::
* The class[lowbar]in[lowbar]status Options::
* The reverse[lowbar]lpq[lowbar]format Option::
* The return[lowbar]short[lowbar]status and short[lowbar]status[lowbar]length Options::
* The force[lowbar]lpq[lowbar]status Options::
* The ignore[lowbar]requested[lowbar]user[lowbar]priority and force[lowbar]fqdn[lowbar]host Options::
* The lpr[lowbar]bsd Options::


File: LPRng-HOWTO.info,  Node: The allow[lowbar]duplicate[lowbar]args Option,  Next: The class[lowbar]in[lowbar]status Options,  Up: Legacy Compatibility

The allow[lowbar]duplicate[lowbar]args Option
---------------------------------------------

   Options used:
   *  `allow[lowbar]duplicate[lowbar]args'`[nbsp  ][nbsp  ]allow lpr to
     have duplicate arguments '

   Some users would like duplicate LPR and LPRM command line arguments
to override earlier ones, i.e. - `lpr -a x -a y ' should be equivalent
to `lpr -a y'

   The `allow[lowbar]duplicate[lowbar]args' option allows the various
client programs to have duplicate arguments.  The last specified
argument on the command line will override previous values.


File: LPRng-HOWTO.info,  Node: The class[lowbar]in[lowbar]status Options,  Next: The reverse[lowbar]lpq[lowbar]format Option,  Prev: The allow[lowbar]duplicate[lowbar]args Option,  Up: Legacy Compatibility

The class[lowbar]in[lowbar]status Options
-----------------------------------------

   Options used:
   *  `class[lowbar]in[lowbar]status'`[nbsp  ][nbsp  ]show class name
     in status'

   Setting the `class[lowbar]in[lowbar]status' option causes the class
name rather than priority to be displayed in the status information.


File: LPRng-HOWTO.info,  Node: The reverse[lowbar]lpq[lowbar]format Option,  Next: The return[lowbar]short[lowbar]status and short[lowbar]status[lowbar]length Options,  Prev: The class[lowbar]in[lowbar]status Options,  Up: Legacy Compatibility

The reverse[lowbar]lpq[lowbar]format Option
-------------------------------------------

   Options used:
   *  `reverse[lowbar]lpq[lowbar]format='`[nbsp  ]reverse LPQ status
     format for specified remote systems'

   Various Solaris and other System V implementations support an
RFC1179 interface to remote printers.  Unfortunately,  there is a
problem in that when they send a status request, the status format is
reversed.  That is, when LONG status format is wanted, they send SHORT,
and vice versa.

   The `reverse[lowbar]lpq[lowbar]format=' specifies a list of printers
or IP addresses for which the `lpd' server will return LONG status when
SHORT is requested, and vice versa.  For example:
     reverse_lpq_format=*.eng.com,130.192.0.0/16

   will cause hosts whose Fully Qualified Domain Name (FQDN) ends in
`eng.com' or from subnet `130.192.0.0' to have reversed status returned.


File: LPRng-HOWTO.info,  Node: The return[lowbar]short[lowbar]status and short[lowbar]status[lowbar]length Options,  Next: The force[lowbar]lpq[lowbar]status Options,  Prev: The reverse[lowbar]lpq[lowbar]format Option,  Up: Legacy Compatibility

The return[lowbar]short[lowbar]status and short[lowbar]status[lowbar]length Options
-----------------------------------------------------------------------------------

   Options used:
   *  `return[lowbar]short[lowbar]status='`[nbsp  ]return short LPQ
     status for specified remote systems'

   *  `short[lowbar]status[lowbar]length[num   ]'`[nbsp  ]short LPQ
     status length in lines'

   In order to be compatible with non-LPRng client programs, some
administrators would like `lpd' to return a short or brief status to
normal status queries.

   The `return[lowbar]short[lowbar]status=' specifies a list of
printers or IP addresses for which the `lpd' server will return an
abbreviated status when LONG status is requested.  For example:
     return_short_status=*.eng.com,130.192.0.0/16
     short_status_length#3

   will cause hosts whose Fully Qualified Domain Name (FQDN) ends in
`eng.com' or from subnet `130.192.0.0' to get only 3 lines of detailed
status returned.


File: LPRng-HOWTO.info,  Node: The force[lowbar]lpq[lowbar]status Options,  Next: The ignore[lowbar]requested[lowbar]user[lowbar]priority and force[lowbar]fqdn[lowbar]host Options,  Prev: The return[lowbar]short[lowbar]status and short[lowbar]status[lowbar]length Options,  Up: Legacy Compatibility

The force[lowbar]lpq[lowbar]status Options
------------------------------------------

   Options used:
   *  `force[lowbar]lpq[lowbar]status='`[nbsp  ]force LPQ status format
     for specified remote systems'

   In order to be compatible with non-LPRng client programs which are
totally unpredictable, this allows the administrator to specify the
format for LPQ status when requests arrrive.

   The `force[lowbar]lpq[lowbar]status=' specifies a list of formats
and printers or IP addresses for which the `lpd' server will return
status in the sepcified format.  The entry has the format
`KEY=list;KEY=list...' where `KEY' is `s' for short and `l' for long
format, and list is a list of hosts or IP addresses.  For example:
     force_lpq_status=s=pc*.eng.com,130.192.12.0/24,l=sun*.eng.com

   will cause hosts whose Fully Qualified Domain Name (FQDN) matches
`pc*eng.com' or from subnet `130.192.12.0' to get short status returned
and hosts which match `sun*.eng.com' get long status.


File: LPRng-HOWTO.info,  Node: The ignore[lowbar]requested[lowbar]user[lowbar]priority and force[lowbar]fqdn[lowbar]host Options,  Next: The lpr[lowbar]bsd Options,  Prev: The force[lowbar]lpq[lowbar]status Options,  Up: Legacy Compatibility

The ignore[lowbar]requested[lowbar]user[lowbar]priority and force[lowbar]fqdn[lowbar]host Options
-------------------------------------------------------------------------------------------------

   Options used:
   * `ignore[lowbar]requested[lowbar]user[lowbar]priority'`prevent
     users from queue jumping'

   * `force[lowbar]fqdn[lowbar]hostname'`force FQDN hostname in control
     file'

   Some students... um... users... will request a high priority for
their job in order to jump the queue of waiting jobs.  This option will
cause the `lpd' server to ignore the requested user priority.  However,
the `topq' operation will still be effective.

   Similarly,  some print spoolers do not put a FQDN host name in their
control file.  The `force[lowbar]fqdn[lowbar]hostname' flag will cause
`lpd' to put a FQDN host name in.


File: LPRng-HOWTO.info,  Node: The lpr[lowbar]bsd Options,  Prev: The ignore[lowbar]requested[lowbar]user[lowbar]priority and force[lowbar]fqdn[lowbar]host Options,  Up: Legacy Compatibility

The lpr[lowbar]bsd Options
--------------------------

   This will force the `lpr -m' (send mail to user) option not to take
an arguement, as in the BSD lpr.  The value of the $USER environment
variable will be used as the return address.


File: LPRng-HOWTO.info,  Node: Compatibility with BSD printcap,  Prev: Legacy Compatibility,  Up: Replacing UNIX SystemV lp lpstat Printing Services

Compatibility with BSD printcap
===============================

   If you previously had a BSD-style printer spooler, you might be
lucky: your printcap will be directly usable by LPRng in many cases,
i.e. - LPRng is almost totally backwards compatible with the old BSD
printcaps.  However, a lot of people have found out the hard way that
LPRng is not completely compatible with BSD LPR.

   For example, the `fc/fs/xc/xs' flag fields were used to specify
serial line options and are no longer supported.  The flag fields and
their meanings are version and OS dependent and were not portable.  The
`stty' value is a subset of `stty(1)' options, and should be able to
support whatever configuration you require.

   There are other items, such as the fact that the keywords used by
LPRng can be variable length, not just two letters, and other
commenting and formatting conventions which are not supported by the
older BSD servers.


File: LPRng-HOWTO.info,  Node: Index To All The Options,  Next: System Specific Notes,  Prev: Printcap Database,  Up: Top

Index To All The Options
************************

   ` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  always
print banner, ignore lpr -h option
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  query accounting server when
connected
` *Note Normal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  accounting at end (see also
af, la, ar, as)
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  name of accounting
file (see also la, ar)
` *Note Job State:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  automatically hold all jobs
` *Note The allow[lowbar]duplicate[lowbar]args Option:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
Allow duplicate command line arguments (legacy requirement)
` *Note Obtaining Configuration Information:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Allow use of
LPD[lowbar]CONF
` *Note LPR -mhost[percnt]port and user logging support:: '`[nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  allow users to request logging info using lpr
-mhost[percnt]port
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  enable remote
transfer accounting (if af is set)
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  accounting at start
(see also af, la, ar)
` *Note Client Operations for Client To lpd Server Authentication::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  authentication type to use
` *Note Client Operations for Client To lpd Server Authentication::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  client to server authentication transfer
program
` *Note lpd Server to Server Authentication:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  server to server
authentication method
` *Note Server Operations for Client To lpd Server Authentication::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  server to server authentication transfer program
` *Note Server Operations for Client To lpd Server Authentication::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  server receive authentication program
` *Note Client Operations for Client To lpd Server Authentication::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  server id
for authentication
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Banner at End
Generation Program
` *Note Using the bk Option and Control File Filters:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
Berkeley LPD job file format
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  Berkeley LPD filter options
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Berkeley LPD OF
filter options
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  backwards-compatible
filters: use simple paramters
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  short banner line
sent to banner printer
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Banner Generation
Program (see bs, be)
` *Note Bounce queues:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Use filters on bounce queue jobs
` *Note Bounce queues:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Format of bounce
queue output
` *Note A serial printer queue:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Serial port bit
rate (see ty)
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Banner at Start
Generation Program
` *Note Spool Queues and Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  control directory
` *Note Using the check[lowbar]for[lowbar]nonprintable Flag:: '`[nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  LPR checks
for nonprintable file
` *Note Checking Busy Status of Server Queues:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
program used to check for idle printer
` *Note The class[lowbar]in[lowbar]status Options:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Show job class name in `lpq' status
information
` *Note Simple Server Printcap Example:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  comment
identifying printer (LPQ)
` *Note /etc/lpd-conf Configuration File:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
configuration file
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  connection control for remote
printers
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  connection control for remote printers
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  connection control for remote printers
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  connection control
for remote printers
` *Note Using the bk Option and Control File Filters:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  control file filter
` *Note Debugging:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  debug options for queue
` *Note default[lowbar]format:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  default job format
` *Note default[lowbar]permission=ACCEPT:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  default permission for files
` *Note Client To Server Connection Information:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  default printer
` *Note default[lowbar]priority=A:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  default job priority
` *Note default[lowbar]remote[lowbar]host=localhost:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  default remote host
` *Note default[lowbar]tmp[lowbar]dir=/tmp:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  default directory for temp files
` *Note Dynamic Routing:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  printers that a route filter may
return and we should query
` *Note The fd Forwarding Off Option:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  forwarded jobs not
accepted
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  string to send for
a form feed
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  filter LD[lowbar]LIBRARY[lowbar]PATH value
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  filter options
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  filter PATH
environment variable
` *Note The filter[lowbar]poll Option:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  interval to check
for OF filter output
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  send form feed when
device is opened
` *Note The ignore[lowbar]requested[lowbar]user[lowbar]priority and
force[lowbar]fqdn[lowbar]host Options:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  force FQDN
HOST value in control file
` *Note Spooling To Local Server:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  force clients to send all requests to localhost
` *Note The Record Queue Name qq and force[lowbar]queuename flags::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  force use of this
queuename if none provided
` *Note Normal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  send form feed when device
is closed
` *Note Debugging:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  use extended time
format
` *Note Security Permissions and CHECKPC:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Effective Group ID (EGID) for SUID
ROOT programs
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Header (banner)
last, at end of job
` *Note The ignore[lowbar]requested[lowbar]user[lowbar]priority and
force[lowbar]fqdn[lowbar]host Options:: '`'  Ignore requested user
priority
` *Note What are print formats?:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  default (f, l)
filter program
` *Note LPD Specific:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  using IPV6 conventions
` *Note Kerberos Installation Procedure:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  kerberos keytab file location
` *Note Kerberos Installation Procedure:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  kerberos key lifetime
` *Note Kerberos Installation Procedure:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  kerberos key renewal time
` *Note Kerberos Installation Procedure:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ]'  kerberos remote principle name for forwarding
` *Note Kerberos Installation Procedure:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  kerberos remote server principle name
` *Note Kerberos Installation Procedure:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  kerberos default service
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  enable local
printer accounting (if af is set)
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  leader string sent
on printer open
` *Note Log and Status Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  error log file for spool
queue
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  lock the IO device
` *Note LPD Specific:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  lpd lock
file
` *Note Logger Network Communication:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
destination for logging information
` *Note Logger Network Communication:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  intervals between connection attempts
` *Note Logger Network Communication:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  temp file for log information
` *Note Logger Network Communication:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  max size in Kbytes of temp file for log information
` *Note Job Transfer:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  use long job number when a
job is submitted
` *Note Simple Client Printcap Entry:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  printer device name
or specification
` *Note Bounce queues:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  force lpd to filter job
before forwarding
` *Note LPD Spool Queue Processing:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  force lpd to poll idle printers
` *Note LPD Spool Queue Processing:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  interval between lpd printer polls
` *Note Ports and Connections:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
lpd listening port
` *Note The Missing Details:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  lpd
printcap path
` *Note LPR Filtering:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  lpr does filtering as in
bounce queue
` *Note The lpr[lowbar]bsd Options:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  lpr does filtering as in bounce queue
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  mail user
from user name
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  mail to this operator on error
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  maximum time between
connection attempts
` *Note Log and Status Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
maximum size (in K) of spool queue log file
` *Note LPD Spool Queue Processing:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
maximum number of lpd queue servers that can be active
` *Note Log and Status Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  maximum length of status line
` *Note Log and Status Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  maximum size (in K) of status file
` *Note Maximum Copies:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  maximum copies allowed
` *Note Log and Status Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
minimum size (in K) of spool queue log file
` *Note Log and Status Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  minimum size to reduce status file to
` *Note The minfree Minimum Spool Queue Space Option:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  minimum amount of free space needed
` *Note Using the check[lowbar]for[lowbar]nonprintable Flag:: '`[nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  minimum number of printable characters for printable check
` *Note Debugging:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  millisecond time
resolution
` *Note Simple Server Printcap Example:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  maximum job
size (1Kb blocks, 0 = unlimited)
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  use nonblocking
device open
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  pause between transferring
jobs to remote printer
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  banner output
filter
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  OF filter options
` *Note Ports and Connections:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  originate connections from these ports
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  clients pass these environment variables to filters
` *Note Permission File Location:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  lpd.perms
files
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  page length (in
lines)
` *Note The lpr -p format and pr option:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  pr program
for p format
` *Note The Missing Details:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  /etc/printcap files
` *Note Log and Status Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  printer status file name
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  page width (in
characters)
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  page width in
pixels (horizontal)
` *Note Filter Command Line Flags:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  page length in
pixels (vertical)
` *Note The Record Queue Name qq and force[lowbar]queuename flags::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  put queue name in control file
` *Note Protocol Requests and Replies:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  operations allowed to remote host
` *Note LPD Specific:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
server name for status reports
` *Note Ports and Connections:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Retry on
connect ECONNREFUSED errors
` *Note Ports and Connections:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Retry device open or connect
failures
` *Note The return[lowbar]short[lowbar]status and
short[lowbar]status[lowbar]length Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
return short lpq status when request arrives from specified host
` *Note Ports and Connections:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  set
SO[lowbar]REUSEADDR on outgoing ports
` *Note The reverse[lowbar]lpq[lowbar]format Option:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  reverse lpq format when request arrives from specified host
` *Note The rg Restrict Use to Group Members Option:: '`[nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
clients allow only users in this group access to printer
` *Note Simple Client Printcap Entry:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  remote machine
(hostname) (with rp)
` *Note Dynamic Routing:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  routing filter, returns destinations
` *Note Simple Client Printcap Entry:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  remote printer name
(with rm)
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  open printer for
reading and writing
` *Note Defective RFC1179 Implementations:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
additional safe characters in control file lines
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  save job when an error
` *Note Normal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  save job when done
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  short banner (one
line only)
` *Note Spool Queues and Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  spool directory
pathname
` *Note Block Job Transfer:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
send block of data, rather than individual files
` *Note Job Transfer:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  send data files first in job transfer
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  failure action to
take after send[lowbar]try attempts failed
` *Note Printing Job Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  print job
read/write timeout
` *Note Printing Job Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  status query operation read/write
timeout
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
maximum number of times to try sending job
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
sendmail program
` *Note Opening the Output Device:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  server temporary file directory
` *Note Printing Job Files:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  suppress form feeds
separating data files in job
` *Note Printing Banner At Beginning:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  suppress header
(banner) pages
` *Note The return[lowbar]short[lowbar]status and
short[lowbar]status[lowbar]length Options:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
short lpq status length in lines
` *Note Ports and Connections:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  set the SO[lowbar]LINGER socket option
` *Note LPD Specific:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  spool directory permissions
` *Note LPD Specific:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
spool file permissions
` *Note LPD Specific:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  amount to spread jobs to avoid
collisions
` *Note Multi-server print queue:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  name of queue that
server serves (with sv)
` *Note Status Monitoring and Logging:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  time after which to report
active job stalled
` *Note Abnormal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ]'  stop processing queue on filter abort
` *Note A serial printer queue:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  stty commands to set output line
characteristictics
` *Note Multi-server print queue:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  names of servers
for queue (with ss)
` *Note Debugging:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  name of syslog device
` *Note Normal Termination:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  trailer string to send
before closing printer
` *Note Changing Filter Formats:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  translate data format in control file
` *Note Debugging:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  force date
in control file
` *Note Job Identifier:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  force identifier in control file
` *Note Debugging:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ]'  read and cache information
` *Note The Record Queue Name qq and force[lowbar]queuename flags::
'`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'
put queue name in control file (alias for qq)
` *Note Job Transfer:: '`[nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ]'  Use short hostname for lpr control and data file
names
` *Note Security Permissions and CHECKPC:: '`[nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ]'  Effective User ID (EUID)
for SUID ROOT programs
` *Note Using the check[lowbar]for[lowbar]nonprintable Flag:: '`[nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp  ][nbsp
]'  formats supported on printer

File: LPRng-HOWTO.info,  Node: System Specific Notes,  Next: The Most Frequently Asked Questions,  Prev: Index To All The Options,  Up: Top

System Specific Notes
*********************

The following are a set of suggestions and recommendations for specific
systems.

* Menu:

* Solaris 2-4 2-5 2-6 2-7::
* Solaris Newsprint and FrameMaker::
* Linux::
* AIX::
* Appletalk Support::
* Apple to LPRng Printing::
* LPRng to Appletalk Printing::
* SAMBA Support::
* Printer Specific notes::
* HP Deskjet::
* HP LaserJet IIISiMX::
* HP JetDirect Interface::
* Lexmark Printers::
* Tektronix Phaser Printers::
* Duplex Printing::
* Test Version and Portability Testing::


File: LPRng-HOWTO.info,  Node: Solaris 2-4 2-5 2-6 2-7,  Next: Solaris Newsprint and FrameMaker,  Up: System Specific Notes

Solaris 2-4 2-5 2-6 2-7
=======================

   The Sun Solaris operating system is derived from the System V UNIX
baseline.  Use the following installation procedure.
  1. First, install the LPRng software and then rename all of the
     existing Solaris print facilities.  See the *Note Installing the
     Software::  section for details.  You should especially look out
     for `lp', `lpstat', `lpsched', `lpadmin', and other executables
     used by Solaris for print support.

  2. `Reboot'.  Don't try to be fancy and kill off processes, use the
     `nlsadmin' command, or other insanity.  This is brutal,  but
     appears to be necessary in order to ensure that the networking
     support is set up correctly.

  3. When the system restarts, try using `lpq' to check to see if the
     `lpd' server is active.

   James P. Dugal `[lt    ]jpd@usl.ed[gt    ]' has also makde the
following suggestions as well.
     From: "Dugal James P." <jpd@usl.edu>
     To: lprng@iona.com
     Subject: Re: [LPRng] start up trouble
     
     Here are some more tips for Solaris:
     
     1. If /var/spool/cron/crontabs/lp exists, remove it.
     
     In fact, we actually test if /etc/init.d/lp exists on any newly-installed
     system, and if so, we issue these commands:
             /etc/init.d/lp stop
             /usr/sbin/pkgrm -n SUNWpsu
             /usr/sbin/pkgrm -n SUNWscplp
             /usr/sbin/pkgrm -n SUNWpcu
             /usr/sbin/pkgrm -n SUNWpsr
             /usr/sbin/pkgrm -n SUNWpcr
             /bin/rm -f /var/spool/cron/crontabs/lp
     
     Regards,
     -- James Dugal, N5KNX           Internet: jpd@usl.edu
     Associate Director              Ham packet: n5knx@k5arh.#lft.la.usa.noam
     Computing Support Services      US Mail: PO Box 42770  Lafayette, LA  70504
     University of Southwestern LA.  Tel. 318-482-6417       U.S.A.


File: LPRng-HOWTO.info,  Node: Solaris Newsprint and FrameMaker,  Next: Linux,  Prev: Solaris 2-4 2-5 2-6 2-7,  Up: System Specific Notes

Solaris Newsprint and FrameMaker
================================

   The following is a guide to using LPRng and Sun Microsystems
Newsprint by Christopher Hylands, Ptolemy Project Manager of the
University of California.

   The Sun Newsprint printer is actually an OEM version of the
Textronix PhaserII; Sun Microsystems appears to have dropped support
for Newsprint, and the recommended migration path is to buy a
PostScript printer.  If you want more information on using the
Newsprint system, notes are available via
`http://ptolemy.eecs.berkeley.edu/[tilde ]cxh/lprng.html'.

   Looking through the mailing list logs, it looks like everyone was
having a hard time getting lprng to work with Sun's braindead
newsprinters.  I tried using ghostscript, but the fonts were, IMHO,
ugly, so I spent a little time getting the newsprint fonts to work.

   The key thing was to grab the file `/usr/newsprint/lpd/if' from a
SunOS4.1.3 newsprint installation.  If you cannot get this code, then
the installation will be extremely difficult.

   To install lprng on a Solaris2.x machine, you need to first stop the
existing print services and install the startup scripts for LPRng.
Note that if there is a local printer, you may have to also fix the
permissions of the device. Typical commands are:
     chown daemon /devices/sbus@1,f8000000/SUNW,lpvi@1,300000:lpvi0

   We use the following simple `if' script.
     #/bin/sh
     # extremely simple filter script
     /bin/cat

   The Sparcprinters use licensed fonts from NeWSprint. To use the
licensed fonts, you must have the lprng spool directory for the
sparcprinter in the same location as spool directory of the brain dead
Solaris lp system.  If your printer is named xsp524, then this
directory would be ` /etc/lp/printers/xsp524'.

   The printcap entry looks like:
     sp524|524:
         :mx#0:sf:sh:sb:
         :lp=:rm=doppler:rp=xsp524:mx#0:
         :sd=/var/spool/lpd/sp524d:
         :lf=/var/spool/lpd/sp524d/log:
     xsp524|Sun SPARCprinter NeWSprint printer:
         :mx#0:sf:sb:sh:rs:
         :lp=/dev/lpvi0:
         :sd=/etc/lp/printers/xsp524:
         :lf=/etc/lp/printers/xsp524/log:
         :af=/var/spool/lpd/xsp524/acct:
         :if=/usr/local/lib/newsprint/if:

   The `/usr/local/lib/newsprint/if' was copied from
`/usr/newsprint/lpd/if' in a SunOS4.x installation of the newsprint
software.  Unfortunately, the newsprint engine is so brain dead that it
needs many environment variables set, so it is fairly difficult to come
up with a clean script to start the engine. I made the following
changes to the file.
  1. First, set the path in the script.  You may also need to change
     defaults to suit your preferences:
          PATH=/usr/ucb:/usr/bin:/etc:/usr/etc:/opt/NeWSprint/bin:/opt/NeWSprint/np/bin:
          PATH=$PATH:$NPHOME/pl.$ARCH/bin:$NPHOME/np/bin; export PATH

  2. You will also need a `/etc/lp/printers/printername/.params' file.
     If you are using the same spooler directory as the directory that
     the Solaris lp system uses, then the .param file should appear
     there. If you are using a different spooler directory, then you
     will need to copy the .param file from elsewhere and edit it
     accordingly.

  3. If you are going to move a license to a new printer, you should
     probably save the .param file in the old printer spooler directory.
     Run /opt/NeWSprint/bin/fp[lowbar]install and remove the license
     from the old printer and assign it to the new printer.  You could
     run /opt/NeWSprint/bin/rm[lowbar]np[lowbar]printer and remove the
     printer, but that will get rid of the .param file

  4. FrameMaker under Solaris2.x uses the lp command. The fix is to edit
     $FMHOME/fminit/FMlpr and comment out the lp line and add an lpr
     line
          sunxm.s5.sparc)
              lpr -P"$PRINTER" "$FILE"
              #lp -c -d"$PRINTER" "$FILE"

     Christopher Hylands, Ptolemy Project Manager  University of California
     cxh@eecs.berkeley.edu                 US Mail: 558 Cory Hall #1770
     ph: (510)643-9841 fax:(510)642-2739       Berkeley, CA 94720-1770
     home: (510)526-4010 (if busy -4068)       (Office: 493 Cory)


File: LPRng-HOWTO.info,  Node: Linux,  Next: AIX,  Prev: Solaris Newsprint and FrameMaker,  Up: System Specific Notes

Linux
=====

   At the time of this writing (Jan 1998), the three major Linux
distributions (Slackware, Red Hat and Debian) carry an older version of
LPRng. Users of those systems should download the latest stable
release, and install that instead of the distributed binaries.

   This is mostly important for Slackware 3.2 users, as this version
installs LPRng by default.  Patrick Volkerding changed the default back
to BSD LPR in Slackware 3.3, as many users had experienced problems
because they didn't realize they weren't using the BSD software.

   Debian's `dselect' utility lets you choose between all packages.
Amongst these are LPRng, as well as the traditional LPR software.

   You have to make sure your kernel is configured correctly. The
documentation for the kernel sources in `/usr/src/linux/Documentation/'
and the `Kernel-HOWTO' will help you to generate a new kernel if
needed. You will need to set the following options:
   * Networking support (`CONFIG[lowbar]NET')

   * TCP/IP support (`CONFIG[lowbar]INET')

   * If your printer is connected to a parallel port, you will also
     need the `Parallel Printer Support' (`CONFIG[lowbar]PRINTER').
     You can use this as a module if you want.

   * For a serial printer, answer `Yes' when asked if you want `Support
     for serial devices' (`CONFIG[lowbar]SERIAL'). This is also
     available as a module.

   Once you have done this, the current releases of LPRng will install
and run without problems.  See the *Note Installing the Software::

   section for details on how to install LPRng and deactivate the
existing print support.

   You may need to update the printcap file and filters.  See *Note
Printcap Database::

   for details.


File: LPRng-HOWTO.info,  Node: AIX,  Next: Appletalk Support,  Prev: Linux,  Up: System Specific Notes

AIX
===

   This information was supplied by Dirk Nitschke, as of August 1997,
and describes how to install the LPRng package on a workstation running
AIX 4.1.x and possibly 3.x.x as well.  Dirk would be interested in any
comments or corrections.

   Printing on AIX systems is different. AIX provides a general
queueing facility and printing is only one way to use it. You submit a
print job to a print queue using one of the commands `qprt', `enq'. You
can use the BSD or System V printing commands `lpr' or `lp', too. The
qdaemon watches all (general) queues and knows how to handle your job.
A (general) queue is defined in the file `/etc/qconfig'. The format of
this file is different from the `printcap' format.

   OK, how to replace the AIX printing system? There is no group
`daemon' on AIX. Therefore you have to change the default group for
file ownership and process permissions. We decided to use the `printq'
group. The user `daemon' exists on AIX but we have chosen `lpd' as the
user who runs `lpd' and all filters and owns the spooling directories.
You can change the values for `group' and `user' in your `lpd.conf'
file or in the sources `src/common/vars.c'. This is an example for
`lpd.conf':
     # Purpose: group to run SUID ROOT programs
     #   default group=daemon
     group=printq
     # Purpose: server user for SUID purposes
     #   default user=daemon
     user=lpd

   Compile and install the LPRng package. Create your `printcap',
spooling directories, accounting and logfiles and so on.  Don't forget
to use *Note LPRng's little helper: checkpc::  to make sure that all the
permissions are set correctly and the necessary files are created.

   Then stop all print queues defined on your workstation. Use
     # chque -q queuename -a "up = FALSE"

   for this (yes, blanks around `=' are needed).

   If you have local printers attached to your system you will have an
`lpd' running. Stop this daemon using SMIT (Print Spooling, Manage
Print Server, Stop the Print Server Subsystem). Choosing `both' also
removes `lpd' from `/etc/inittab'. Maybe it's faster to do this by hand:
     # stopsrc -p'pid of /usr/sbin/lpd'
     # rmitab "lpd"

   Now delete all print queues (managed by qdaemon) defined on your
system. You can use SMIT for this or the commands `[lcub
]mk,ch,rm[rcub  ]que', `[lcub  ]mk,ch,rm[rcub  ]quedev', `[lcub
]mk,ch,rm[rcub  ]virprt'. The SMIT fast path is `smit rmpq'.

   To start the new `lpd' at system startup you have to add an entry to
`/etc/inittab':
     # mkitab "lpd:2:once:/full/path/lpd"

   Some work has to be done if have have a local printer attached to
your workstation. You have to create a device file like `/dev/lp0'. The
SMIT fast path for this is `smit mkdev'. Choose `Printer/Plotter' and
then `Printer/Plotter Devices'. Now `Add a Printer/Plotter'. To create
a parallel printer device select the following:
     Plotter type:              opp Other parallel printer
     Printer/Plotter Interface: parallel
     Parent Adapter:            ppa0 Available

   Now define the characteristictics of the device:
     Port Number: p

   (`p' is for parallel).  Go to the field
     Send all characters to printer UNMODIFIED   no

   and select `yes'! We have had a lot of trouble with `no'.  This is
very important! Expect erroneous output if you choose `no'. If you have
already created a device file, change the characteristictics! SMIT's
fast path is `smit chdev'.

   Finally remove all AIX printing commands like `qprt', `lp',
`cancel', `lpr', `lprm'. You will find a lot of them in `/usr/bin'. Do
not remove `enq' and friends if you want to use the general queueing
facility.

   Now you can start your new `lpd'.


File: LPRng-HOWTO.info,  Node: Appletalk Support,  Next: Apple to LPRng Printing,  Prev: AIX,  Up: System Specific Notes

Appletalk Support
=================

   Netatalk is used to communicate from TCP/IP to Appletalk printers
and vice versa.  The netalk distribution FAQ is at:

   http://www.umich.edu/~rsug/netatalk

   There are two issues with using netatalk.  The first issue has to do
with printing to LPRng-served printers from Macs.  The second issue has
to do with printing from LPRng to network printers that speak AppleTalk.


File: LPRng-HOWTO.info,  Node: Apple to LPRng Printing,  Next: LPRng to Appletalk Printing,  Prev: Appletalk Support,  Up: System Specific Notes

Apple to LPRng Printing
=======================

   After you have installed and gotten netatalk working, you can use
the following configuration file to print from a Macintosh to an LPRng
printer.
     Date: Tue, 30 Sep 1997 00:04:58 -0400 (EDT)
     From: Edan Idzerda <edan@mtu.edu>
     To: lprng@iona.com
     Subject: Re: [LPRng] Netatalk configuration file
     > Somebody posted a very nice Netatalk papd.conf file
     > that showed the setup for LPRng.  If anybody has this
     > handy could you post it?
     Well, *I* use:
     Your 32 Character Printer Name:\
             :pr=|/your/path/to/lpr -Pprintername
             :ppd=/your/path/to/ppd/files/yourprinter.ppd
     --
     Edan Idzerda    <edan@mtu.edu>
     System Administrator -- Michigan Technological University, Houghton MI USA


File: LPRng-HOWTO.info,  Node: LPRng to Appletalk Printing,  Next: SAMBA Support,  Prev: Apple to LPRng Printing,  Up: System Specific Notes

LPRng to Appletalk Printing
===========================

   The netatalk package comes with a PostScript filter called `psf'.
After compilation, it is in (e.g.) `netatalk-1.4b2/etc/psf' and will be
installed in (e.g.) `/usr/local/atalk/etc/'.  After installation, there
will also be a directory `/usr/local/atalk/etc/filters' that contains
`ifpap', `ofpap', et al.  These are just symlinks to `psf', and `psf'
will do the appropriate thing based on how it was invoked.  If there's
a 'pap' in the name, `psf' uses AppleTalk to talk to the printer.  See
psf(8) for more information.

   A printcap entry for a network printer looks like the following:
     dave|Dave's 32 Character Printer Name
         :sd=/var/spool/lpd/dave
         :if=/usr/local/atalk/etc/filters/ifpap
         :of=/usr/local/atalk/etc/filters/ofpap
         :lp=/var/spool/lpd/dave/null

   There are three caveats to using netatalk this way.
  1. The first is that `psf' (i.e., the filters) needs to run as root.
     You can accomplish this in one of two ways.  The first requires
     LPD to run the programs as root:
          # ROOT_CFLAG=-DROOT_PERMS_TO_FILTER_SECURITY_LOOPHOLE

     The filter lines then need to look like the following:
              :if=ROOT /usr/local/atalk/etc/filters/ifpap
              :of=ROOT /usr/local/atalk/etc/filters/ofpap

     The alternative is to make `psf' SETUID root.  To minimize the
     risk, you may want to make `psf' executable only by group `daemon'.
     (I haven't tested the first option.  I'm currently using the
     second option.)

  2. The second caveat is that each network printer needs a `.paprc' in
     its spool directory.  For instance, `/var/spool/dave/.paprc' looks
     like this:
          Dave's 32 Character Printer Name:LaserWriter@Your AppleTalk Zone

     See psf(8) and pap(1) for more information.

  3. The third caveat concerns the lp line in the printcap entry.  For a
     single printer, this can be `/dev/null'.  If the host spools to
     more than one AppleTalk printer, you shouldn't use `/dev/null' for
     lp.  You should use `mknod' to create a null device for each
     printer.  See psf(8).

     Chad Mynhier <mynhier@cs.utk.edu>
     Lab Engineer, CS Department
     University of Tennessee, Knoxville


File: LPRng-HOWTO.info,  Node: SAMBA Support,  Next: Printer Specific notes,  Prev: LPRng to Appletalk Printing,  Up: System Specific Notes

SAMBA Support
=============

   From the http://www.samba.org Web Site.

* Menu:

* What is SMB::
* Samba and LPRng::


File: LPRng-HOWTO.info,  Node: What is SMB,  Next: Samba and LPRng,  Up: SAMBA Support

What is SMB
-----------

   This is a big question.

   The very short answer is that it is the protocol by which a lot of
PC-related machines share files and printers and other information such
as lists of available files and printers. Operating systems that
support this natively include Windows NT, OS/2, and Linux and add on
packages that achieve the same thing are available for DOS, Windows,
VMS, Unix of all kinds, MVS, and more. There is no reason why Apple
Macs and indeed any Web browser should not be able to speak this
protocol, and current development (in which the Samba team is heavily
involved) is aimed at exactly that. Alternatives to SMB include
Netware, NFS, Appletalk, Banyan Vines, Decnet etc; many of these have
advantages but none are both public specifications and widely
implemented in desktop machines by default.

   The Common Internet Filesystem is what the new SMB initiative is
called. For details watch http://www.samba.org.

   `WHAT CAN SAMBA DO?'

   Here is a very short list of what samba includes, and what it does.
   *  a SMB server, to provide Windows NT and LAN Manager-style file
     and print services to SMB clients such as Windows 95, Warp Server,
     smbfs and others.

   *  a Netbios (rfc1001/1002) nameserver, which among other things
     gives browsing support. Samba can be the master browser on your
     LAN if you wish.

   *  a ftp-like SMB client so you can access PC resources (disks and
     printers) from unix, Netware and other operating systems

   *  a tar extension to the client for backing up PCs

   For a much better overview have a look at the web site at
http://www.samba.org and browse the user survey.

   Related packages include:
   *  smbfs, a Linux-only filesystem allowing you to mount remote SMB
     filesystems from PCs on your Linux box. This is included as
     standard with Linux 2.0 and later.

   *  tcpdump-smb, a extension to tcpdump to allow you to investigate
     SMB networking problems over netbeui and tcp/ip.

   *  smblib, a library of smb functions which are designed to make it
     easy to smb-ise any particular application.

   `FTP SITE and WEB SITE'

   The main anonymous ftp and web site for this software is found using
http://www.samba.org.

   As well as general information and documentation, this also has
searchable archives of the mailing list and a user survey that shows
who else is using this package. Have you registered with the survey
yet? :-)


File: LPRng-HOWTO.info,  Node: Samba and LPRng,  Prev: What is SMB,  Up: SAMBA Support

Samba and LPRng
---------------

   The SAMBA code is very easy to configure.  See the SAMBA
documentation for details,  but you only need to modify the samba.conf
file and put in the pathnames of the LPRng facilities.  The following
is a sample.

     From: Sascha Ottolski <alzhimer@cs.tu-berlin.de>
     Subject: Re: [LPRng] lprng-3.2.6 and smb on Linux
     webnut@conc.tds.net said:
     
      I have samba sending print from Win95 machines to LPRng.  The key to
      making it work is in the samba.conf file in the [global] section:
     
     [global]
         printing = lprng
         print command = /usr/local/bin/lpr  -P%p %s -r
         lpq command   = /usr/local/bin/lpq  -P%p
         lprm command  = /usr/local/bin/lprm -P%p %j
         printcap name = /etc/printcap
         load printers = no
     [printers]
        comment = All Printers
        path = /tmp
        browseable = no
        printable = yes
        guest ok = no
        writable = no
        create mode = 0700
     
     Note: the path= value specifies the spool directory where
     the print files are temporarily stored.  This should NOT
     be the LPRng spool directory,  but some other directory that
     Samba has write permissions for.

     From: "Pascal A. Dupuis" <dupuis@lei.ucl.ac.be>
     Subject: Re: LPRng-3.2.10 and SAMBA

   I include the smbprint script used to send stdin to a NetBEUI
printer.
     #!/bin/sh -x
     # This script is an input filter for printcap printing on a unix machine. It
     # uses the smbclient program to print the file to the specified smb-based
     # server and service.
     # For example you could have a printcap entry like this
     #
     # smb:lp=/dev/null:sd=/usr/spool/smb:sh:if=/usr/local/samba/smbprint
     #
     # which would create a unix printer called "smb" that will print via this
     # script. You will need to create the spool directory /usr/spool/smb with
     # appropriate permissions and ownerships for your system.
     #
     # The /usr/spool/smb/.config file should contain:
     #   server=PC_SERVER
     #   service=PR_SHARENAME
     #   password="password"
     #
     # Set these to the server and service you wish to print to
     # In this example I have a WfWg PC called "lapland" that has a printer
     # exported called "printer" with no password.
     #
     # E.g.
     #   server=PAULS_PC
     #   service=CJET_371
     #   password=""
     # Should read the following variables set in the config file:
     #   server, service, password
     config_file=.config
     eval `cat $config_file`
     # echo "server $server, service $service" 2>&1
     (
     # NOTE You may wish to add the line `echo translate' if you want automatic
     # CR/LF translation when printing.
     #       echo translate
         echo "print -"
         cat
     ) | /usr/local/bin/smbclient "\\\\$server\\$service" \
        $password -U $server -N -P
     # comment preceeding line and uncomment following
     # to just test for correct filter working
     #) | cat > /dev/null


File: LPRng-HOWTO.info,  Node: Printer Specific notes,  Next: HP Deskjet,  Prev: SAMBA Support,  Up: System Specific Notes

Printer Specific notes
======================

   This is a small collection of miscellaneous notes about printers and
applications.


File: LPRng-HOWTO.info,  Node: HP Deskjet,  Next: HP LaserJet IIISiMX,  Prev: Printer Specific notes,  Up: System Specific Notes

HP Deskjet
==========

     From: jarausch@igpm.rwth-aachen.de (Helmut Jarausch)
     Subject: Re: Using gs (ghostscript) as a filter?
     To: lprng@iona.com
     Cc: Rick Gaine <rgaine@nbcs.rutgers.edu>
     Sender: majordomo-owner@iona.com
     Reply-To: lprng@iona.com
     >>
     >> Hello All:
     >>
     >> I would like to use LPRng 3.1.4 with an HP LaserJet 4P.  I'd like to be
     >> able to use gs to convert PostScript files so that I can print them on my
     >> HP 4P.  Can I do this with LPRng?  If so, could someone semd me a printcap
     >> entry?  I'd appreciate it.  I am not sure how I will be cconnecting the
     >> printer yet, but I am thinking either serial or network.  Probably serial
     >> though.  Thanks for any help.

   This printcap works for my Deskjet:
     djps
         :cm=Local Deskjet(GhostScript)
         :sd=/var/spool/djps:sf:sh:mx#0
         :lp=/dev/plp
         :if=/usr/local/bin/LPRng/ps_to_deskjet:

   and this is the script
/usr/local/bin/LPRng/ps[lowbar]to[lowbar]deskjet
     #!/bin/sh
     nice -19 /usr/local/bin/gs -sDEVICE=cdj550 -sPAPERSIZE=a4 \
         -sOutputFile=- -q -r300 -

     Helmut Jarausch
     Lehrstuhl f. Numerische Mathematik
     Institute of Technology
     RWTH Aachen
     D 52056 Aachen, Germany


File: LPRng-HOWTO.info,  Node: HP LaserJet IIISiMX,  Next: HP JetDirect Interface,  Prev: HP Deskjet,  Up: System Specific Notes

HP LaserJet IIISiMX
===================

     > From majordomo-owner@iona.com Mon Aug 31 11:17:26 1998
     > To: lprng@lprng.org
     > Subject: [LPRng] problems printing PS-level2 jobs on LJIIIsi's...
     > Date: Mon, 31 Aug 1998 15:06:22 -0400
     > From: "John Saroglou" <johny@yorku.ca>
     >
     > Greetings...
     >
     > I'm wondering if someone got around the problem of printing
     > Postscript(R) Level 2  jobs on Laser Jet IIIsi printers.
     > Our printers are direct network printers talking to a
     > print server running solaris 2.6 and lprng-3.5.1.
     >
     > Is there a fix (possible drivers?) for such problem?
     >
     > Thanks in advance.

   The LaserJet IIISi does not support PostScript level 2, only level 1
(really, it is called 3SiMX).  The Windows (you are under Windows,
right?) HP driver for 3Si/3Si MX PostScript should produce only PS
level 1.

   Beware: latest version of Adobe Windows PS driver produces *ONLY* PS
level 2.  So if you have (or receive) level 2 files, read them using
ghostscript and print a screen dump :-) or as a bitmap.

   You can also convert them into PDF (using either Adobe distiller or
ghostscript ps2pdf) then use `acroread' to print the result.
`Acroread' can produce either level 1 or level 2 PostScript. THE
definite solution!

   This trouble has nothing to do with the way they are connected, it
is only a driver problem.  I believe that HP had once a PS level2
update, but the price was so high that buying a new printer was a
better solution!
     Bertrand
     --
     | Bertrand DECOUTY              | mailto:Bertrand.Decouty@irisa.fr   |
     | IRISA - INRIA (Atelier)       | PHONE : 0299847346 / 0299847100    |
     | Campus de Beaulieu            | FAX   : +33 (0) 299842534          |
     | F-35042 Rennes Cedex - FRANCE | http://www.irisa.fr/               |


File: LPRng-HOWTO.info,  Node: HP JetDirect Interface,  Next: Lexmark Printers,  Prev: HP LaserJet IIISiMX,  Up: System Specific Notes

HP JetDirect Interface
======================

   The  HPJetDirect  card  can  be configured through the front panel
or through a set of network files.  Here is a summary of  the  methods
used  from  UNIX  systems, or when you are desperate, to configure the
printer.

* Menu:

* Setting Up IP Networking and Address::
* BOOTP Information::
* Paper Tray Selection::


File: LPRng-HOWTO.info,  Node: Setting Up IP Networking and Address,  Next: BOOTP Information,  Up: HP JetDirect Interface

Setting Up IP Networking and Address
------------------------------------

   You can set the network address from the front panel.  Reset  the
printer, put it in offline mode.  and then use the MENU, +-, SELECT
keys as follows:
      MENU  -> MIO MENU (use MENU to display MIO MENU)
      ITEM  -> CFG NETWORK=NO*
      +     -> CFG NETWORK=YES
      ENTER -> CFG NETWORK=YES*
      ITEM  -> TCP/IP=OFF* (use ITEM to display TCP/IP)
      +     -> TCP/IP=ON
      ENTER -> TCP/IP=ON*
      ITEM  -> CFG TCP/IP=NO* (use ITEM to display TCP/IP)
      +     -> CFG TCP/IP=YES
      ENTER -> CFG TCP/IP=YES*
      ITEM  -> BOOTP=NO*
          (Enable BOOTP if you want to - see below)
      ITEM  -> IP BYTE 1=0*
          This is IP address MSB byte.
          Use +- keys to change value, and then ENTER to change
          Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> SM BYTE 1=255*
           This is the subnet mask value
          Use +- keys to change value, and then ENTER to change
          Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> LG BYTE 1=255*
          This is the Syslog server (LoGger) IP address
          Use +- keys to change value, and then ENTER to change
          Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> GW BYTE 1=255*
          This is the subnet gateway (router) IP address
          Use +- keys to change value, and then ENTER to change
          Use ITEM keys to get IP BYTE=2,3,4
      ITEM  -> TIMEOUT=90
           This is the connection timeout value.  It puts a limit
          on time between connections.  A value of 10 is reasonable.


File: LPRng-HOWTO.info,  Node: BOOTP Information,  Next: Paper Tray Selection,  Prev: Setting Up IP Networking and Address,  Up: HP JetDirect Interface

BOOTP Information
-----------------

   If  you have a bootp server, you can put this information in  the
bootptab  file.   To  use this, you must enable the bootp  option  on
the printer.  The T144 option specifies a file to be read from the
bootp server.  This file is read by using  the  TFTP  protocol, and you
must have a TFTPD server enabled.  Here is a sample bootptab entry.
     # Example /etc/bootptab: database for bootp server (/etc/bootpd).
     # Blank lines and lines beginning with '#' are ignored.
     #
     # Legend:
     #
     #       first field -- hostname
     #                       (may be full domain name)
     #
     #       hd -- home directory
     #       bf -- bootfile
     #       cs -- cookie servers
     #       ds -- domain name servers
     #       gw -- gateways
     #       ha -- hardware address
     #       ht -- hardware type
     #       im -- impress servers
     #       ip -- host IP address
     #       lg -- log servers
     #       lp -- LPR servers
     #       ns -- IEN-116 name servers
     #       rl -- resource location protocol servers
     #       sm -- subnet mask
     #       tc -- template host (points to similar host entry)
     #       to -- time offset (seconds)
     #       ts -- time servers
     #
     # Be careful about including backslashes where they're needed.  Weird (bad)
     # things can happen when a backslash is omitted where one is intended.
     #
     peripheral1:
     :hn:ht=ether:vm=rfc1048:
     :ha=08000903212F:
     :ip=190.40.101.22:
     :sm=255.255.255.0:
     :gw=190.40.101.1:
     :lg=190.40.101.3:
     :T144="hpnp/peripheral1.cfg":

   If  you  are  using the T144 option, you will need to create the
configuration file.  The sample configuration file from the HP Direct
distribution is included below.
     #
     # Example HP Network Peripheral Interface configuration file
     #
     # Comments begin with '#' and end at the end of the line.
     # Blank lines are ignored.  Entries cannot span lines.
     
     # Name is the peripheral (or node) name.  It is displayed on the peripheral's
     # self-test page or configuration plot, and when sysName is obtained through
     # SNMP.  This name can be provided in the BOOTP response or can be specified
     # in the NPI configuration file to prevent the BOOTP response from overflowing
     # the packet.  The domain portion of the name is not necessary because the
     # peripheral does not perform Domain Name System (DNS) searches.  Name is
     # limited to 64 characters.
     
     name: picasso
     
     # Location describes the physical location of the peripheral.  This is the
     # value used by the interface for the MIB-II sysLocation object.  The default
     # location is undefined.  Only printable ASCII characters are allowed.
     # Maximum length is 64 characters.
     
     location: 1st floor, south wall
     
     # Contact is the name of the person who administers or services the peripheral
     # and may include how to contact this person.  It is limited to 64 characters.
     # This is the value used by the interface for the MIB-II sysContact object.
     # The default contact is undefined.  Only printable ASCII characters are
     # allowed.  Maximum length is 64 characters.
     
     contact: Phil, ext 1234
     
     # The host access list contains the list of hosts or networks of hosts
     # that are allowed to connect to the peripheral.  The format is
     # "allow: netnum [mask]", where netnum is a network number or a host IP
     # address.  Mask is an address mask of bits to apply to the network number
     # and connecting host's IP address to verify access to the peripheral.
     # The mask usually matches the network or subnet mask, but this is not
     # required.  If netnum is a host IP address, the mask 255.255.255.255 can
     # be omitted.  Up to ten access list entries are permitted.
     
     # to allow all of network 10 to access the peripheral:
     allow: 10.0.0.0  255.0.0.0
     
     # to allow a single host without specifying the mask:
     allow: 15.1.2.3
     
     # Idle timeout is the time (in seconds) after which an idle
     # print data connection is closed.  A value of zero disables
     # the timeout mechanism.  The default timeout is 90 seconds.
     
     idle-timeout: 120
     
     # A community name is a password that allows SNMP access to MIB values on
     # the network peripheral.  Community names are not highly secure; they are
     # not encrypted across the network.  The get community name determines which
     # SNMP GetRequests are responded to.  By default, the network peripheral
     # responds to all GetRequests.  The get community name is limited to 32
     # characters.
     #
     # For hpnpstat and hpnpadmin, the community name can be stored in
     # /usr/lib/hpnp/hpnpsnmp.
     
     get-community-name: blue
     
     # The set community name is similar to the get community name.  The set
     # community name determines which SNMP SetRequests are responded to.  In
     # addition, SetRequests are only honored if the sending host is on the
     # host access list.  By default, the network peripheral does not respond
     # to any SetRequests.  The set community name is limited to 32 characters.
     #
     # The set community name can come from /usr/lib/hpnp/hpnpsnmp
     # if it is the same as the get community name.  We recommend that the
     # set community name be different from the get community name though.
     
     set-community-name: yellow
     
     # SNMP traps are asynchronous notifications of some event that has occurred.
     # SNMP traps are useful only with network management software.  Traps are
     # sent to specific hosts and include a trap community name.  Up to four
     # hosts can be sent SNMP traps.   The trap community name is limited to
     # 32 characters.  The default name is public.
     
     trap-community-name: red
     
     # The SNMP trap destination list specifies systems to which SNMP
     # traps are sent.  Up to four IP addresses are allowed.  If no
     # trap destinations are listed, traps are not sent.
     
     trap-dest: 15.1.2.3
     trap-dest: 15.2.3.4
     
     # The SNMP authentication trap parameter enables or disables the sending
     # of SNMP authentication traps.  Authentication traps indicate that an SNMP
     # request was received and the community name check failed.  By default,
     # the parameter is off.
     
     authentication-trap: on
     
     # The syslog-facility parameter sets the source facility identifier that the
     # card uses when issuing syslog messages.  Other facilities, for example,
     # include the kernel (LOG_KERN), the mail system (LOG_MAIL), and the spooling
     # system (LOG_LPR).  The card only allows its syslog facility to be configured
     # to one of the local user values (LOG_LOCAL0 through LOG_LOCAL7).  The
     # selectable option strings, local0 through local7 (configured to LOG_LOCAL0
     # through LOG_LOCAL7, respectively) are case insensitive.  The default
     # syslog-facility for the card is LOG_LPR.
     
     syslog-facility: local2
     
     # This parameter allows the card to treat hosts on other subnets as if the
     # hosts were on the card's subnet.  This parameter determines the TCP
     # Maximum Segment Size (MSS) advertised by the card to hosts on other subnets
     # and affects the card's initial receive-window size.  The card will use a
     # TCP MSS of 1460 bytes for local hosts, and 536 bytes for a non-local host.
     # The default is off, that is, the card will use the maximum packet sizes
     # only on the card's configured subnet.
     #
     # The configuration utility does not allow access to this parameter.  If you
     # want to configure it, you must manually edit the NPI configuration file
     # and add it to the bottom of the entry for the network peripheral.
     
     subnets-local: on
     
     # This parameter affects how the card handles TCP connection requests from
     # the host.  By default, the JetDirect MPS card will accept a TCP connection
     # even if the peripheral is off-line.  If this parameter is set to "on", then
     # the card will only accept a TCP connection when the peripheral is on-line.
     
     old-idle-mode: off


File: LPRng-HOWTO.info,  Node: Paper Tray Selection,  Prev: BOOTP Information,  Up: HP JetDirect Interface

Paper Tray Selection
--------------------

   Be careful with your paper tray selection.  You should configure the
printer,  using the front panel switches,  to select the FIRST paper
tray.  See your printer documentation on this.  Unfortunately,
different models of HP printers have different methods of handling
paper trays.


File: LPRng-HOWTO.info,  Node: Lexmark Printers,  Next: Tektronix Phaser Printers,  Prev: HP JetDirect Interface,  Up: System Specific Notes

Lexmark Printers
================

   Some Lexmark printers do not send `end of job' status back unless
configured to do so.  Here is what is needed to force this.
     Date: Wed, 21 Jan 1998 18:25:50 -0600 (CST)
     From: Matt White <whitem@bofh.usask.ca>
     To: lprng@iona.com
     Subject: Re: [LPRng] ifhp with Lexmark Optra N printer
     
     On Wed, 21 Jan 1998, Simon Greaves wrote:
     
     > Apologies in advance if this is way off mark, but we've been evaluating a
     > commercial print charging package (Geomica) which works by talking to the
     > printer in what I think is a similar way to the ifhp filters. Lexmarks are
     > currently a big headache because they seem to fail to return the message
     > that they have finished printing which screws things up somewhat. In our
     > case, it is believed to be a problem with the Lexmark firmware which they
     > are looking into.
     
     There is a fix for that...it is originally from the Lexmark 4039 series,
     but it still works on the Optra S 1650 machines that we have (and should
     work on the rest of the optra line).  Just send this little chunk of
     postscript to the printer once:
     
     -----------snip----------
     %! Postscript utility file to set the 4039 printer into synchronous mode
     serverdict begin 0 exitserver
     statusdict begin true setenginesync end
     -----------snip----------
     
     Basically, it causes the printer to wait until it is finished printing
     before actually reporting that it is done.  I've got 3 Optra S printers
     running with ifhp right now with no extra options (just defaults).
     
     ---------------------------------------------------------------------
     - Matt White                         whitem@arts.usask.ca           -
     - Network Technical Support          http://arts.usask.ca/~whitem   -
     - College of Arts & Science          University of Saskatchewan     -
     ---------------------------------------------------------------------


File: LPRng-HOWTO.info,  Node: Tektronix Phaser Printers,  Next: Duplex Printing,  Prev: Lexmark Printers,  Up: System Specific Notes

Tektronix Phaser Printers
=========================

   The Tektronix Phaser printers use the *Note APPsocket::

   network interface.  Here is a Perl based print filter for the
APPsocket protocol.
     From: Russ Thacher [lt    ]thacher@brl.uiuc.edu>
     To: lprng@iona.com
     Subject: Re: [LPRng] Tektronix P450 & psfilter
     
     Having only limited success with the psfilter UDP status port option, and
     not satisfied with the overall slowness of sending print jobs out via
     AppleShare with CAP, I (we) decided to roll our own filter for the Phaser
     450 that speaks AppSocket (sending on TCP 9100, monitoring UDP 9101),
     grabs reliable page counts and can tell the Phaser to switch to
     transparency mode based upon LPRng queue alias ('qq' printcap option).
     
     Here's out printcap entry for the Phaser 450, using our filter:
     
     # Tektronix Phaser 450-2
     phaser450-2|phaser450-2t|phaser440|phaser440t
        :lp=/dev/null:qq
        :af=acct:lf=log:fx=flpv:sh:mx#0:ps=status
        :if=/usr/local/lib/filters/phaserif
        :sd=/var/spool/lpd/phaser450-2
     
     Attached is the Perl filter I wrote that has been very slightly modified
     since its inception by Al Marquardt.  It's written with Solaris in mind
     and is perhaps a little crude, but it works quite well for us.  Feel free
     to modify/use it in any way you like- direct any and all comments to Al
     Marquardt (almar@uiuc.edu).
     
     --
     Russ Thacher
     Systems Administrator, UIUC Bioacoustics Research Lab
     
     -------------- Filter -----------------
     #!/usr/local/bin/perl5
     
     use Getopt::Std;
     use Socket;
     use Sys::Hostname;
     pop @ARGV;
     # Get all the filter options LPRng knows
     getopts('a:b:cd:e:f:h:i:j:k:l:m:n:p:r:s:t:w:x:y:F:P:S:C:H:A:J:L:Q:');
     # set default exit status (JFAIL)
     $! = 1;
     # Set default error messages
     $udpsockerr = "ERROR: Cannot establish UDP socket: $!\n";
     $udpbinderr = "ERROR: Cannot bind to UDP socket: $!\n";
     $udpsenderr = "ERROR: Cannot send UDP status request: !$\n";
     $udprecverr = "ERROR: Cannot receive UDP status report: !$\n";
     $tcpsockerr = "ERROR: Cannot establish TCP socket: $!\n";
     $tcpconnecterr = "ERROR: Cannot connect to TCP socket: $!\n";
     $tcpcloseerr = "ERROR: Cannot close TCP socket: $!\n";
     # Get current time/date
     @MONTHS = ( "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" );
     ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
     $month = $MONTHS[$mon];
     if (length($sec)  == 1)  [lcub  ] $sec = "0$sec" [rcub  ]
     if (length($min)  == 1)  [lcub  ] $min = "0$min" [rcub  ]
     if (length($hour) == 1)  [lcub  ] $hour= "0$hour" [rcub  ]
     if (length($mday) == 1)  [lcub  ] $mday= " $mday" [rcub  ]
     $datestamp = "$month $mday $hour:$min:$sec";
     # Write a 'job begin' line to printer log file
     print STDERR "START: job number $opt_j (dfile: $opt_e)
        for $opt_n\@$opt_h on $opt_P at $datestamp\n";
     # Setup network info for printers
     $phaser4501 = 'phaser450-1';
     $phaser4502 = 'phaser440';
     $udpport = '9101';
     $tcpport = '9100';
     # Setting up UDP socket info so we can get status reports from phasers...
     $myip = gethostbyname(hostname());
     $udpproto = getprotobyname('udp');
     $myudppaddr = sockaddr_in(0, $myip);
     if ($opt_P eq 'phaser450-1') [lcub  ]
       $printip = inet_aton($phaser4501);
     [rcub  ]
     elsif ($opt_P eq 'phaser450-2') [lcub  ]
       $printip = inet_aton($phaser4502);
     [rcub  ]
     $printudppaddr = sockaddr_in($udpport, $printip);
     socket(UDPSOCK, PF_INET, SOCK_DGRAM, $udpproto) or die $udpsockerr;
     bind(UDPSOCK, $myudppaddr) or die $udpbinderr;
     # Setting up TCP socket info so we can send jobs to the printer
     # and read pagecounts
     $tcpproto = getprotobyname('tcp');
     $mytcppaddr = sockaddr_in(0, $myip);
     $printtcppaddr = sockaddr_in($tcpport, $printip);
     socket(TCPSOCK, PF_INET, SOCK_STREAM, $tcpproto) or die $tcpsockerr;
     setsockopt(TCPSOCK, SOL_SOCKET, SO_KEEPALIVE, 0);
     setsockopt(TCPSOCK, SOL_SOCKET, SO_LINGER, 0);
     # Before any printing check to be sure printer is idle
     # If it's not, check every 5 seconds until it is
     defined(send(UDPSOCK, "\r\n", 0, $printudppaddr)) or die $udpsenderr;
     $udpout = "";
     ($printudppaddr = recv(UDPSOCK, $udpout, 100, 0)) or die $udprecverr;
     $realudpout = unpack("a*", $udpout);
     while ($realudpout ne 'status: idle') [lcub  ]
       print STDERR "$opt_P not at idle status.  Cannot start print job.\n";
       defined(send(UDPSOCK, "\r\n", 0, $printudppaddr)) or die $udpsenderr;
       $udpout = "";
       ($printudppaddr = recv(UDPSOCK, $udpout, 100, 0)) or die $udprecverr;
       $realudpout = unpack("a*", $udpout);
       sleep 5;
     [rcub  ]
     # Get the initial page count
     connect(TCPSOCK, $printtcppaddr) or die $tcpconnecterr;
     select TCPSOCK;
     $| = 1;
     select STDOUT;
     print TCPSOCK "%!\n";
     print TCPSOCK "(%%\[ pagecount: )print statusdict /pagecount get exec ";
     print TCPSOCK "(                )cvs print ";
     print TCPSOCK "( \]%%) = flush\n";
     $tcpout = [lt    ]TCPSOCK>;
     if ($tcpout =~ /%%\[ pagecount:.*/) [lcub  ]
       @tcparray = split /\s/, $tcpout;
       $pagecount1 = $tcparray[2];
     [rcub  ]
     # Get current time/date (again, this time for the accounting file)
     ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
     $month = $MONTHS[$mon];
     if (length($sec)  == 1)  [lcub  ] $sec = "0$sec" [rcub  ]
     if (length($min)  == 1)  [lcub  ] $min = "0$min" [rcub  ]
     if (length($hour) == 1)  [lcub  ] $hour= "0$hour" [rcub  ]
     if (length($mday) == 1)  [lcub  ] $mday= " $mday" [rcub  ]
     $datestamp = "$month $mday $hour:$min:$sec";
     # open LPRng accounting file
     if( defined( $opt_a ) && $opt_a && open ACCT, ">>$opt_a" )[lcub  ]
     print ACCT "DEBUG: printer return string= $tcpout";
     print ACCT "start  -p'$pagecount1' -q'$opt_j' -J'$opt_J' -k'$opt_k'"
         . "-n'$opt_n' -h'$opt_h' -P'$opt_P' -F'$opt_F' -t'$datestamp'\n";
     close ACCT;
     [rcub  ]
     # Start shoving data out to printer
     # Set print/transparency by queue name
     if ($opt_Q =~ /.*t/) [lcub  ]
       print TCPSOCK "%!\n";
       print TCPSOCK "mark\n";
       print TCPSOCK "[lcub  ]\n";
       print TCPSOCK " 3 dict begin\n";
       print TCPSOCK " /MediaType null def\n";
       print TCPSOCK " /MediaColor (Transparent) def\n";
       print TCPSOCK " currentdict end setpagedevice\n";
       print TCPSOCK "[rcub  ] stopped cleartomark\n";
     [rcub  ]
     # Shove the rest of the data file out to the printer
     while ($line = [lt    ]STDIN>) [lcub  ]
       print TCPSOCK $line;
     [rcub  ]
     close TCPSOCK or die $tcpcloseerr;
     # Listen for 'status:idle' from printer- this signifies that job is done and
     # we can ask printer for page count
     # we wait until 'status:idle' is received- retrying every 3 seconds
     $realudpout = "";
     while ($realudpout ne 'status: idle') [lcub  ]
       defined(send(UDPSOCK, "\r\n", 0, $printudppaddr)) or die $udpsenderr;
       $udpout = "";
       ($printudppaddr = recv(UDPSOCK, $udpout, 100, 0)) or die $udprecverr;
       $realudpout = unpack("a*", $udpout);
       sleep 2;
     [rcub  ]
     # Now we're ready to grab the final page count from the printer
     socket(TCPSOCK, PF_INET, SOCK_STREAM, $tcpproto) or die $tcpsockerr;
     connect(TCPSOCK, $printtcppaddr) or die $tcpconnecterr;
     print TCPSOCK "%!\n";
     print TCPSOCK "(%%\[ pagecount: )print statusdict /pagecount get exec ";
     print TCPSOCK "(                )cvs print ";
     print TCPSOCK "( \]%%) = flush\n";
     $tcpout = [lt    ]TCPSOCK>;
     if ($tcpout =~ /%%\[ pagecount:.*/) [lcub  ]
       @tcparray = split /\s/, $tcpout;
       $pagecount2 = $tcparray[2];
     [rcub  ]
     close TCPSOCK or die $tcpcloseerr;
     # Get date/time again
     ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
     $month = $MONTHS[$mon];
     if (length($sec)  == 1)  [lcub  ] $sec = "0$sec" [rcub  ]
     if (length($min)  == 1)  [lcub  ] $min = "0$min" [rcub  ]
     if (length($hour) == 1)  [lcub  ] $hour= "0$hour" [rcub  ]
     if (length($mday) == 1)  [lcub  ] $mday= " $mday" [rcub  ]
     $datestamp = "$month $mday $hour:$min:$sec";
     # Update accounting file upon close
     $pages = $pagecount2 - $pagecount1;
     if( defined( $opt_a ) && $opt_a && open ACCT, ">>$opt_a" )[lcub  ]
     print ACCT "DEBUG: printer return string= $tcpout";
     print ACCT "end  -b'$pages' -p'$pagecount2' -q'$opt_j' -J'$opt_J'"
        . "-k'$opt_k' -n'$opt_n' -h'$opt_h' -P'$opt_P' -F'o' -t'$datestamp'\n";
     close ACCT;
     [rcub  ]
     # Write a 'Job End' line to the printer log
     print STDERR "END: job number $opt_j (dfile: $opt_e) "
         . "for $opt_n\@$opt_h on $opt_P at $datestamp\n\n";


File: LPRng-HOWTO.info,  Node: Duplex Printing,  Next: Test Version and Portability Testing,  Prev: Tektronix Phaser Printers,  Up: System Specific Notes

Duplex Printing
===============

   Duplex printing is when you print on both sides of a page.  Some
printers which do duplex printing require that you send them special
commands to force this mode.  This is usually done by the FILTERS.  The
IFHP filter makes a stab at sending the PJL or PostScript commands to
the printer.  Many people have reported problems doing duplex printing,
so  here is a check list.
  1. Make sure you have enough memory for the worst case print job.
     Usually the printer has to rasterize both pages before it can
     produce an impression.  It may require much more memory than you
     expect.

  2. Check your printer manual to discover the EXACT form of the `enter
     duplex mode' command and make sure that either the command is part
     of the job (PJL language at the start of the job, postscript
     header, etc), or that the filter generates the correct form.  Note
     there is a PostScript Printer Description file (PPD) for most
     printers that support PostScript,  and they even have the PJL and
     PostScript code for this in the PPD file.

  3. It has been observed that even with what would apparently be
     sufficient memory,  that many duplex jobs print 'oddly', that they
     are not aligned on the same side in the same way, etc etc.  This
     may not be the fault of the software,  but of the support for
     duplex operation.

  4. Read the IFHP documentation, and create a configuration section in
     the `ifhp.conf' file for your printer.

   I know this is painful,  but until there is a uniform way to get the
correct commands extracted from either PPD or some other database then
this appears to be the only way to do it.
     `Patrick Powell'


File: LPRng-HOWTO.info,  Node: Test Version and Portability Testing,  Prev: Duplex Printing,  Up: System Specific Notes

Test Version and Portability Testing
====================================

   The LPRng code has the ability to run as non-setuid software, and to
use the non-default TCP/IP ports for communication.  This facility
allows a `Test Version' to be run in parallel with the normal LPRng
software.

   To simplify testing and portability issues, a simple test version of
the spool queues and jobs has been supplied with the LPRng distribution.
These queues can be placed in a suitable location (`/tmp' is common)
and the LPRng software tested.

   The test version of the software will use the `LPD[lowbar]CONF'
environment variable to specify the location of the configuration file.
It will read this configuration file on startup and use the values to
override the normal defaults.  Since a user could maliciously set up
their own configuration files with values that could compromise system
security, it is strongly recommended that the test version is not made
SETUID root.  In fact, the LPRng code will chatter messages when the
LPD[lowbar]CONF ability is enabled and it is run as root.

* Menu:

* Compiling the Test Version::
* Setting Up The Test Version Spool Queues::
* Running the Test Version Software::
* Portability Testing::


File: LPRng-HOWTO.info,  Node: Compiling the Test Version,  Next: Setting Up The Test Version Spool Queues,  Up: Test Version and Portability Testing

Compiling the Test Version
--------------------------

   Edit `src/Makefile', and uncomment the indicated line.  Then run
`make' to regenerate the distribution.
     #### ****** TESTING AND SECURITY LOOPHOLE ******************************
     # Define GETENV to allow the LPD_CONFIG environment
     #  variable to be used as the name of a configuration file.  In non-testing
     #  systems,  this is a security loophole.
     #CF := $(CF) -DGETENV


File: LPRng-HOWTO.info,  Node: Setting Up The Test Version Spool Queues,  Next: Running the Test Version Software,  Prev: Compiling the Test Version,  Up: Test Version and Portability Testing

Setting Up The Test Version Spool Queues
----------------------------------------

   The LPRng `TESTSUPPORT' directory contains a set of shell scripts
and files that need to be installed in the appropriate directory.  The
following steps are used.
  1. First, you need to set up your `HOST' environment variable to the
     fully qualified domain name of your host and your `USER'
     environment variable to your user name.  This is done in order to
     get values to put into the Test Version configuration files.

  2. In the `TESTSUPPORT' directory, edit the `Makefile', and specify
     the location of the `Test Version' spool queues.  The default
     location is `/tmp'; since on most systems these files are deleted
     or are available to everybody, a more secure location should most
     likely be used.  `DO NOT USE THE RAW TESTFILE DIRECTORY'.  These
     files need to be copied and placed in another directory.

  3. The `LPD[lowbar]CONF' environment variable should be set to the
     location of the installed `lpd.conf' file.

  4. In the `TESTSUPPORT' directory, run `make'.  This will copy and
     install the necessary files.

   Example:
       CSH:
         setenv HOST [lcub  ]fully qualified domain name[rcub  ];
         setenv USER `whoami`
         setenv LPD_CONF /tmp/LPD/lpd.conf
         set path=( /tmp/LPD $path )
         unsetenv PRINTER
        Example:
           setenv HOST astart1.astart.com
           setenv USER papowell
           setenv LPD_CONF /tmp/LPD/lpd.conf
           set path=( /tmp/LPD $path )
           unsetenv PRINTER
       Bourne Shell:
         HOST=[lcub  ]fully qualified domain name[rcub  ]; export HOST;
         USER='whoami'; export USER
         LPD_CONF=/tmp/LPD/lpd.conf.$HOST; export LPD_CONF
         PATH=/tmp/LPD:$PATH; export PATH
         PRINTER=; export PRINTER
        Example:
           HOST=astart1.astart.com; export HOST
           USER=papowell; export USER
           LPD_CONF=/tmp/LPD/lpd.conf.$HOST; export LPD_CONF
           PATH=/tmp/LPD:$PATH; export PATH
           PRINTER=; export PRINTER
       cd TESTSUPPORT
       make


File: LPRng-HOWTO.info,  Node: Running the Test Version Software,  Next: Portability Testing,  Prev: Setting Up The Test Version Spool Queues,  Up: Test Version and Portability Testing

Running the Test Version Software
---------------------------------

   Set your current directory to the location of the compiled `Test
Version' executables.  Execute the various executables using `./cmd',
or set `.' ` as the first entry in the PATH '.  If it is not the first
entry, then the standard system executables will be used.
  1.  Run `./checkpc'.  this will print out the various values for the
     spool queues in the `Test Version' setup.  If the `t1', `t2',...
     spool queues are not displayed, make sure that the LPD[lowbar]CONF
     environment variable is set correctly and that you are using the
     `Test Version' executable.

  2. Run `./checkpc -f'.  This will fix up the (deliberately
     introduced) problems in the spool queues.

  3. Next,  run `./lpd -F' in one window, and then run `./lpq -a ' in
     another window.  This will check that the server is working.

  4. You can now amuse yourself by sending jobs, setting up permissions
     checking, and other chores.

  5. When everything appears to be working correctly, you can then
     remove the `Test Version' flag from the `src/Makefile', recompile,
     and install the LPRng software.


File: LPRng-HOWTO.info,  Node: Portability Testing,  Prev: Running the Test Version Software,  Up: Test Version and Portability Testing

Portability Testing
-------------------

   You should ignore the information in this section UNLESS you are
trying to do a port to a new or whacko version of a UNIX system.  LPRng
has been tested on just about every version of UNIX that supports POSIX
capabilities, and if it is having problems then most likely it is due
to non-portability issues.  However, if you feel that your system is
not POSIX compatible, or you are having serious problems due to LPRng's
use of the system facilities, feel free to try the following tests.

   Needless to say, if you identify problems,  please inform the
developers and they will most likely assist you in resolving them.

   Set your current directory to the location of the compiled `Test
Version' executables.  Execute the various executables using `./cmd',
or set `.' ` as the first entry in the PATH '.  If it is not the first
entry, then the standard system executables will be used.
  1.  Run `./checkpc -T /tmp/a'.  This will perform a limited set of
     tests of the LPRng functionality.  Note that some of them will
     fail as checkpc is not running SUID ROOT and the `/tmp/a' is not a
     serial device.  ALL of the non-SUID related messages should
     indicate success.

  2.  Set `checkpc' to setuid ROOT, and then rerun the tests.
          chown root checkpc
          chmod u+s checkpc
          ./checkpc -T /tmp/a

     The SETUID tests should now succeed.  If they do not, then you
     have a VERY odd UNIX system, and you are on your own on this one.
     See the comments in `src/common/setuid.c' for help.

  3. Now run tests for serial line control and locking:
          ./checkpc -T /dev/ttya   # or an appropriate UNUSED tty device

     You most likely will have to attach a terminal or modem to the
     serial device in order to cause the `open()' to succeed, as most
     serial device drivers block when `DSR' is not enabled.  Check the
     messages concerning the `stty' actions.  Make sure that the
     appropriate changes have taken place.

     You may get errors about `device lock' failing.  This is due to
     whacko differences in the ways that different UNIX systems (or
     versions of the same UNIX system) implement serial device locking.
     My advice is to ignore this problem unless you INSIST on having
     multiple users of the same serial printing port, in which case you
     are asking for serious trouble, and you are on your own.  I am not
     interested in patches or queries on problems on serial device
     locking problems.  In fact, this facility is only used if the `lk'
     printcap flag is TRUE (default FALSE).



File: LPRng-HOWTO.info,  Node: The Most Frequently Asked Questions,  Next: Filters,  Prev: System Specific Notes,  Up: Top

The Most Frequently Asked Questions
***********************************

   In this section, the Most Frequently Asked Questions have been
placed, together with their answers.  You may notice that some
questions have the same answer, but the symptoms appear differently.

   Some of these answers will reference other material in this FAQ, or
the LPRng man pages.

* Menu:

* Why do I get malformed from address errors?::
* It was working normally then I get connection refused errors::
* Job is not in print queue but it gets printed!::
* Job disappears and is never printed but lpr works::
* I get messages about bad control file format::
* What is RFC 1179 the Line Printer Daemon Protocol?::
* I want to replace lp lpstat etc but my programs need them::
* What are the drawbacks to LPRng?::


File: LPRng-HOWTO.info,  Node: Why do I get malformed from address errors?,  Next: It was working normally then I get connection refused errors,  Up: The Most Frequently Asked Questions

Why do I get malformed from address errors?
===========================================

   This is the number one question asked by most LPRng users who try to
use LPRng with network printers or other systems supporting *Note What
is RFC 1179 the Line Printer Daemon Protocol?::  printing.  For details
about LPRng and RFC1179, see *Note RFC 1179 - Line Printer Daemon
Protocol:: .

   The ` malformed from address ' error is usually reported when trying
to send a print job from LPRng to other BSD LPR or RFC1179 LPR
implementations, or with network connected printers that have a built
in LPR server.  This is due to the following RFC1179 rule:
     Servers originate a connection from ports in the range 721-731.

   WHY?  These are a subset of the 'reserved' ports in UNIX, and normal
users cannot open connections from them.  This provides a small amount
of security from UNIX users on the host 'spoofing' a server.

   IMPLICATION:  in order to do use a reserved port,  the program must
have root privileges.  This means the LPR, LPD, LPQ, etc., programs
must be installed SUID root.  This can open up a can of worms with
regard to security,  but LPRng has been designed to take as much
paranoid care as possible to avoid problems.

   WHAT TO DO:
When installing LPRng,  you will need to install the executables SUID
root.  In the `src/Makefile',  you can remove the comment from the line
     PERMS=SUID_ROOT_PERMS

   and then do ` make install'.  This will install the executables
SUID, and owned by root.


File: LPRng-HOWTO.info,  Node: It was working normally then I get connection refused errors,  Next: Job is not in print queue but it gets printed!,  Prev: Why do I get malformed from address errors?,  Up: The Most Frequently Asked Questions

It was working normally then I get connection refused errors
============================================================

   This message usually appears when you have been sending a large
number of jobs to a network printer or a remote system.  The reason for
this is a combination the above port 721-731 restriction and the TCP/IP
timeouts.  For details, see *Note RFC 1179 - Line Printer Daemon
Protocol:: , but here is a quick explanation.

   A TCP/IP connection is usually specified as between
`srchost:srcport, desthost:destport', although in practice the order of
source (src) and destination (dest) is not important.

   When a connection is established,  each end of the connection
exchanges the necessary flow control and error control information.
When a connection is terminated, each end of the connection will not
accept another connection from the same `host:port' that was previously
active for a specified timeout period, usually 10 minutes.

   Some TCP/IP implementations go further:  they will not allow `ANY'
connection to be `originated' (via the `bind()' system call or API)
from a port that was active, or accepted on a port that was active for
this timeout period.

   Now let us see what happens when we have a client program, which
must originate a connection on port 721-731, connect to the server,
which waits for a connection on port 515.  We first try to make a
connection from host:port `1.1.1.1:721' to `1.1.1.2:515'.  The first
time that we make the connection (or the first connection) we succeed.
We can transfer a file, etc., and then close the connection.  When we
try to reconnect from `1.1.1.1:721' to `1.1.1.2:515' we get an error
such as "address already in use" or "connection refused".

   Luckily,  we can use port 722 to originate a connection, and we can
connect from `1.1.1.1:722' to `1.1.1.2:515'.  We continue on, until we
come to port 731, and then we need to wait for our timeouts.

   SOLUTION:

   It appears that most RFC1179 implementations do not check for the
exact port range 721-731,  but only that the connection originates from
a reserved port, i.e. - in the range 1-1023.  You can extend the range
of ports used by LPRng by changing the
     originate_port=721 731

   value in the defaults (`LPRng/src/common/defaults.c') file or in the
`lpd.conf' file.  I recommend the following:
     originate_port=512 1022

   This is, in fact, now the default in LPRng software.  If you get the
infamous `malformed from address' error message from your spooler, then
you will have to set originate[lowbar]port=721 731,  and live with a
delayed throughput.


File: LPRng-HOWTO.info,  Node: Job is not in print queue but it gets printed!,  Next: Job disappears and is never printed but lpr works,  Prev: It was working normally then I get connection refused errors,  Up: The Most Frequently Asked Questions

Job is not in print queue but it gets printed!
==============================================

   In the original BSD LPD implementation, the LPR program copied users
files to a special spool queue directory, and then caused the LPD
server to peek in the directory and print the files.

   This type of operation required spool directory space, special
SETUID programs, and a slew of headaches in system security and
management.

   The LPR, LPQ, and other user programs in the LPRng suite use TCP/IP
connections and transfer jobs directly to a LPD server running on a
remote host, or even the local host if appropriate.  Note that this
type of operation does not require a LPD server to run on each local
machine.  In fact,  you can have a single host system performing all of
your printing.  This type of operation is very similar to a central
mail server versus individual systems, each having their own mail
server and queues.

   However, some users require or want their jobs to be spooled on the
local host system, and then transferred to the remote printer.  This is
usually the case when some type of processing (filtering) is needed in
order to print the job correctly.  There are several methods that can
be used to force this.

   Method 1: Explicit Printer Address

   You can force a job to be sent directly to the ` pr ' serviced by
the LPD server on `host' by using the form:
     lpr -Ppr@host file

   You can also set the `PRINTER' environment variable to a similar
form, and get the same effect:
     PRINTER=pr@host; export PRINTER;
     lpr file

   Method 2: User and Server Printcap Entries

   If you want to have the benefits of a printcap file, i.e. - you can
use aliases or abbreviations for the names of printers, then here is a
couple of hints.  First, the LPRng software scans the `/etc/printcap'
file for printcap entries, combining information for the same printer
into a single entry.  Information found later in the printcap file will
override earlier information.  In addition, you can tag entries as
either being used for all utilities or just for the LPD server.  Here
are a couple of examples:
     # for all utilities
     pr:lp=pr@host
     # just for LPD
     pr:server
       :lp=/dev/lp
     # more information
     pr:check_for_nonprintable@
     # --- final result for LPR
     pr:lp=pr@host:check_for_nonprintable@
     # --- final result for LPD
     pr:lp=/dev/lp:check_for_nonprintable@

   As you can see, the `server' keyword indicates that the printcap
entry is only for the printer.  The LPR utility will send the job to
the host, while the LPD server will print it on `/dev/lp'.

   Note that the `lp=...' information overrides the `:rp:' (remote
printer) and `:rm:' (remote machine) fields if they are present.

   Method 3: Force sending to server on `localhost'

   The `force[lowbar]localhost' printcap or configuration flag forces
non-LPD applications to send all requests and print jobs to the server
running on the local host.

   This method is similar to the previous one, but has the benefit that
it can be configured as a global (i.e. - applies to all printers)
rather than printer specific.  You can put this in the `/etc/lpd.conf'
file for general application,  or have a printcap entry of the
following form:
     # for all utilities
     pr:lp=pr@host:force_localhost

   The LPD server will ignore the `force[lowbar]localhost' flag, and
send jobs to the `pr' queue on the `host' machine.  However, the LPR,
LPQ, etc., utilities will send their requests to the server running on
the local host.


File: LPRng-HOWTO.info,  Node: Job disappears and is never printed but lpr works,  Next: I get messages about bad control file format,  Prev: Job is not in print queue but it gets printed!,  Up: The Most Frequently Asked Questions

Job disappears and is never printed but lpr works
=================================================

   This is a rather disconcerting problem, and usually occurs when
sending jobs to either a network printer or a nonconforming *Note What
is RFC 1179 the Line Printer Daemon Protocol?::

   print spooler.  For details about LPRng and RFC1179, see *Note RFC
1179 - Line Printer Daemon Protocol:: , but here is a quick explanation.

   An LPD job consists of a control file,  which contains information
about the job,  and one or more data files.  RFC1179 is silent on the
order that jobs are sent;  however some implementations REQUIRE that
the data files be sent first,  followed by the control file.

   SOLUTION:

   Set the `send[lowbar]data[lowbar]first' flag in the printcap for the
particular printer,  or in the `lpd.conf' configuration file.  This is:
     :send_data_first:  (printcap)
     send_data_first    (lpd.conf)

   Note that some printers/servers INSIST on the control file first;
You can clear the flag using `send[lowbar]job[lowbar]first@' if you
need to.


File: LPRng-HOWTO.info,  Node: I get messages about bad control file format,  Next: What is RFC 1179 the Line Printer Daemon Protocol?,  Prev: Job disappears and is never printed but lpr works,  Up: The Most Frequently Asked Questions

I get messages about bad control file format
============================================

   RFC1179 describes a set of fields that MAY appear in the control
file.  It is silent if other ones can appear as well.  Unfortunately,
some implementations will reject jobs unless they contain ONLY fields
from a very small set.  In addition,  RFC1179 is silent about the ORDER
the fields can appear.

   LPRng quite happily will accept jobs from poor or nonconforming
RFC1179 spooler programs, and fix them up to be comformant.  See *Note
Fixing Bad Jobs::

   for details.

   If you are sending jobs to one of a non-conforming spooler, you can
force LPRng to send jobs with only the fields described in RFC1179 by
setting the the ` :bk: ' (BacKwards compatible) flag in the printcap
for your printer.


File: LPRng-HOWTO.info,  Node: What is RFC 1179 the Line Printer Daemon Protocol?,  Next: I want to replace lp lpstat etc but my programs need them,  Prev: I get messages about bad control file format,  Up: The Most Frequently Asked Questions

What is RFC 1179 the Line Printer Daemon Protocol?
==================================================

   RFC1179 defines a standard method by which print jobs can be
transferred using the TCP/IP protocol between hosts.  The standard was
developed by simply detailing the way that a version of the BSD LPD
software did its job.

   From the RFC Introduction:
     RFC 1179 describes a print server protocol widely used on the
     Internet for communicating between line printer daemons (both
     clients and servers).  RFC1179 is for informational purposes only,
     and does not specify an Internet standard.

   Having said this, the RFC then goes on to describe the protocol used
by a particular implementation of LPD.  The problem was that the RFC
did not provide any way to put extensions to the operations into the
system, and failed to specify such interesting details as the order in
which print jobs and their components could be transferred.

   Comment by Patrick Powell ` [lt    ]papowell@astart.com> ':
     Since 1988, there have been a large number of print spooling
     systems developed which claim RFC1179 conformance, but which are
     mutually incompatible.

     Rather than live with the limited capabilities of the RFC1179
     standard, LPRng has extended them by adding capabilities to
     perform remote control of print spoolers, encrypted and
     authenticated data transfers, and other operations missing from
     the RFC1179 specification.  However, great effort was made to be
     backwards compatible with older and other LPD based systems.

     LPRng was developed in order to be able to both accept and provide
     interactions with these systems.  It does so by allowing various
     options to be used to `tune' how print jobs would be exchanged.
     Currently, LPRng can be configured to send and receive print jobs
     between a vast number of the existing spooling systems.  It is
     flexible enough to act as a gateway between non-compatible systems,
     and has provisions to transform jobs from one format to another in
     a dynamic manner.


   For a detailed explanation about LPRng and RFC1179, see *Note RFC
1179 - Line Printer Daemon Protocol:: .


File: LPRng-HOWTO.info,  Node: I want to replace lp lpstat etc but my programs need them,  Next: What are the drawbacks to LPRng?,  Prev: What is RFC 1179 the Line Printer Daemon Protocol?,  Up: The Most Frequently Asked Questions

I want to replace lp lpstat etc but my programs need them
=========================================================

   LPRng was designed as a replacement the BSD printing system. As such,
it inherited its command names and options from the latter. As you
might know, System[nbsp  ]V uses a totally different set of commands,
incompatible with the BSD ones.

   The good news is that the LPRng binaries include an emulation for the
System[nbsp  ]V commands.  (See *Note Replacing UNIX SystemV lp lpstat
Printing Services::

   for details.  Briefly, you create links to the appropriate programs,
and invoke them by the link names.  `Actually, these links are
installed by default in recent versions.'

     ln -s lpr lp
     ln -s lpq lpstat
     ln -s lprm cancel

   If you make these links, calling `lp', `lpstat' and `cancel' will
give you a (partial) SVR4 emulation. They have their own man pages,
which you should read if you need the emulation.

   Since it is a `partial' emulation, you shouldn't expect everything
to work. In particular, I would guess that any script which relies on
the output format of one of your system binaries will break.  Again, see
*Note Replacing UNIX SystemV lp lpstat Printing Services::

   for more details or additional suggestions.


File: LPRng-HOWTO.info,  Node: What are the drawbacks to LPRng?,  Prev: I want to replace lp lpstat etc but my programs need them,  Up: The Most Frequently Asked Questions

What are the drawbacks to LPRng?
================================

   There are many reasons to run LPRng, and most of them are related to
the extra features it has, compared to vanilla BSD LPR. A short list is
given in section *Note What is LPRng?:: . (A more elaborate description
can be found in the LPRng package itself.)

   On the other hand, there are also reasons `not' to switch to LPRng:
   * It is a complex system, and you'll probably need a lot of time to
     get it working.

   * Switching from a System[nbsp  ]V system will require even more
     work.  On the other hand, getting System[nbsp  ]V printing to work
     correctly for you may be even more work.

   * You don't need any of the enhanced features, and are not worried
     about security issues.

   * While there are many resources and books devoted to the old BSD
     printer daemon, documentation for LPRng is rather limited: apart
     from the Introduction documents in the distribution package,
     there's only this HOWTO (at least, to the best of my knowledge).


File: LPRng-HOWTO.info,  Node: Filters,  Next: Spool Queues and Files,  Prev: The Most Frequently Asked Questions,  Up: Top

Filters
*******

   This section gives an overview of how LPRng uses filter programs,
and gives a detailed discussion of how the printcap options and filters
interact.

* Menu:

* What are filters?::
* What are print formats?::
* OF Filter::
* The lpr -p format and pr option::
* The lpr -l format and binary format::
* Job Processing and Printcap Options::
* Filter Command Line Flags::
* Bounce queues and filters: caveats::
* The lpr -p format and :pr filter::
* Changing Filter Formats::
* LPRng Supported Filters::
* IFHP Filter::
* lp[lowbar]pipe Filters::
* apsfilter Filter::
* Using your own filters::


File: LPRng-HOWTO.info,  Node: What are filters?,  Next: What are print formats?,  Up: Filters

What are filters?
=================

   Print filters are one of the most powerful tools in BSD-style printer
systems.

   In general UNIX terms, a `filter' is a program that takes its input
file(s), does something with it, and sends the result to its standard
output. Most UNIX utilities are designed as filters.  (But since you
are a system manager, you should already know that :))

   In the context of a BSD-style print spooler (and also LPRng), the
term `filter' refers to a program that does processing on a file that is
submitted to the printer. As such, it is a specific example of the
general class of programs called `filters'.

   Usually the filter is executed with STDIN reading from the file to be
printed or program generating the output and STDOUT to the printer
device.  STDERR (file handle 2) is redirected to a log file, and file
handle[nbsp  ]3 to an accounting file.

   A filter can be as simple as a `LF' to `CR/LF' translator (the
example used before), or it can incorporate a complete accounting
system, automatic file type translations, or even redirect the job to
another printing system.

   As part of the LPRng project, the following filters are supported.
See the associated documentation for details.
   *  Distributed in the LPRng source distribution
     *Note lpf::

     a very simple CR/LF or passthrough filter.

   *  Distributed in the FILTERS[lowbar]LPRng distribution:
     *Note IFHP Filter::

     HP PCL and PJL printer filters

   *  The supported filters and other facilities are available from
ftp://ftp.astart.com/pub/LPRng


File: LPRng-HOWTO.info,  Node: What are print formats?,  Next: OF Filter,  Prev: What are filters?,  Up: Filters

What are print formats?
=======================

   Options used:
   * `if', `cf', `df', `gf', `nf', `of', `rf', `tf', `vf', `X'`f',
     `[nbsp  ][nbsp  ]Filter programs '

   LPRng has inherited a set of so-called "print formats" from its BSD
ancestor.  The format was originally used to specify the type of file
that was being printed.  The `lpd' daemon would use the print format to
select the required filter for processing the file.  `The default
format is `f".

   The user can specify the format (i.e., the file type) by giving the
appropriate option to `lpr':

   * `-b' or `-l': Binary (literal) file. No processing should be done.
     The `l' format is recorded as the file format.

   * `-c': cifplot(1) output.

   * `-d': TeX DVI file.

   * `-g': Output from the plot(3X) routines.

   * `-n' or `-t': (di)troff output.

   * `-p': Text file that should be pre-processed by the `pr' command,
     and then by the standard text filter.

   * `-v': Benson Varian raster image.

   Alternatively, one can also use `-Fx', where `x' is the format
specifier.  (E.g., `-Fc' instead of `-c'.) This last form also allows
you to use other (non-standard) format specifiers.

   The filter for format `X' is the value for the `Xf' printcap option,
with some minor exceptions.  The following `Xf' options have a
pre-defined meaning.

   * `if' The `f' format filter, i.e. - for the default `f' format.
     All print jobs are passed through this one, unless another format
     is selected.

   *  `cf' Cifplot data filter (for `-c' format).

   *  `df' Filter for DVI files (`-d').

   *  `gf' Graph data filter (`-g').

   *  `nf' Ditroff data filter (`-n').

   * `of' This filter is used for processing the (optional) banner at
     the start and/or end of the print job, and also for the interjob
     separators.  See *Note What are print formats?::  filter for
     details.

   *  `rf' Filter for Fortran style files (`-r').

   *  `tf' Troff filter (`-t').

   *  `vf' (Versatek) raster image filter (`-v').


File: LPRng-HOWTO.info,  Node: OF Filter,  Next: The lpr -p format and pr option,  Prev: What are print formats?,  Up: Filters

OF Filter
=========

   The `of' filter is used to process banners and job separators.  The
`of' filter is responsible for performing appropriate processing of
this information and sending to the printer for action.

   While the various file filters are invoked on a once per print file
basis, the `of' filter is invoked on a once per print job basis.

   This filter is the first one to be started, and should perform
whatever specialized device initialization is needed.  It should also
do whatever accounting procedure is desired for start of job accounting.

   The `of' filter will be given any banner printing or job separation
information for a job.  As part of its operation, it can detect a
specific string, corresponding to a banner print request, and generate
a banner.  (See the *Note Job Processing and Printcap Options::

   for details.)

   During operation, the `lpd' server will send the special `stop'
sequence of `\031\001' to the `of' filter.  The filter must then
suspend itself using a `kill -STOP' operation.  The `lpd' server will
detect that the `of' filter has suspended itself and then will perform
other printing operations.

   After the other printing operations have been completed, the `of'
will then be sent a `kill -CONT' signal.

   This sequence will continue until all information has been printed,
and then the `of' filter's STDIN will be closed.  The filter will then
perform whatever cleanup operations are needed, update accounting or
other information, and exit.

* Menu:

* The filter[lowbar]poll Option::


File: LPRng-HOWTO.info,  Node: The filter[lowbar]poll Option,  Up: OF Filter

The filter[lowbar]poll Option
-----------------------------

   Options used:
   * `filter[lowbar]poll='`interval to check for of output'

   While the `of' filter operation is very simple in concept, there are
some minor implementation and performance problems with it.  The `lpd'
server reads and reports any error messages generated by the `of'
filter on FD 2 (stderr).  The `of' filter may write these error
messages before it exits or suspends itself.  If there is insufficient
buffering in the operating system `pipe' buffer, then the `of' filter
may block until the information is read by the `lpd' server.  If the
`lpd' server is waiting for the filter to exit, then we get a deadlock
situation.

   This deadlock is resolved by having the `lpd' server block for
`filter[lowbar]poll' (default 30) seconds, and then check to see if
there is any input to be read.  This option will effect performance
only when the of filter produces a large amount of debugging or trace
messages, and when there is insufficient system `pipe' buffers to hold
them all.


File: LPRng-HOWTO.info,  Node: The lpr -p format and pr option,  Next: The lpr -l format and binary format,  Prev: OF Filter,  Up: Filters

The lpr -p format and pr option
===============================

   Options used:
   * `pr='`pr program for p format'

   The `-p' format is implemented by sending the file through the
program specified by the `pr' printcap utility (default is `/bin/pr'),
and passing the result to the normal `:if' filter.


File: LPRng-HOWTO.info,  Node: The lpr -l format and binary format,  Next: Job Processing and Printcap Options,  Prev: The lpr -p format and pr option,  Up: Filters

The lpr -l format and binary format
===================================

   The binary (or literal) format is indicated by format type `-l'.
The `if' filter is used to process the file, and is invoked with the
`-c' (`c'ancel processing?) flag.


File: LPRng-HOWTO.info,  Node: Job Processing and Printcap Options,  Next: Filter Command Line Flags,  Prev: The lpr -l format and binary format,  Up: Filters

Job Processing and Printcap Options
===================================

   Much of the flexibility of the LPRng software is obtained from the
ability to control the details of each step of job processing.  The
following section details each step in the processing of a job, and
explains the printcap options used to control each operation.

   Assume the `pr' printcap entry has the form:
     pr
         :lp=/dev/lp  OR  :lp=rp@rm
         :sd=/var/spool/lpd/pr
         :lf=log
         :of=/usr/local/bin/lpf
         :if=/usr/local/bin/lpf

   Assume that we have used the following command to print a set of
files.
     lpr -Ppr file1 file2

   This will create a control file in the `/var/spool/lpd/pr' directory
with the following contents (this is an example - in practice there may
be minor differences between the example and an actual control file):
     Hastart4.astart.com
     J/tmp/file1 /tmp/file2
     CA
     Lpapowell
     Ppapowell
     fdfA002230astart4.astart.com
     N/tmp/file1
     UdfA002230astart4.astart.com
     fdfB002230astart4.astart.com
     N/tmp/file2
     UdfB002230astart4.astart.com

* Menu:

* Opening the Output Device::
* Printing Banner At Beginning::
* Printing Job Files::
* Printing Banner At End::
* Normal Termination::
* Abnormal Termination::
* LPD Spool Queue Processing::


File: LPRng-HOWTO.info,  Node: Opening the Output Device,  Next: Printing Banner At Beginning,  Up: Job Processing and Printcap Options

Opening the Output Device
-------------------------

   Options used:
   *  `achk'`[nbsp  ][nbsp  ]Accounting check at start'

   *  `af='`Accounting File'

   *  `ar'`[nbsp  ][nbsp  ]Remote printer accounting enabled'

   *  `as='`Accounting at start'

   *  `connect[lowbar]grace[num   ]'`[nbsp  ][nbsp  ]Time between jobs'

   *  `connect[lowbar]interval[num   ]'`[nbsp  ][nbsp  ]Connection
     interval'

   *  `connect[lowbar]timeout[num   ]'`[nbsp  ][nbsp  ]Connection
     timeout'

   *  `control[lowbar]filter='`Control file filter'

   *  `ff'`[nbsp  ][nbsp  ]form feed'

   *  `fo'`[nbsp  ][nbsp  ]form feed on open'

   *  `la'`[nbsp  ][nbsp  ]Local printer accounting enabled'

   *  `ld='`leader on open (initialization string)'

   *  `lk'`[nbsp  ][nbsp  ]Lock IO device'

   *  `lp='`IO device pathname'

   *  `nb'`[nbsp  ][nbsp  ]Nonblocking device open'

   *  `network[lowbar]connect[lowbar]grace[num   ]'`[nbsp  ][nbsp
     ]Time between jobs'

   *  `of='`of filter'

   *  `retry[lowbar]econnrefused[num   ]'`[nbsp  ][nbsp  ]Retry if open
     failed'

   *  `retry[lowbar]nolink[num   ]'`[nbsp  ][nbsp  ]Retry if open
     failed'

   *  `rm'`[nbsp  ][nbsp  ]the remote machine to send the job to'

   *  `rp'`[nbsp  ][nbsp  ]the remote print queue to send the job to'

   *  `rw'`[nbsp  ][nbsp  ]device opened RW flag'

   *  `server[lowbar]tmp[lowbar]dir='`temporary directory'

   Sequence of Operations:
  1. During the server operations, it will try to create temporary
     files in the print queue spool directory.  If this is not
     desirable, it will create them in the
     `server[lowbar]tmp[lowbar]dir' directory.

  2. If the accounting file specified by `af' exists, it is opened
     (af[lowbar]fd) and the af[lowbar]fd is passed as file descriptor 3
     to all filters.  If the `af' value has the form
     `af=[verbar]/program' then the program is started and the program
     STDIN is used as af[lowbar]fd.  If the `af' value has the form
     `af=host[percnt]port', then a TCP/IP connection to the
     corresponding port on the remote host is made and the port used as
     af[lowbar]fd.  In the latter two cases,  the filter STDIN (file
     descriptor 0) is actually opened read/write, and is used when
     information is needed from the accounting filter or remote server.
     See *Note Accounting Printcap Options::

     for more information on the LPRng accounting support.

  3. If the `connect[lowbar]grace' value is non-zero and the server is
     opening a device or `network[lowbar]connect[lowbar]grace' is
     non-zero and a network connection is being made, the server will
     pause the specified time.  This is to accommodate devices which
     need a recovery time between jobs.

  4. The `lp' option is checked to determine the type of IO device.
     \begintable[tbp] \begincenter \begintabular|l|l| Format& Meaning\\
     \\ `/pathname'& Absolute pathname of IO device\\ \\ `pr@host'&
     transfer to `pr' on remote `host'\\ \\ `host[percnt]port'& open a
     TCP/IP connection to port on host. host can be name or IP address\\
     \\ `[verbar]filter'& run the filter program; it STDIN will be used
     as device\\ \\ \endtabular \endcenter \endtable

  5. The IO device specified by `lp' is opened write-only or read-write
     if the `rw' flag is true, and the resulting file descriptor is
     io[lowbar]fd.  If the `nb' flag is set, a non-blocking open will
     be done as well.  If the `lk' (lock device) flag is true, the
     device will be locked against use by other LPD servers.

  6. If a `host[percnt]port' combination, a TCP/IP connection will be
     opened to the remote port and the connection will be used as
     io[lowbar]fd.

  7. If a filter program is specified, the filter program will be run
     and the STDIN of the filter will be used as the device file
     descriptor.

  8. If a `rp@rm' combination, or none of the above combinations are
     true and the `rm' and `rp' values are non-zero, then the job will
     be transferred to a remote printer.  The type of operation will be
     a job transfer, rather than printing operation.

  9. If the `connect[lowbar]timeout' value is non-zero, a timeout is
     setup for the device or socket open.  If the device or connection
     open does not succeed within the timeout, then the open operation
     fails.

 10. If a connection is to a network address (i.e. - `connect()' system
     call) and the connection attempt fails with an `ECONNREFUSED'
     error, if the `retry[lowbar]econnrefused' flag is set then the
     connection attempt is retried, but this time using an alternative
     port number.  See *Note RFC 1179 - Line Printer Daemon Protocol::
     for details.  This is repeated until all of the possible
     originating port numbers are exhausted.

 11. If the open or connect operation fails, and the
     `retry[lowbar]nolink' flag is set, then the server will pause for
     a minimum of `connect[lowbar]grace' plus a multiple of
     `connect[lowbar]interval' seconds based on the number of attempts
     before retrying the open operation.  Note that the interval may
     increase as the number of attempts increases.

 12. If printing a job and the `of' filter is specified, it is created
     with its STDOUT (fd 1) attached to the io[lowbar]fd.  Its stdin
     (of[lowbar]fd) will be used in the steps listed below.  If there
     is no `of' filter, then the of[lowbar]fd value will be the
     io[lowbar]fd descriptor.

 13. If transferring a job and the `control[lowbar]filter' option is
     specified, then the program specified by the
     `control[lowbar]filter' value will be run. It will have its STDIN
     set to the control file, and its STDOUT output will be used as the
     new value of the control file to transfer to the remote host.  See
     *Note Filter Command Line Flags::

     for details of options passed to the control filter, and *Note
     Printing Job Files::  for the exit codes of the filter.

 14.  If `la' (local accounting) is true and we are printing a job or
     `ar' (remote accounting) is true and we are transferring a job,
     the `as' value is examined.  If it is a filter (program)
     specification, then the program is started with its STDIN attached
     to `/dev/null' and STDOUT to the io[lowbar]fd, STDERR to the error
     file, and file descriptor 3 to the accounting file descriptor
     af[lowbar]fd.  The lpd program will wait until it terminates, and
     examine the error code for action, as for the filters (see *Note
     Printing Job Files::  below).  If it is a string, then it is
     interpreted, the escape sequences replaced with the appropriate
     information,  and written to the accounting file.

 15. If the `achk' (accounting check) flag is set, a line is read from
     the accounting filter af[lowbar]fd file descriptor.  This line
     should be `accept', otherwise the job processing terminates with a
     JFAIL indication.

 16. If the operation is a job transfer, the operation proceeds as
     outlined in *Note RFC 1179 - Line Printer Daemon Protocol:: , and
     then the *Note Normal Termination::  operations are carried out.

 17. If the operation is a print operation and the `ld' (leader on
     open) value is provided, the string is translated (escapes removed)
     and written to the of[lowbar]fd file descriptor.

 18. If the `fo' (form feed on open) flag is true, then the `ff' (form
     feed) string is translated (escapes removed) and written to the
     of[lowbar]fd file descriptor.


File: LPRng-HOWTO.info,  Node: Printing Banner At Beginning,  Next: Printing Job Files,  Prev: Opening the Output Device,  Up: Job Processing and Printcap Options

Printing Banner At Beginning
----------------------------

   Options used:
   *  `ab'`[nbsp  ][nbsp  ]Always print banner (default FALSE)'

   *  `be='`End banner generator program'

   *  `bl='`Short banner line format'

   *  `bp='`Banner generator program'

   *  `bs='`Start banner generator'

   *  `hl'`[nbsp  ][nbsp  ]Banner (header) Last'

   *  `of='`Banner and File Separator Filter'

   *  `sb'`[nbsp  ][nbsp  ]Short banner (default FALSE)'

   *  `sh'`[nbsp  ][nbsp  ]Suppress header (banners) (default FALSE)'

   Sequence of Operations:
  1. If the `sh' (suppress header) flag is true, no banner is printed,
     and the actions in this section are skipped.

  2. If the `hl' flag is true, the banner is printed at the end of the
     job, and the actions in this section are skipped.

  3. If the user does not supply a banner name, (the `L' line in the
     control file) and `ab' (always print a banner) is false (the
     default), then no banner is printed.  If no name is supplied and
     `ab' is true, then ANONYMOUS is used.

  4. There are two types of banners - short and long.  If the `sb' flag
     is set, then we send the `bl' (banner line) contents directly to
     the of[lowbar]fd; By default the `bl' value is: `bl=$-'C:$-'n Job:
     $-'J Date: $-'t' (See *Note Filter Command Line Flags::

     for details.) This will get translated to:
     `papowell:A Job: file1 file2 Date: Thu Nov 27 23:02:04 PST 1997'

  5. If the `sb' flag is clear, we will generate a long banner using a
     program instead.  If `bs' (start banner) program is specified,
     then it is used to generate a banner, otherwise if the `bp'
     (banner) program is specified, then it is used to generate a
     banner.  If no program is available, we skip the banner generation.
     The banner generator program is started with the normal command
     line flags (see *Note Filter Command Line Flags:: ), with its
     STDOUT attached to the of[lowbar]fd descriptor.  The short banner
     string described in the previous step is written to the STDIN.
     The banner printer is responsible for generating a banner
     appropriate to the printing device.

  6. The `ff' (form feed) string will be interpreted and sent to the
     of[lowbar]fd.


File: LPRng-HOWTO.info,  Node: Printing Job Files,  Next: Printing Banner At End,  Prev: Printing Banner At Beginning,  Up: Job Processing and Printcap Options

Printing Job Files
------------------

   Options used:
   *  `Xf='`Format Filter'

   *  `if='`Default F Format Filter'

   *  `pr='`pr formatting program'

   *  `send[lowbar]job[lowbar]rw[lowbar]timeout='` print job read/write
     timeout '

   *  `send[lowbar]query[lowbar]rw[lowbar]timeout='` status query
     operation read/write timeout '

   *  `sf'`[nbsp  ][nbsp  ]Suppress FF Print File Separators'

   Sequence of Operations: for each job in listed in the control file,
the following operations are done in turn.
  1. If there is an `of' filter present, the suspend string `\031\001'
     is written to of[lowbar]fd and the no further action is taken
     until the of filter is suspended.

  2. The control file line for the job is examined, and the first
     letter of the data file specification is used as the format.

  3. If the format is `p', the job is first processed by the program
     specified by the `pr' program, and the program output used as the
     print file.

  4. If the format is `f', `l', or `p' then the `if' filter is used,
     otherwise the keyword `Xf' is used.  Note that certain formats
     such as `p, a, l', may not be used as formats.

  5. The filter program is started with an appropriate set of command
     line options (see *Note Filter Command Line Flags:: ), and with
     its STDOUT attached to the printing device (io[lowbar]fd), STDERR
     to the log file (`lf'), and file descriptor 3 to the accounting fd
     af[lowbar]fd.

  6. When doing a read/write operation to a device or remote system, a
     timeout can be specified.  When doing a print or job transfer
     operation, the `send[lowbar]job[lowbar]rw[lowbar]timeout' value is
     used.  When doing a status or query operation, the
     `send[lowbar]query[lowbar]rw[lowbar]timeout' value is used.  If a
     write or write operation does not complete within the specified
     timeout seconds, then we have an error condition and job
     processing or the query operation is terminated with JFAIL status.
     If the timeout value is 0, then no timeout is done.

  7.  `lpd' will then wait for the filter to exit.  The exit status can
     be as follows:
          Key      Value   Meaning
          JSUCC    0       Successful
          JFAIL    1, 32   Failed - retry later
          JABORT   2, 33   Abort - terminate queue processing
          JREMOVE  3, 34   Failed - remove job
          JHOLD    6, 37   Failed - hold this job
          Other            Abort - terminate queue processing

  8. If the filter exit status was JSUCC (0), or no error indicated,
     then processing will continue otherwise the job termination takes
     (see *Note Abnormal Termination:: ).

  9. If the `of' filter is present, then it is reactivated with a `kill
     -CONT' signal.

 10. If the `sf' (suppress FF print file separators ) is false, then the
     `ff' (form feed) string will be interpreted and sent to the
     of[lowbar]fd.


File: LPRng-HOWTO.info,  Node: Printing Banner At End,  Next: Normal Termination,  Prev: Printing Job Files,  Up: Job Processing and Printcap Options

Printing Banner At End
----------------------

   Options used:
   *  `hl'`[nbsp  ][nbsp  ]Header (Banner) Last'

   The actions taken in this step are identical to those for the *Note
Printing Banner At Beginning:: , with the exception that the `be' (end
banner program) is used in the procedure rather than the `bs' (start
banner program).


File: LPRng-HOWTO.info,  Node: Normal Termination,  Next: Abnormal Termination,  Prev: Printing Banner At End,  Up: Job Processing and Printcap Options

Normal Termination
------------------

   Options used:
   *  `fq'`[nbsp  ][nbsp  ]Form Feed on Close'

   *  `la'`[nbsp  ][nbsp  ]Local Printer Accounting'

   *  `tr='`Trailer on Close'

   *  `ae='`Accounting at end'

   *  `save[lowbar]when[lowbar]done'`[nbsp  ][nbsp  ]Save when done'

   Sequence of Operations:
  1. If we are printing and the `fq' flag is set and the `sf' (suppress
     interfile FF) flag is set, then the `ff' (form feed) string will
     be interpreted and sent to the of[lowbar]fd.

  2. If we are printing, the `tr' (trailer) string will be interpreted
     and sent to the of[lowbar]fd.

  3. If printing and the `la' (local printer accounting) flag is set or
     transferring a job and the `ar' (remote accounting) flag is set,
     the `ae' is examined and accounting is done as described for the `
     *Note Opening the Output Device::  field.'

  4. If the `of' filter is present, its STDIN is closed, and the `lpd'
     server waits for it to exit.  The exit status is used as described
     above.

  5. The device (io[lowbar]fd) is closed.

  6. The job is marked as completed in the spool queue.

  7. If the `save[lowbar]when[lowbar]done' flag is not specified, the
     job is removed.


File: LPRng-HOWTO.info,  Node: Abnormal Termination,  Next: LPD Spool Queue Processing,  Prev: Normal Termination,  Up: Job Processing and Printcap Options

Abnormal Termination
--------------------

   Options used:
   *  `mail[lowbar]from='`Mail from user name'

   *  `mail[lowbar]operator[lowbar]on[lowbar]error='`Mail to operator
     on error'

   *  `send[lowbar]try[num   ]'`[nbsp  ][nbsp  ]Maximum Print or
     Transfer Attempts'

   *  `save[lowbar]on[lowbar]error'`[nbsp  ][nbsp  ]Do not delete on
     error'

   *  `send[lowbar]failure[lowbar]action='`Action on Failure'

   *  `sendmail='`sendmail path name and options'

   *  `stop[lowbar]on[lowbar]abort'`[nbsp  ][nbsp  ]Stop processing
     queue on filter abort'

   If the job processing terminates abnormally, the following sequence
of events occurs:
  1. The job is marked as having an error during processing.

  2. The LPD server will attempt to kill all filters and other
     associated process by using a sequence of `kill -INT', `kill
     -QUIT', and finally `kill -KILL' operations.

  3. If there is a `mail[lowbar]operator[lowbar]on[lowbar]error' value,
     the specified operator will be mailed an error indication.  The
     `sendmail' option specifies the pathname of the `sendmail' program
     and the options needed to have it read mail addresses from its
     standard input.  For example, `sendmail=/usr/sbin/sendmail -oi -t'
     is a commonly used set of options.

  4. The `mail[lowbar]from' value specifies the user name used for mail
     origination.  If not specified, the default is to use the print
     spool queue or printer name.

  5. If there is a `send[lowbar]failure[lowbar]action' specified, then
     it is decoded and the corresponding action taken.  If the value is
     `remove', `hold', `abort', or `retry', then the job is removed,
     held, aborted, or retried.  If the value is `[verbar]/program',
     the program is executed and the number of attempts are written to
     the filter STDIN.  The exit status of the filter will be used to
     determine the consequent actions.  That is, JSUCC (0) will be
     success, and the standard success action will be taken; JFAIL will
     cause retry, JREMOVE will cause the job to be removed, JHOLD will
     cause the job to be held, JABORT or other status will abort
     processing.

  6. If the status is ABORT and the `stop[lowbar]on[lowbar]abort' flag
     is set, then further processing of jobs is terminated.  The job is
     not removed from the queue.

  7. If the error status indicates removal, and the
     `save[lowbar]on[lowbar]error' flag is clear then the job is
     removed from the spool queue.

  8. If the error status indicates that no further operations should be
     performed on the queue, then the `lpd' server will stop processing
     jobs.

  9. If the error code indicated that the job should be retried, and the
     `send[lowbar]try' value is 0 or the number of attempts is less than
     the `send[lowbar]try' value, then the job is retried.  Between
     each attempt to transfer a job to a remote site.  This pause will
     double after each attempt, reaching a maximum of
     `max[lowbar]connect[lowbar]interval' seconds.  If
     `max[lowbar]connect[lowbar]interval' is 0, there is no limit on
     the interval value.


File: LPRng-HOWTO.info,  Node: LPD Spool Queue Processing,  Prev: Abnormal Termination,  Up: Job Processing and Printcap Options

LPD Spool Queue Processing
--------------------------

   Options used:
   *  `lpd[lowbar]force[lowbar]poll='`Force LPD to periodically poll
     print queues '

   *  `lpd[lowbar]poll[lowbar]time[num   ]'`Time between polls'

   *  `max[lowbar]servers[lowbar]active[num   ]'`Maximum number of
     active servers'

   When the `lpd' server starts, it will fork a set of subserver
processes, each which will handle an individual queue.

   If a system has a large number of queues, then this forking
operation may result in the `lpd' server exhausting the process
resources.  To control this,  the `max[lowbar]servers[lowbar]active'
value restricts the number of active children to the specified value.
If this value is 0, then 50[percnt] of the maximum system processes
value will be used.

   Due to the limits on the number of processes, there may be times
when a job is placed in a queue, but the `lpd' server is unable to
start handling the job.  When all of the children of the main `lpd'
server have exited, the server starts a timer.  After
`lpd[lowbar]poll[lowbar]time' seconds,  it will scan the queues,
looking for jobs to process, and starts a process to service them.  If
it does not find any jobs it remains idle.

   The `lpd[lowbar]force[lowbar]poll' flag causes the server to
periodically poll the queues.  This is useful when there is a high
possibility that jobs could fail to be printed due to high loads on the
server.


File: LPRng-HOWTO.info,  Node: Filter Command Line Flags,  Next: caveats:,  Prev: Job Processing and Printcap Options,  Up: Filters

Filter Command Line Flags
=========================

   Options used:
   *  `bk[lowbar]filter[lowbar]options='`Backwards Compatible Filter
     options'

   *  `bk[lowbar]of[lowbar]filter[lowbar]options='`Backwards Compatible
     OF Filter options'

   *  `bkf'`[nbsp  ][nbsp  ]Backwards Compatible Filters'

   *  `filter[lowbar]ld[lowbar]path='`Filter
     LD[lowbar]LIBRARY[lowbar]PATH environment'

   *  `filter[lowbar]options='`Filter options'

   *  `filter[lowbar]path='`Filter PATH environment'

   *  `of[lowbar]filter[lowbar]options='`OF Filter options'

   *  `pass[lowbar]env='`Environment variables to copy to Filter
     environment'

   *  `pl[num   ]'`line count for page'

   *  `pw[num   ]'`column count for page'

   *  `px[num   ]'`pixel width for page'

   *  `py[num   ]'`pixel length for page'

   A filter (or program) specification in the LPRng printcap database
usually has the form:
     :option=| [flags] /path [arguments]
     :option=[flags] /path [arguments]

   The first case is used where the option value can be a string or
filter, and the second where a program is always expected.  The
following procedure is used to run a filter program.

   The sequence of operations to run a filter is as follows:
  1. The program must be specified with an absolute path name.

  2. By default, the program is run as the user if invoked from a client
     program such as `lpr', `lpc', etc.  If invoked from `lpd',  it is
     run as the `server[lowbar]user' user (default `daemon')
     configuration entry.

  3. The `flags' control how the program is to be run.  The following
     flags are supported:
        * `ROOT' This opens a horrible security loophole, as it will
          run the program as ROOT.  To enable this option, you must set
          various compilation flags, and perform other arcane
          operations.  This is deliberately done to make administrators
          read the warnings and admonitions.  The alternative to ROOT
          is to have a setuid ROOT executable.  Under NO circumstances
          should you run a shell script setuid ROOT, with general
          execute permissions on it.

        * `-$' This very odd looking flag is used to suppress the
          addition of additional command line arguments specified by
          the value of `filter[lowbar]options' to the program command
          line.

  4. If the `-$' flag is not specified, the arguments determined by the
     value of the `bkf' (Berkeley LPD filter compatible flag) flag are
     added to the filter command line.  If `bkf' is false the
     `filter[lowbar]options' are added for OF filters and
     `of[lowbar]filter[lowbar]options' are added for non-OF filters; if
     it is true, then the `bk[lowbar]filter[lowbar]options' and
     `bk[lowbar]of[lowbar]filter[lowbar]options' are added for OF and
     non-OF filters respectively.  \begintable[tbp] \begincenter
     \begintabular|l|l| Option& DefaultValue\\ \\
     `filter[lowbar]options'& $C $F $H $J $L $P $Q $R $Z $a $c $d $e $f
     $h $i $j $k $l $n $p$r $s $w $x $y $-a\\ \\
     `of[lowbar]filter[lowbar]options'& (same as
     `filter[lowbar]options')\\ \\ `bk[lowbar]filter[lowbar]options'&
     $P $w $l $x $y $F $c $L $i $J $C $0n $0h $-a\\ \\
     `bk[lowbar]of[lowbar]filter[lowbar]options'& $w $l $x $y\\ \\
     \endtabular \endcenter \endtable

  5. By default, for programs that are not being invoked as print job
     file filters, the `filter[lowbar]options' arguments are added.
     For print job filters, if the `bkf' flag is set, then the
     `bk[lowbar]filter[lowbar]options' and
     `bk[lowbar]of[lowbar]filter[lowbar]options' entries are used.  The
     default `bk' filter options are the same as originally used with
     the BSD LPR filters.  For the `of' filter, either the
     `of[lowbar]filter[lowbar]options' or
     `bk[lowbar]of[lowbar]filter[lowbar]options' arguments will be
     added.

  6. The program arguments will then be scanned and interpreted.
     Arguments of the form `$'`letter' will be translated into values
     from the print job control file and/or printcap entry.  The
     letters have the following meaning: \begintable[tbp] \begincenter
     \begintabular|l|l| Letter& TranslatedValue\\ \\ `a '& printcap
     `af' (accounting file name)\\ \\ `b '& job size (in K bytes)\\ \\
     `c '& binary file (`l' format for print file)\\ \\ `d '& printcap
     `cd' or `sd' entry\\ \\ `e '& print job data file name (currently
     being processed)\\ \\ `f '& print job original name when spooled
     for printing (N info from control file)\\ \\ `h '& print job
     originating host (H info from control file)\\ \\ `i '& indent
     request (I info from control file)\\ \\ `j '& job number in spool
     queue\\ \\ `k '& print job control file name\\ \\ `l '& printcap
     `pl' (page length)\\ \\ `m '& printcap `co'\\ \\ `n '& user name
     (L info from control file)\\ \\ `p '& remote printer (when
     processing for bounce queue)\\ \\ `r '& remote host (when
     processing for bounce queue)\\ \\ `s '& printcap `sf' (status
     file)\\ \\ `t '& time in common UNIX format\\ \\ `w '& printcap
     `pw' (page width)\\ \\ `x '& printcap `px' (page x dimension)\\ \\
     `y '& printcap `py' (page y dimension)\\ \\ `F '& print file
     format\\ \\ `P '& printer name\\ \\ `S '& printcap `cm' (comment
     field)\\ \\ Capital letter& Corresponding line from control file\\
     \\ [lcub  ]key[rcub  ]& printcap value for `key'\\ \\ \endtabular
     \endcenter \endtable

  7. If there is no value for the specified argument, then the argument
     is removed from the list.  If there is a value, the actual form of
     the substitution is controlled by additional flags as follows.
     \begintable[tbp] \begincenter \begintabular|l|l| Form&
     TranslatedValue\\ \\ ` $x '& `'-x`value" '\\ \\ ` $-x '& `
     '`value" '\\ \\ ` $0x '& ` -x '`value" '\\ \\ ` $'x '& ` -x
     `value' '\\ \\ \endtabular \endcenter \endtable

     Each entry in quotes is treated as a single value, as in /bin/sh.
     The `$'x' does not quote the value.  Combinations of the various
     flags are allowed.  For example, `$-x' would simply substitute the
     value for `x', and then pass the whitespace separated components
     as individual arguments.  This last form is useful for adding in
     additional flags on the command line.

  8. The command line is parsed, metacharacters are ruthlessly stripped
     from all arguments and pathnames and replaced by `[lowbar]'
     (underscores), and an argument list suitable for the `execve'
     system call is formed.

  9. A sanitized environment is set up for the program execution, with
     the following environment variables.  \begintable[tbp] \begincenter
     \begintabular|l|l| ` USER '& User name (client only)\\ \\ `
     LOGNAME '& L control file info\\ \\ ` HOME '& Home directory
     (client only)\\ \\ ` LOGDIR '& Home directory (client only)\\ \\ `
     PATH '& `filter[lowbar]path' configuration information\\ \\ `
     LD[lowbar]LIBRARY[lowbar]PATH '& ` filter[lowbar]ld[lowbar]path '
     configuration information\\ \\ ` SHELL '& `/bin/sh'\\ \\ ` IFS '&
     `" \t"'\\ \\ ` TZ '& Time zone\\ \\ ` SPOOL[lowbar]DIR '& `sd'
     printcap info\\ \\ ` CONTROL[lowbar]DIR '& `cd' printcap info\\ \\
     ` PRINTCAP[lowbar]ENTRY '& printcap info\\ \\ ` CONTROL '& control
     file\\ \\ \endtabular \endcenter \endtable

 10. If the filter is to be run by a client program such as `lpr', then
     the environment variables specified by the `pass[lowbar]env'
     configuration or printcap option will be extracted from the
     environment, have any metacharacters removed, and then placed in
     the environment variable list.  Commonly, the `PGPPASS',
     `PGPPASSFD', and `PGPPATH' are specified.

 11. The program is started, with STDIN, STDOUT, and STDERR attached to
     the appropriate files or file descriptors.  If none is specified,
     then they are attached to `/dev/null'.


File: LPRng-HOWTO.info,  Node: Bounce queues and filters: caveats

Bounce queues and filters: caveats
==================================

   There are a few situations in which a filter of a bounce queue will
behave differently from an ordinary queue.


File: LPRng-HOWTO.info,  Node: The lpr -p format and :pr filter

The lpr -p format and :pr filter
================================

   The `-p' format doesn't behave as expected. Instead of `lpr' running
`pr', the job is forwarded to the `lpd' server, which will use the
program specified by the `:pf' option.  If you do not have the this
program on your server, then job printing will fail.


File: LPRng-HOWTO.info,  Node: Changing Filter Formats,  Next: LPRng Supported Filters,  Prev: pr filter:,  Up: Filters

Changing Filter Formats
=======================

   Use the ` translate[lowbar]format=oNoN...  ' printcap option to
simply rename formats in a print job before forwarding .  Its value
takes the form of old/new pairs of formats. For example:
     translate_format=xf

   The `x' format file will now be renamed with the `f' format before
forwarding.


File: LPRng-HOWTO.info,  Node: LPRng Supported Filters,  Next: IFHP Filter,  Prev: Changing Filter Formats,  Up: Filters

LPRng Supported Filters
=======================

   There already exists a large library of ready-to-use filters. Some of
them have LPRng-specific versions, which can be found at the *Note FTP
Sites:: .

* Menu:

* Filter Distribution Conventions::
* lpf::


File: LPRng-HOWTO.info,  Node: Filter Distribution Conventions,  Next: lpf,  Up: LPRng Supported Filters

Filter Distribution Conventions
-------------------------------

   By convention, most filters are either totally standalone (very
rare), or require a set of support files.  There are two types of
support files: per print queue configuration information and global
support information.

   Since a print filter will execute with the current directory set to
the spool queue directory, most filters expect that per print queue
configuration information should be kept in the spool directory.  Most
`vintage' filters insist on having these files `hidden' with names such
as ".setup".  This can make it difficult for administrators to
determine where the configuration files are.

   It is strongly recommended that filters and information be placed in
commonly accessible directories such as "/usr/local/lib/filters", and
the executables in subdirectories.  This allows the LPRng administrator
to set the privileges on these directories such that only the `lpd'
process can access them.

   Most of the LPRng supported filters can either be used as a `if' or
`of' filter.  The filter will examine the format type passed by the
`-F`X" command line argument, and if it is `o' it will perform as an
`of' filter.

   Alternatively, the filter will check the filename in the pathname by
which is was invoked.  If the name has the substring `of' in the
filename, then it assumes it is to act as an `of' filter.  This allows
symbolic links to be made to a common filter executable, each of which
corresponds to the filter name by which it is to be invoked.

   When a filter is invoked, it is passed a large number of options,
many of which are totally ignored in filter operation.  However, for
many purposes it is necessary to provide options to the filters to
tailor their operation to the particular spool queue needs.

   By convention, all LPRng supported filters use the
     -Tkey=value[,key=value]

   convention for specifying filter configuration option values.


File: LPRng-HOWTO.info,  Node: lpf,  Prev: Filter Distribution Conventions,  Up: LPRng Supported Filters

lpf
---

   Source code: *Note FTP Sites::

   This filter is distributed as part of the LPRng source code, and has
a very limited functionality.  By default, it only translates `\n' to
`\r\n' sequences, and detects the OF Filter Stop sequence when invoked
as an OF filter.
   * Options:
     `-Tcrlf' - suppress `\n' to `\r\n' translation


File: LPRng-HOWTO.info,  Node: IFHP Filter,  Next: lp[lowbar]pipe Filters,  Prev: LPRng Supported Filters,  Up: Filters

IFHP Filter
===========

   Source code: *Note FTP Sites::

   This filter supports a wide variety of Hewlett-Packard printers, or
to be more specific, printers which support the Hewlett-Packard PCL
and/or PJL languages.  In addition, they try to detect PostScript jobs
and send the correct commands to the printers to enable PostScript
rather than PJL operation.

* Menu:

* Printer Capabilities::
* hpif Options::
* Parallel Port Printer::
* Printing Banners::
* Error Logging::
* Accounting Information::
* Accounting::


File: LPRng-HOWTO.info,  Node: Printer Capabilities,  Next: hpif Options,  Up: IFHP Filter

Printer Capabilities
--------------------

   As explained in *Note Attaching Your Printer:: , you can have a
parallel (unidirectional), serial (bidirectional), or network
(bidirectional) connection.  When using a bidirectional connection, you
can sometime obtain or gratuitously receive error and/or status
information from the printer.

   Some printers will spontaneously generate error messages when
printing a job on a bidirectional interface.  Usually, though, it it
necessary to force the printer to provide status in a reasonable format.

   Some printers have the capability of printing either PCL or
PostScript; some require special setup commands and some will
`autosense' which type of job is being printed.

   If you are printing text, and not using a Page Description Language
like PostScript or PCL, then you may want to download a font to the
printer.  This is especially the case when you are trying to print text
files in a non-English font.

   Some printers will provide a `hardware' page counter value when
requested; however, the means of requesting differ from model to model.

   Sometimes you want to generate a special banner for a particular
printer, and need to put in some dynamic information.  While this can
be done by the `lpd' server using the `bp' program specification, it
turns out that non-LPRng systems which want to use the `ifhp' want to
have the same facilities.  Thus,  you need to have some way to get the
same effect as the `bp' option,  but at the filter level.

   Having done `lpd' banner generation and printing, why not have the
filter run an accounting script as well?

   At this point,  I suspect that the reader is beginning to suspect
that making a general purpose filter to support all of these
possibilities is difficult.  That is incorrect.  It is `extremely'
difficult.


File: LPRng-HOWTO.info,  Node: hpif Options,  Next: Parallel Port Printer,  Prev: Printer Capabilities,  Up: IFHP Filter

hpif Options
------------

   These options are specified by the `-Tkey=value [key=value]*' on the
command line.

   \begintable[tbp] \begincenter \begintabular|l|l| Option& Purpose\\ \\
`accounting=accounting[lowbar]script[lowbar]pathname'& Invoke the
accounting script with a subset of theoptions passed to the filter. In
addition, the-bpagecount option indicates the number of pagesprinted
for the job.\\ \\ `autodetect=[on[verbar]off*]'& The printer has or
does not have job type autode-tect capability. Do not download fonts or
try todetermine job type if autodetect is on.\\ \\
`banner=[on[verbar]off*]'& If banner is on, then the ifhp filter will
attemptto print a banner using information passed on thecommand line or
on the standard input. The titleoption can be used to specify
additional titleinformation on the banner. See BANNERS below
fordetails.\\ \\ `cartridge=[*on[verbar]off]'& (Alias for postscript)If
cartridge is on, the printer has PostScript sup-port. The filter will
try to determine if a job ispostscript and send Printer Job Language
commandsto put the printer in PostScript mode.\\ \\ `debug=debuglevel'&
Sets the debugging level; 2 is the default; alarger number causes more
verbose error messages.\\ \\ `defaultfont=fontname'& Sets the default
font to be downloaded; default isNONE.\\ \\ `dev=/device or
dev=host[percnt]port'& Open the specified device or connection to
remotehost; by default ifhp filter uses file descriptor 1(stdout). If
the optional orig[lowbar]port is specified,connections will be
originated from this port.Some printers require that connections
originatefrom a port in the range 1-1024.\\ \\
`infostatus=[*on[verbar]off]'& The PJL INFOSTATUS request is not
supported on someHP printers. Use this to turn the status requestoff.
Note that you cannot get real time reports ofthe printer status if you
do this. This will alsosuppress getting pagecount information using
thePJL facilities.\\ \\ `forcepagecount=[on[verbar]off*]'& If you have
a printer that has PostScript pagecount information support, you can
set infostatusto OFF and forcepagecount to ON. This will causethe
PostScript facility to be used. If you setcartridge or postscript to
OFF then this will notbe done.\\ \\ `logall'& Save all of the error and
information messages fromthe printer in the log file. This is useful
whenyou wish to examine returned status from theprinter.\\ \\
`model=(C5M[verbar]III[verbar]IIID[verbar]IIISi[verbar]IV*)'& The model
of HP printer. C5M is Color 5M, III isHP LaserJet 3, IIID is HP
LaserJet 3D, etc. Addi-tional printers may be added or defined at
varioustimes - please consult the source for details.This selects
various timing and format characteristic-tics. This is a desperation
parameter for userswith antique or non-conforming PJL based
equipment;read the source code for details on the
particularpeculiarities.\\ \\ `pagecount=[on*[verbar]off]'& Get the
hardware pagecounter value for accounting.Some printers such as the HP
LJ4s do not have hard-ware support for pagecounters, and return
bogusnumbers. Use this to suppress attempting to getvalid information.
If your printer does supportPostScript, then you can get the page count
valueusing PostScript by setting forcepagecount to ON.\\ \\
`plp=[on[verbar]off*]'& Return PLP status values on exit; by default
LPRngstatus values are returned.\\ \\ `postscript=[on*[verbar]off]'&
The printer has postscript support.\\ \\ `quiet=[on[verbar]off*]'& If
set, do not report common status messages.\\ \\ `retries=count'& The
number of times to retry connecting to theprinter.\\ \\ `sleep=time'&
The number of seconds to wait before trying to con-nect to the
printer.\\ \\ `status=[*on[verbar]off]'& When on, the printer is
treated as a write onlydevice and is not queried for pagecount and
statusinformation. Set status=OFF for parallel printers.If status is
OFF, then the ifhp filter simply addsjob control language headers,
fonts, and trailersto the jobs.\\ \\ `stty=stty flags'& if the output
device is a serial line, set the linecharacters according to the stty
flags. Theseflags are (most likely) identical to those avail-able with
the stty(1) command on the host system.\\ \\
`summary=[filename[verbar]host[percnt]port]'& This option specifies
that summary or informationalmessages should be placed in the specified
file orsent, using the UDP protocol, to the indicated hostand port
address. This allows remote monitoring ofthe printing and error
activity. The undocumentedprogram included with the filter distribution
is asimple program that can be used to perform the mon-itoring.\\ \\
`sync=[*on[verbar]off]'& Try to synchronize communications with
printer.This will ensure that the printer has been reset,and no
problems involving the previous job willresult.\\ \\
`tbcp=[on[verbar]*off]'& When invoked as an IF filter and transferring
aPostScript job, the filter will use the AdobeTagged Binary
Communications protocol. This allowsbinary data to be transferred and
not interpretedas control information.\\ \\ `title=line[/line]*'& The
title information is printed on the bannerpage; it consists of a list
of / separated lineswhich are added to the banner information.\\ \\
`wrap=[on[verbar]off*]'& enables or disables line wrapping in PCLmode.\\
\\ \endtabular \endcenter \endtable


File: LPRng-HOWTO.info,  Node: Parallel Port Printer,  Next: Printing Banners,  Prev: hpif Options,  Up: IFHP Filter

Parallel Port Printer
---------------------

   On a parallel port printer, you cannot get status, or do much besides
set up the printer to either handle PostScript or do autosensee.  The
following is a typical printcap entry:
     pr:.... options
       :of=/usr/local/lib/filters/ifhp -Tstatus=off
       :if=/usr/local/lib/filters/ifhp -Tstatus=off

   You might want to also look at the `autodetect' or `postscript'
options.


File: LPRng-HOWTO.info,  Node: Printing Banners,  Next: Error Logging,  Prev: Parallel Port Printer,  Up: IFHP Filter

Printing Banners
----------------

   By default, the `ifhp' filter when used as an OF filter will
interpret the first line to it as a `short banner' line, and use the
information on this line to produce a PCL based banner.  The short
banner line should have the format:

   `class':`username' `Job:' `jobinfo' `Date:' `dateformat'

     Example:
       A:papowell Job: (stdin) Date: Sun Dec 14 07:13:34 PST 1997

   This is produced by the default short banner line option value:
     bl=$-'C:$-'n Job: $-'J Date: $-'t

   If you want to suppress banner printing, then you need to suppress
generation of this short banner line.  If you want to have the `lpd'
program to generate the default `long' special banner, then you need to
suppress `ifhp' from interpreting the information sent to is as banner
information.  Finally, you may want to have `lpd' invoke the `bp'
(banner program) and have its output used as the banner.  Here are the
various possible ways:

     # no banner at all, use :sh: - suppress headers
     lp:....
       :sh
       :of=/usr/local/lib/filters/ifhp
     # have ifhp generate banner from short banner input
     lp:....
       :sb
       :of=/usr/local/lib/filters/ifhp
     # have LPD generate long banner, have of filter pass it
     lp:...
       :sb@
       :of=/usr/local/lib/filters/ifhp -Tbanner=off
     # have LPD invoke bp banner generation program, have of filter pass it
     # bp programs require short banner on STDIN to work, so we need to
     # generate short banner
     lp:...
       :sb
       :bp=/usr/local/lib/filters/banner_program
       :of=/usr/local/lib/filters/ifhp -Tbanner=off

   The `ifhp' banner is generated in PCL, and uses the minimum PCL
facilities.  Since when you send a banner to an autosensing printer you
cause it to enter the requested mode, the `if' filter (`ifhp') will
need to reset the printer to autosense mode.  The `ifhp' filter
automatically does this.

   If you want very fancy banners, the `banner.sh' (PCL) and
`psbanner.sh' (PostScript) banner generating programs in the IFHP
distribution make a good starting point.


File: LPRng-HOWTO.info,  Node: Error Logging,  Next: Accounting Information,  Prev: Printing Banners,  Up: IFHP Filter

Error Logging
-------------

   Error logging and reporting is done by the `ifhp' filter as follows.
  1. Messages are produced by the actions of the `ifhp' software.  This
     are logged to the STDERR output of the filter.

  2. Messages are produced by status returned from the printer, when
     the `-Tstatus=on' (default) option is enabled.  These are
     classified according to the Hewlett-Packard Printer Job Language
     error status definitions, and logged to the STDERR output of the
     filter.

  3. In addition to error messages, ongoing status messages are also
     produced.  If the printcap entry has a `ps='`statusfile' entry and
     the `statusfile' exists and is writeable, then the error and
     status messages will be written to the log file.

  4. If the message concerns a serious matter or has been returned from
     the printer as an 'ALERT' in it, then the message can also be sent
     to a 'summaryfile'.  This file can be either a file OR a UDP
     socket on a host. This is specified with the
     `-Tsummary='`summaryfile' option. For example,
              ifhp -Tsummary=taco%3000 would send messages to UDP port 3000

     on host taco.

  5. If you do not want the filter to report status on its STDERR
     output, use the `-Tquiet' option to suppress this, or compile it
     with the -DQUIET option.


File: LPRng-HOWTO.info,  Node: Accounting Information,  Next: Accounting,  Prev: Error Logging,  Up: IFHP Filter

Accounting Information
----------------------

   Doing printer accounting  is not simple.  Read *Note Accounting::

   for more information.

   In order to help aid in accounting, by default the `ifhp' filter
will query the printer to get the current value of the `hardware' page
counter value, if there is such a thing on the printer.  Unfortunately,
due to different types of printers and errors in their PJL, PCL, and
PostScript implementations, several different methods need to be used.
  1. Only a printer with a bidirectional port will return status, so
     you need to have a bidirectional connection.

  2. If the printer is still printing a job, then getting the value of
     the hardware page counter will be useless; you need to wait until
     the printer is idle, i.e. - synchronize your operations with the
     printer.  Unfortunately, some printers return an `idle' indication
     even when they are printing pages of the previous job.  This means
     that the printer has to be polled, and only when it is idle `and'
     the pagecounter value has been stable for a reasonable time (5
     seconds?) can you trust the page counter value.  This slows down
     job printing very seriously.

     Some of the newer PJL printers have a `PJL TEOJ', or return end of
     job indication when the last page of a job has been printed.  If
     you have this capability, you can speed up printing.

  3. If your printer supports Hewlett-Packard Printer Job Language `PJL
     INFO PAGECOUNT' facility, then it will first be tried to get the
     page count.

  4. If your printer does not return pagecount information using the
     PJL facility and it has PostScript support (default), then a small
     PostScript job will be sent to the printer requesting the
     `systemdict pagecounter' value.  Unfortunately, different
     implementations and versions of PostScript will need different
     programs.  The PostScript Printer Definition file for the printer
     will have the correct script that is needed.  The default script
     that is used is:
           /ps [lcub  ] print flush [rcub  ] def
           (\tPAGECOUNT ) ps
           statusdict begin pagecount end == flush

  5. To confuse matters totally, some printers which can do PostScript
     interpretation do not support PJL `PAGECOUNT' reporting.  You can
     use the PostScript method to get the pagecount information, but
     you cannot get status.

  6. The pagecounter information is obtained at the start and end of
     processing a job, and is printed in the accounting file and also
     on File Descriptor 3 (if it is open).  This information has the
     format:
            start -ppagecounter -Ff -kjob -uuser -hhost -R...
            end  -ppages -qpagecounter -Ff -kjob -uuser -hhost -R...

     When we use the OF filter and/or banners,  we will see the
     individual jobs bracketed by the OF filter records:

              start -p100 -Fo -kcfA100taco -uuser -hhost -R...
              start -p101 -Ff -kcfA100taco -uuser -hhost -R...
              end  -p1 -q102 -Ff -kcfA100taco -uuser -hhost -R...
              start -p102 -Ff -kcfA100taco -uuser -hhost -R...

     We can use the various job numbers and other information to track
     page usage.


   The following are a selected set of printcap entries that can be
used to get page counting information:
     # use defaults, try to get pagecount using all methods, wait for stable
     # value of pagecount before proceeding
     pr:...
       :of=/usr/local/lib/filter/ifhp
     # printer support PJL True End of Job and PAGECOUNT
     pr:...
       :of=/usr/local/lib/filter/ifhp -Ttrue_eoj=on
     # no PJL INFO status available, but you can get page count using postscript
     pr:...
       :of=/usr/local/lib/filter/ifhp -Tinfostatus=off,forcepagecount

   You should try connecting to your printer directly and testing the
accounting facilities.  You can do this by using the `ifhp -Tdev=...'
facility.  For example:
     ifhp '-Tdev=/dev/ttyb,stty=38400 -echo -crmod -raw -oddp \
     -evenp ixon pass8 -ixany cbreak' -Tdebug=5 [lt    ]ellipse.ps
     ifhp -Tdev=astart14%9100 -Tdebug=5 -Ttrue_eoj [lt    ]ellipse.ps


File: LPRng-HOWTO.info,  Node: Accounting,  Prev: Accounting Information,  Up: IFHP Filter

Accounting
----------

   The `psfilter' uses the same methods for doing accounting as the
`ifhp' filter.  See *Note Accounting Information::  for details.

   Consult your printer's PostScript Printer Description file to
determine the PostScript script needed to do accounting.  You may need
to modify the default one supplied in the `psfilter' code.

   Always test that the printer returns the right accounting
information using a test similar to the following:
     psfilter -Tdebug=8 '-Tdev=/dev/ttyb,stty=38400 -echo -crmod -raw -oddp \
     -evenp ixon pass8 -ixany cbreak' [lt    ]ellipse.ps
     psfilter -Tdebug=8 -Tdev=astart14%9100 -Ttrue_eoj [lt    ]ellipse.ps


File: LPRng-HOWTO.info,  Node: lp[lowbar]pipe Filters,  Next: apsfilter Filter,  Prev: IFHP Filter,  Up: Filters

lp[lowbar]pipe Filters
======================

   Source code: *Note FTP Sites::

   The `lp[lowbar]pipe' family of filters was developed to act as a
`network pipe' to network devices.  They are largely replaced by the
`lp=host[percnt]port', facility.
   * `tcp-pipe': uses a tcp socket (`OBSOLETED' by
     `lp=host[percnt]port'), but good starting point if you have special
     device requirements;

   * `annex-pipe': supports annex terminal server.


File: LPRng-HOWTO.info,  Node: apsfilter Filter,  Next: Using your own filters,  Prev: lp[lowbar]pipe Filters,  Up: Filters

apsfilter Filter
================

   Source code: *Note FTP Sites::

   The `apsfilter' is basically a simple front end to the `a2ps' program
(See: http://www-inf.enst.fr/~demaille/a2ps/ for details), and is an
example of a `MagicFilter' that has powerful processing capability.
The `apsfilter' program sets up options for the `a2ps' program and then
invokes it.

   The `a2ps' program can convert just about any type of file into
PostScript, and then by using the GhostScript facility can convert this
to the output compatible with a particular printer.

   Combined with the LPRng `qq' and `force[lowbar]queuename' options,
we can set up virtual queues that do various types of reformatting.
Here is a sample set of printcap entries:
     # seen by users - note that the queue name is put into control file,
     #  and we then send it to the frontend@host queue for processing
     raw:qq:lp=frontend@host
     twoup:qq:lp=frontend@host
     landscape:qq:lp=frontend@host
     frontend:lp=frontend@host:force_queuename=raw
     # frontend does the job conversions and accounting
     frontend:server
       :lp=/dev/lp:force_queuename=raw
       :if=/usr/local/lib/filter/apsfilter


File: LPRng-HOWTO.info,  Node: Using your own filters,  Prev: apsfilter Filter,  Up: Filters

Using your own filters
======================

   If you already have a working setup, with its own specific filter
programs, you might want to keep them. Or, you might want to write a
set of your own.

   See the source code in the *Note FTP Sites::  files for examples.


File: LPRng-HOWTO.info,  Node: Spool Queues and Files,  Next: /etc/lpd-conf Configuration File,  Prev: Filters,  Up: Top

Spool Queues and Files
**********************

   When files are accepted by the `lpd' server for printing, they are
stored in a spool queue directory, together with other files
controlling the print operation.  This section describes these files
and how the LPRng software uses them.

   For descriptive purposes, we will use the following printcap entry
as a guide:

     pr|alias
       :sd=/var/lpd/pr_public
       :cd=/var/lpd/pr

* Menu:

* Spool Queue and Control Queue::
* Job State::
* Printer Lock File::
* Spool Control File::
* Log and Status Files::
* Job Control File::
* Job Hold File::
* Job Identifier::


File: LPRng-HOWTO.info,  Node: Spool Queue and Control Queue,  Next: Job State,  Up: Spool Queues and Files

Spool Queue and Control Queue
=============================

   *  `sd='`Spool queue directory name'

   *  `cd='`Control queue directory name'

   The `sd' option in the printcap entry specifies the spool queue
directory.  If there is no `sd' entry or value, then the printer can
only be used by the clients such as `lpr' to locate the destination for
a print job.

   Normally, all information, files, etc., for a print queue is stored
in the spool directory.  However, some software packages such as the
PC-NFS spooling package from Sun Microsystems originally required
read/write access to the directory in order to create print jobs on
behalf of the user.  To prevent unauthorized or accidental tampering
with LPRng operations, the `cd' (control directory) entry specifies
that only the print job files should be placed in the spool queue, and
that all the control and informational files should be in the control
directory.

   By default, the `cd' value will be the same as the `sd' value unless
explicitly overridden in the printcap entry.


File: LPRng-HOWTO.info,  Node: Job State,  Next: Printer Lock File,  Prev: Spool Queue and Control Queue,  Up: Spool Queues and Files

Job State
=========

   Options used:
   *  `ah'`[nbsp  ][nbsp  ]Automatically hold jobs'

   A job can be in the following state:
  1. Initial.  This is the state during job submission.  Jobs in the
     initial state do not have any status displayed for them.

  2. Held.  Once a job is submitted, it can either be printed or `held'.
     The `ah' printcap option specifies that all jobs are automatically
     held on submission.  The `lpc release' and `lpc redo' command will
     cause these jobs to be printed and the `lprm' command can remove
     these jobs.

  3. Active.  The job is being processed for printing or transfer to
     another queue.

  4. Pending.  Jobs which can be printed but are not active.

  5. Error.  Jobs which have encountered an error during printing.  The
     `lpc release' and `lpc redo' command will cause these jobs to be
     printed and the `lprm' command can remove these jobs.

  6. Done.  Jobs which have completed printing, but which are not yet
     removed from the print queue.  See the ` *Note Normal Termination::
     ' flag for more information.  The `lprm' command can remove these
     jobs.

   Normally the job sequences is initial, pending, active, and done.
However, a job may be put in the error state by problems processing the
job or by actions of the `lpc' command.


File: LPRng-HOWTO.info,  Node: Printer Lock File,  Next: Spool Control File,  Prev: Job State,  Up: Spool Queues and Files

Printer Lock File
=================

   When the `lpd' server starts printing, it will fork individual
worker processes to service each queue.  To prevent multiple processes
from working on the same queue, a printer lock file with the cannonical
spool queue name is used.  In our example, the lock file would be:
`/var/lpd/pr/pr'.

   The process ID of the currently active printer is stored in the lock
file.  By reading the lock file and testing to see if the process is
still active, programs such as `lpq' can determine queue activity.

   Similarly, the worker process may need to create other processes to
assist it.  These in turn will create lock or temporary files in the
spool directory as well.


File: LPRng-HOWTO.info,  Node: Spool Control File,  Next: Log and Status Files,  Prev: Printer Lock File,  Up: Spool Queues and Files

Spool Control File
==================

   The spool control file is used to control the operations of the
spooler, and is in the spool or control directory.  The file name has
the form `control.`printer"; in our example, the control file would be:
`/var/lpd/pr/control.pr'.

   The `lpc' program sends spool control requests to the `lpd' daemon,
which updates the control file and then signals the appropriate spool
server processes that an update has been performed.  The control file
contents have the form:
     key value

   The following keys and their values are currently supported.

